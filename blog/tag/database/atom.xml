<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Database | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/database/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-03-29T10:31:37+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shacial 的資料庫設計]]></title>
    <link href="http://pro.ctlok.com/2012/03/shacial-database-design.html"/>
    <updated>2012-03-23T14:40:00+08:00</updated>
    <id>http://pro.ctlok.com/2012/03/shacial-database-design</id>
    <content type="html"><![CDATA[<p><a href="http://www.shacial.com">Shacial</a> 上線時間差不多有 4 星期了，雖然使用的人並不多，但仍然想再將這個服務做得更加好。<br />在這裡我先公開資料庫設計給大家看看。以後可能會再公開程式碼。(Open Source Project ?)<br /><br />以下就是 <a href="http://www.shacial.com">Shacial</a> 的 ERD:<br /><br /><a href="http://3.bp.blogspot.com/-IuTFgpUweFM/T2wZLbHTBhI/AAAAAAAAA94/r_OJn2IS4Cc/s1600/ERD.png" imageanchor="1" style=""><img border="0" height="345" width="400" src="http://3.bp.blogspot.com/-IuTFgpUweFM/T2wZLbHTBhI/AAAAAAAAA94/r_OJn2IS4Cc/s400/ERD.png" /></a><br /><br />已經設計好支援檔案版本控制。下一步應該要想想如何支援 <b>News Feed</b>，即時的信息傳遞。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-987543225069631026?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 JPA 自動產生 ID]]></title>
    <link href="http://pro.ctlok.com/2010/04/jpa-id.html"/>
    <updated>2010-04-15T10:41:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/04/jpa-id</id>
    <content type="html"><![CDATA[<p>以 PostgreSQL 為例。<br /><br />首先先在 PostgreSQL 內新增一個 Sequence 和 Table。<br /><br />User ID Sequence:<br /><pre class="brush: sql">CREATE SEQUENCE user_id_seq<br />  INCREMENT 1<br />  MINVALUE 1<br />  MAXVALUE 9223372036854775807<br />  START 1<br />  CACHE 1;<br /></pre><br />User Table:<br /><pre class="brush: sql">CREATE TABLE &quot;user&quot;<br />(<br />  uid integer NOT NULL DEFAULT nextval(&#39;user_id_seq&#39;::regclass),<br />  username character varying(255) NOT NULL,<br />  &quot;password&quot; character varying(255) NOT NULL,<br />  CONSTRAINT user_pk PRIMARY KEY (uid)<br />)<br />WITH (<br />  OIDS=FALSE<br />);<br /></pre><br />然後新增一個 Entity class。<br /><br />User entity:<br /><pre class="brush: java">package com.blogspot.lawpronotes.entity;<br /><br />import java.io.Serializable;<br /><br />import javax.persistence.Basic;<br />import javax.persistence.Column;<br />import javax.persistence.Entity;<br />import javax.persistence.GeneratedValue;<br />import javax.persistence.GenerationType;<br />import javax.persistence.Id;<br />import javax.persistence.SequenceGenerator;<br />import javax.persistence.Table;<br /><br />@Entity<br />@Table(name = &quot;user&quot;, schema = &quot;public&quot;)<br />public class User implements Serializable {<br />    private static final long serialVersionUID = 1L;<br /><br />    @Id<br />    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;USER_UID_GENERATOR&quot;)<br />    @SequenceGenerator(name = &quot;USER_UID_GENERATOR&quot;, sequenceName = &quot;user_id_seq&quot;, allocationSize = 1)<br />    @Column(name = &quot;uid&quot;)<br />    private Integer uid;<br /><br />    @Basic<br />    @Column(name = &quot;username&quot;, nullable = false, unique = true)<br />    private String username;<br /><br />    @Basic<br />    @Column(name = &quot;password&quot;, nullable = false, unique = false)<br />    private String password;<br /><br />    public User() {<br />    }<br /><br />    public Integer getUid() {<br />        return this.uid;<br />    }<br /><br />    public void setUid(Integer uid) {<br />        this.uid = uid;<br />    }<br /><br />    public String getName() {<br />        return this.username;<br />    }<br /><br />    public void setName(String username) {<br />        this.username = username;<br />    }<br /><br />    public String getPassword() {<br />        return this.password;<br />    }<br /><br />    public void setPassword(String password) {<br />        this.password = password;<br />    }<br /><br />}<br /></pre><br />其中的關鍵:<br /><pre class="brush: java">@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;USER_UID_GENERATOR&quot;)<br />@SequenceGenerator(name = &quot;USER_UID_GENERATOR&quot;, sequenceName = &quot;user_id_seq&quot;, allocationSize = 1)<br /></pre><br />GeneratedValue 的 strategy 是 GenerationType.SEQUENCE，即是不斷地加同一個數值，達到一致。而 generator 即是數值產生器的名稱，數值產生器即是 SequenceGenerator，SequenceGenerator 的 sequenceName 要跟資料庫內的 sequence 名稱一樣，因為是靠資料庫內的 sequence 產生數值的， allocationSize 即是每次將數值加多少，因為資料庫內的 sequence 設定了每次加 1 ，allocationSize 也要是 1 才行，系統預設的 allocationSize 是 50。現在應該可以自動產生 ID 了。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Pro-JPA-Mastering-Persistence-Technology/dp/1430219564?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Pro JPA 2: Mastering the Java&amp;trade; Persistence API (Expert&#39;s Voice in Java Technology)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1430219564&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1430219564" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Pro-EJB-Java-Persistence-API/dp/1590596455?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Pro EJB 3: Java Persistence API" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1590596455&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1590596455" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Appendixes/dp/1596821620?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="PostgreSQL 8.4 Official Documentation - Volume V. Internals and Appendixes" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1596821620&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1596821620" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-1752873219027309956?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 JPA 連接 PostgreSQL]]></title>
    <link href="http://pro.ctlok.com/2010/04/jpa-postgresql.html"/>
    <updated>2010-04-09T14:37:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/04/jpa-postgresql</id>
    <content type="html"><![CDATA[<p>首先資料庫內的表格名稱最好為英文小寫，因為 PostgreSQL 會自動將表格名稱轉為小寫。<br />例子:<br /><pre class="brush: sql">INSERT INTO public.User (id, name, password) VALUES (1, 'Lawrence', '123456')<br /></pre><br />會變成:<br /><pre class="brush: sql">INSERT INTO public.user (id, name, password) VALUES (1, 'Lawrence', '123456')<br /></pre><br />這樣便會找不到表格而出錯。<br />以下這種寫法才可以順利找到表格。<br /><pre class="brush: sql">INSERT INTO public.&quot;User&quot; (id, name, password) VALUES (1, 'Lawrence', '123456')<br /></pre><br />需要將 User 用 &quot; 包起來才可以，而 JPA 中插入資料時，程式最終也會將物件變為 SQL 才能將資料加入或取出。JPA 並不會自動將表格名稱用 &quot; 包起來。<br /><br />Entity 例子:<br /><pre class="brush: java">package com.blogspot.lawpronotes.entity;<br /><br />import java.io.Serializable;<br /><br />import javax.persistence.Column;<br />import javax.persistence.Entity;<br />import javax.persistence.Id;<br />import javax.persistence.Table;<br /><br />/<em>*<br /> * The persistent class for the user database table.<br /> * <br /> </em>/<br />@Entity<br />@Table(name = &quot;user&quot;, schema = &quot;public&quot;)<br />public class User implements Serializable {<br />    private static final long serialVersionUID = 1L;<br /><br />    @Id<br />    @Column(name = &quot;id&quot;)<br />    private Integer id;<br /><br />    @Column(name = &quot;name&quot;)<br />    private String name;<br /><br />    @Column(name = &quot;password&quot;)<br />    private String password;<br /><br />    public User() {<br />    }<br /><br />    public Integer getId() {<br />        return this.id;<br />    }<br /><br />    public void setId(Integer id) {<br />        this.id = id;<br />    }<br /><br />    public String getName() {<br />        return this.name;<br />    }<br /><br />    public void setName(String name) {<br />        this.name = name;<br />    }<br /><br />    public String getPassword() {<br />        return this.password;<br />    }<br /><br />    public void setPassword(String password) {<br />        this.password = password;<br />    }<br /><br />}<br /></pre><br />如果表格名稱是大寫又不能改的話，只好將<br /><pre class="brush: java">@Table(name=&quot;user&quot;, schema=&quot;public&quot;)<br /></pre>改為<br /><pre class="brush: java">@Table(name=&quot;&amp;quot;User&amp;quot;&quot;, schema=&quot;public&quot;)<br /></pre><br />Column 名稱也一樣，將<br /><pre class="brush: java">@Column(name = &quot;name&quot;)<br /></pre>改為<br /><pre class="brush: java">@Column(name = &quot;&amp;quot;Name&amp;quot;&quot;)<br /></pre><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Language/dp/1596821582?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="PostgreSQL 8.4 Official Documentation - Volume I. The SQL Language" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1596821582&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1596821582" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Administration/dp/1596821590?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="PostgreSQL 8.4 Official Documentation - Volume II. Server Administration" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1596821590&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1596821590" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Programming/dp/1596821604?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="PostgreSQL 8.4 Official Documentation - Volume III. Server Programming" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1596821604&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1596821604" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-7358375987171526715?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Text, Blob 大小]]></title>
    <link href="http://pro.ctlok.com/2010/04/mysql-text-blob.html"/>
    <updated>2010-04-08T22:41:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/04/mysql-text-blob</id>
    <content type="html"><![CDATA[<p>TINYTEXT, TINYBLOB: 256 bytes<br /><br />TEXT, BLOB: 65,535 bytes = 64kb<br /><br />MEDIUMTEXT, MEDIUMBLOB: 16,777,215 bytes = 16MB<br /><br />LONGTEXT, LONGBLOB: 4,294,967,295 bytes = 4GB<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/High-Performance-MySQL-Optimization-Replication/dp/0596101716?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="High Performance MySQL: Optimization, Backups, Replication, and More" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596101716&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596101716" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/MySQL-4th-Paul-DuBois/dp/0672329387?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="MySQL (4th Edition)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0672329387&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0672329387" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Learning-MySQL-Seyed-Saied-Tahaghoghi/dp/0596008643?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Learning MySQL" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596008643&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596008643" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-3160975434761094459?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Windows 手動移除 PostgreSQL 8.4]]></title>
    <link href="http://pro.ctlok.com/2010/03/windows-postgresql-84.html"/>
    <updated>2010-03-31T11:57:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/03/windows-postgresql-84</id>
    <content type="html"><![CDATA[<p>如果你在安裝&nbsp;PostgreSQL 中途發生錯誤，而又用不到 Uninstaller 去移除&nbsp;PostgreSQL，可以跟以下的步驟去手動移除然後重新安裝。<br /><ol><li>移除安裝目錄: <b>rd /s /q "C:\Program Files\PostgreSQL\8.4</b></li><li>移除 PostgreSQL 的用戶: <b>net user postgres /delete</b></li><li>移除在 Registry 的安裝資料: <b>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Installations\postgresql-8.4</b></li><li>移除在 Registry 的服務資料: <b>HKEY_LOCAL_MACHINE\SOFTWARE\PostgreSQL\Services\postgresql-8.4</b></li><li>移除 PostgreSQL 服務:&nbsp;<b>sc delete postgresql-8.4</b></li></ol><div>相關書籍:&nbsp;<a href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Language/dp/1596821582?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="PostgreSQL 8.4 Official Documentation - Volume I. The SQL Language" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1596821582&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1596821582" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Programming/dp/1596821604?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="PostgreSQL 8.4 Official Documentation - Volume III. Server Programming" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1596821604&amp;tag=program06-20" /></a><a href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Administration/dp/1596821590?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="PostgreSQL 8.4 Official Documentation - Volume II. Server Administration" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1596821590&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1596821590" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1596821604" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /></div><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-2876045594631775164?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
