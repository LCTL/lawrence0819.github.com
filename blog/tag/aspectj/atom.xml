<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AspectJ | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/aspectj/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-03-30T16:04:35+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 AspectJ 記錄 Spring Bean 丟出的 Exception]]></title>
    <link href="http://pro.ctlok.com/2010/06/aspectj-record-spring-bean-method-throw.html"/>
    <updated>2010-06-09T11:06:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/06/aspectj-record-spring-bean-method-throw</id>
    <content type="html"><![CDATA[<p>在上一篇也提過使用 AspectJ 可輕鬆地將大量 Method 前後插入程式碼，網址: <a href="http://pro.ctlok.com/2010/06/aspectj-record-spring-bean-method.html">AspectJ 記錄執行時間</a><br /><br />今次這篇是使用 AspectJ 去記錄 Spring Bean 丟出的 Exception，一樣是非常簡單就可達成目的。<br /><br />首先要先在設定 bean 的 xml 檔案加上以下內容:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br />&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;<br />    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;<br />    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br /> xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;<br />    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<br /> http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<br /> http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&quot;&gt;<br /> <br />    &lt;aop:aspectj-autoproxy /&gt;<br />    &lt;context:component-scan base-package=&quot;com.ctlok.pro.bean.aspect&quot; /&gt;<br /><br />&lt;/beans&gt;<br /></pre><br />製作一個 CommonLogger 的 class:<br /><pre class="brush: java">package com.ctlok.pro.bean.aspect;<br /><br />import org.aspectj.lang.annotation.Aspect;<br />import org.aspectj.lang.annotation.Pointcut;<br />import java.util.logging.Logger;<br />import org.springframework.stereotype.Component;<br /><br />@Aspect<br />@Component<br />public class CommonLogger {<br /><br />    private static final Logger logger = Logger.getLogger(CommonLogger.class.getName());<br /><br />    @Pointcut(&quot;execution(<em> com.ctlok.pro.bean.service.</em>.<em>(..))&quot;)<br />    public void service() {<br />    }<br /><br />}<br /></pre><br />首先定義那些 bean method 要被記錄，在這裡是些有 com.ctlok.pro.bean.service 內的 class 和所有 method 都記錄起來。<br /><br />再來是加入記錄程式碼:<br /><pre class="brush: java">@AfterThrowing(pointcut = &quot;service()&quot;, throwing = &quot;throwable&quot;)<br />public void exceptionLogger(JoinPoint joinPoint, Throwable throwable) {<br />    String clazz = joinPoint.getTarget().getClass().getSimpleName();<br />    String method = joinPoint.getSignature().getName();<br />    String log = &quot;Class: &quot; + clazz + &quot;run Method: &quot; + method + &quot; throw Exception: &quot; + throwable.toString();<br />    logger.warning(log);<br />}<br /></pre><br />@AfterThrowing 注解用來設定被記錄的 method 丟出 exception 後便執行。<br />throwing 用來設定 Throwable class 的名稱。<br /><br />完整的 CommonLogger:<br /><pre class="brush: java">package com.ctlok.pro.bean.aspect;<br /><br />import org.aspectj.lang.JoinPoint;<br />import org.aspectj.lang.annotation.AfterThrowing;<br />import org.aspectj.lang.annotation.Aspect;<br />import org.aspectj.lang.annotation.Pointcut;<br />import java.util.logging.Logger;<br />import org.springframework.stereotype.Component;<br /><br />@Aspect<br />@Component<br />public class CommonLogger {<br /><br />    private static final Logger logger = Logger.getLogger(CommonLogger.class<br />            .getName());<br /><br />    @Pointcut(&quot;execution(</em> com.ctlok.pro.bean.service.<em>.</em>(..))&quot;)<br />    public void service() {<br />    }<br /><br />    @AfterThrowing(pointcut = &quot;service()&quot;, throwing = &quot;throwable&quot;)<br />    public void exceptionLogger(JoinPoint joinPoint, Throwable throwable) {<br />        String clazz = joinPoint.getTarget().getClass().getSimpleName();<br />        String method = joinPoint.getSignature().getName();<br />        String log = &quot;Class: &quot; + clazz + &quot;run Method: &quot; + method<br />                + &quot; throw Exception: &quot; + throwable.toString();<br />        logger.warning(log);<br />    }<br /><br />}<br /></pre><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Aspectj-Action-Enterprise-Spring-Applications/dp/1933988053?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Aspectj in Action: Enterprise AOP with Spring Applications" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1933988053&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1933988053" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/AspectJ-Action-Practical-Aspect-Oriented-Programming/dp/1930110936?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="AspectJ in Action: Practical Aspect-Oriented Programming" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1930110936&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1930110936" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Eclipse-AspectJ-Aspect-Oriented-Programming-Development/dp/0321245873?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Eclipse AspectJ: Aspect-Oriented Programming with AspectJ and the Eclipse AspectJ Development Tools" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0321245873&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0321245873" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-1885450191955309087?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 AspectJ 記錄 Spring Bean 執行時間從而改善系統效能]]></title>
    <link href="http://pro.ctlok.com/2010/06/aspectj-record-spring-bean-method.html"/>
    <updated>2010-06-07T10:47:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/06/aspectj-record-spring-bean-method</id>
    <content type="html"><![CDATA[<p>有時為了改善系統效能，需要知道那一個程序用了較多時間，而每一個程序又會用到很多不同的 Method 去完成，如果每一個 Method 也要記錄執行時間，而 Method 數目又有很多，不可能在每一個 Method 前加上 Timer 後面記錄 Timer 時間，這時候 AspectJ 便大派用場了。<br /><br />這篇文章是 Spring + AspectJ，不是單純使用 AspectJ，所以要記錄執行時間的 Method 必須是 Spring bean，非 Spring 管理的 bean 是記錄不到的。<br /><br />首先是在設定 bean 的 xml 檔案加上以下內容:<br /><br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br />&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;<br />    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;<br />    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br /> xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;<br />    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<br /> http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<br /> http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&quot;&gt;<br /> <br />    &lt;aop:aspectj-autoproxy /&gt;<br />    &lt;context:component-scan base-package=&quot;com.ctlok.pro.bean.aspect&quot; /&gt;<br /><br />&lt;/beans&gt;<br /></pre><br />我是使用註解的方式去設定 Spring bean 的，如果你不是使用這種方式請自行更改。<br />現在制作記錄執行時間的 bean。<br /><br /><pre class="brush: java">package com.ctlok.pro.bean.aspect;<br /><br />import org.aspectj.lang.annotation.Aspect;<br />import org.springframework.stereotype.Component;<br /><br />@Aspect<br />@Component<br />public class ProcessTimeLogger {<br /><br />}<br /></pre><br />在這裡 AspectJ 也是使用註解的方式去設定，加上 @Component 是要令 Spring Loader 也將這個 POJO 載入成 Spring bean。<br /><br />要記錄時間當然也要使用 Logger 去記錄，而且要令 AspectJ 知道記錄那一此 Method，請加上以下內容:<br /><br /><pre class="brush: java">private static final Logger logger = Logger.getLogger(ProcessTimeLogger.class.getName());<br /><br />@Pointcut(&quot;execution(<em> com.ctlok.pro.bean.service.</em>.<em>(..))&quot;)<br />public void service(){}<br /></pre><br />在這裡我使用 java.util.logging.Logger 去記錄時間，你喜歡可以改為 log4j 或 slf4j 也可以。<br /><br />@Pointcut 這個註解是用來設定在程式那一倨位置設入。<br /><br /></em> com.ctlok.pro.bean.service.<em>.</em>(..) 的第一顆 * 是 public、 protected、 privat 或預設 method，如果你<br /><br />只想記錄 public method，可以改成以下這樣:<br /><pre class="brush: java">@Pointcut(&quot;execution(public com.ctlok.pro.bean.service.<em>.</em>(..))&quot;)<br />public void service(){}<br /></pre><br />而 service.<em>.</em>(..) 第一顆 * 是代表 class，因為我的 Spring bean 也放在 service 目錄下，而第二顆是代表 Method 名稱，(..) 即是這個 Method 有變數輸入或是沒有變數輸入都可以。<br /><br />而在可以新增一個 Method 去記錄時間，輸入以下內容:<br /><pre class="brush: java">@Around(&quot;service()&quot;)<br />public Object logging(ProceedingJoinPoint joinPoint) throws Throwable{<br />    String clazz = joinPoint.getTarget().getClass().getSimpleName();  <br />    String method = joinPoint.getSignature().getName(); <br />    StopWatch watch = new StopWatch(); <br />    watch.start();<br />    Object result = joinPoint.proceed();<br />    watch.stop();   <br />    String log = clazz + &quot; Run &quot; + method + &quot;method complete in &quot; + watch.getTime() + &quot; ms&quot;;<br />    logger.info(log);   <br />    return result;<br />}<br /></pre><br />@Around 可以用來設定在 Method 執行前後所做的動作。<br /><br />ProceedingJoinPoint joinPoint 可以用來提取一些資訊，AspectJ 會自動將變數傳。<br /><br />joinPoint.getTarget() 則可以取得現在將會執行的 Method 的 Class。<br /><br />joinPoint.getSignature() 可以取得現在將會執行的 Method 名稱。<br /><br />StopWatch 是一個 Timer，在 Method 執行前開始記錄時間。<br /><br />joinPoint.proceed() 用來執行 Method。<br /><br />最後便是記錄執行時間了。<br /><br />完整的 ProcessTimeLogger:<br /><pre class="brush: java">package com.ctlok.pro.bean.aspect;<br /><br />import java.util.logging.Logger;<br /><br />import org.apache.commons.lang.time.StopWatch;<br />import org.aspectj.lang.ProceedingJoinPoint;<br />import org.aspectj.lang.annotation.Around;<br />import org.aspectj.lang.annotation.Aspect;<br />import org.aspectj.lang.annotation.Pointcut;<br />import org.springframework.stereotype.Component;<br /><br />@Aspect<br />@Component<br />public class ProcessTimeLogger {<br /><br />    private static final Logger logger = Logger<br />            .getLogger(ProcessTimeLogger.class.getName());<br /><br />    @Pointcut(&quot;execution(<em> com.ctlok.pro.bean.service.</em>.*(..))&quot;)<br />    public void service() {<br />    }<br /><br />    @Around(&quot;service()&quot;)<br />    public Object logging(ProceedingJoinPoint joinPoint) throws Throwable {<br />        String clazz = joinPoint.getTarget().getClass().getSimpleName();<br />        String method = joinPoint.getSignature().getName();<br />        StopWatch watch = new StopWatch();<br />        watch.start();<br />        Object result = joinPoint.proceed();<br />        watch.stop();<br />        String log = clazz + &quot; Run &quot; + method + &quot;method complete in &quot;<br />                + watch.getTime() + &quot; ms&quot;;<br />        logger.info(log);<br />        return result;<br />    }<br />}<br /></pre><br />在這裡有一點要注意，如果 A method 會使用到 B method 和 C method，那 A method 的執行時間一定是 B method 和 C method 執行時間總和再加 A method 的執行時間。<br /><br />現在可以去測試一下那一個 Method 用了比預期多的時間去完成任務。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Aspectj-Action-Enterprise-Spring-Applications/dp/1933988053?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Aspectj in Action: Enterprise AOP with Spring Applications" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1933988053&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1933988053" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Eclipse-AspectJ-Aspect-Oriented-Programming-Development/dp/0321245873?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Eclipse AspectJ: Aspect-Oriented Programming with AspectJ and the Eclipse AspectJ Development Tools" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0321245873&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0321245873" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/AspectJ-Action-Ramnivas-Laddad/dp/1930110936?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="AspectJ in Action: Practical Aspect-Oriented Programming" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1930110936&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1930110936" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-4055444111559084172?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Web MVC + AspectJ 記錄 IP]]></title>
    <link href="http://pro.ctlok.com/2010/02/spring-web-mvc-aspect-ip.html"/>
    <updated>2010-02-28T22:53:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/02/spring-web-mvc-aspect-ip</id>
    <content type="html"><![CDATA[<p>因為 AspectJ 需要用介面去制作一個代理 (proxy)(如果有使用 CGLib 可以不使用介面 (interface))，所以先制作一個介面 (interface)，這個 Spring Web controller 的介面 ，介名為 com.blogsport.lawpronotes.controller.MyController。<br />MyController 程式碼:<br /><pre class="brush: java">package com.blogsport.lawpronotes.controller;<br /><br />import org.springframework.web.bind.annotation.RequestMapping;<br />import org.springframework.web.bind.annotation.RequestMethod;<br /><br />public interface MyController {<br />    @RequestMapping<br />    public String genenalProcess();<br />    @RequestMapping(method=RequestMethod.GET, params=&quot;view=iphone&quot;)<br />    public String IPhoneView();<br />}<br /></pre><br />在 method 上需要加上註解，不然該 method 無法被 Spring Web Controller 調用。<br /><br />新增一個 Class 去實作這個介面，命名為 IndexController。<br />IndexController 程式碼:<br /><pre class="brush: java">package com.hkforum.web.controller;<br /><br />import org.springframework.stereotype.Controller;<br />import org.springframework.web.bind.annotation.RequestMapping;<br /><br />@Controller<br />@RequestMapping(&quot;/index&quot;)<br />public class IndexController implements MyController {<br />    @RequestMapping<br />    public String genenalProcess() {<br />        return &quot;index&quot;;<br />    }<br /><br />    @RequestMapping<br />    public String IPhoneView() {<br />        return &quot;iphoneIndex&quot;;<br />    }<br />}<br /></pre><br />實作的 method 也需要加上註解，作用是要 Aspect 辨識出該 method 是用戶要求調用的方法。<br /><br />現在新增個一個 Class，命名為 com.blogsport.lawpronotes.logger.WebLogger，用來記錄用戶使用了那一個 method 和 IP 地址。<br />WebLogger 程式碼:<br /><pre class="brush: java">package com.blogsport.lawpronotes.logger;<br /><br />import org.aspectj.lang.JoinPoint;<br />import org.aspectj.lang.annotation.Aspect;<br />import org.aspectj.lang.annotation.Before;<br />import org.aspectj.lang.annotation.Pointcut;<br />import org.springframework.web.context.request.RequestContextHolder;<br />import org.springframework.web.context.request.ServletRequestAttributes;<br /><br />@Aspect<br />public class WebLogger {<br /><br />    @Pointcut(&quot;@annotation(org.springframework.web.bind.annotation.RequestMapping)&quot;)<br />    public void anyRequestMappingMethod() {<br />    }<br /><br />    @Pointcut(&quot;execution(<em> com.hkforum.web.controller.</em>.<em>(..))&quot;)<br />    public void anyControllerMethod() {<br />    }<br /><br />    @Pointcut(&quot;execution(public * </em>(..))&quot;)<br />    public void anyPublicMethod() {<br />    }<br /><br />    @Pointcut(&quot;anyControllerMethod() &amp;&amp; anyPublicMethod() &amp;&amp; anyRequestMappingMethod()&quot;)<br />    public void anyInteractionMethod() {<br />    }<br /><br />    @Before(&quot;anyInteractionMethod()&quot;)<br />    public void recordIP(JoinPoint pjp) {<br />        String remoteAddress = ((ServletRequestAttributes) RequestContextHolder<br />                .currentRequestAttributes()).getRequest().getRemoteAddr();<br />        System.out.println(pjp.toString() + &quot; ip:&quot; + remoteAddress);<br />    }<br />}<br /></pre><br />截取有 RequestMapping 註解的 method:<br /><pre class="brush: java">@Pointcut(&quot;@annotation(org.springframework.web.bind.annotation.RequestMapping)&quot;)<br /></pre><br />截取所有 Web Controller 的 Class:<br /><pre class="brush: java">@Pointcut(&quot;execution(<em> com.hkforum.web.controller.</em>.<em>(..))&quot;)<br /></pre><br />截取所有公開 method:<br /><pre class="brush: java">@Pointcut(&quot;execution(public * </em>(..))&quot;)<br /></pre><br />截取合乎以上條件的方法:<br /><pre class="brush: java">@Pointcut(&quot;anyControllerMethod() &amp;&amp; anyPublicMethod() &amp;&amp; anyRequestMappingMethod()&quot;)<br /></pre><br />因為 Web Controller bean 不是一般的 Spring Bean，所以不會在 applicationContext.xml 加上 Aspect，而且加了也不能截取 Web Controller Bean。<br />現在要更改 dispatcherServlet-servlet.xml。<br />請加上以下程式碼:<br /><pre class="brush: xml">&lt;aop:aspectj-autoproxy /&gt;<br />&lt;bean id=&quot;webLogger&quot; class=&quot;com.hkforum.web.logger.WebLogger&quot; /&gt;<br />&lt;bean id=&quot;indexController&quot; class=&quot;com.hkforum.web.controller.IndexController&quot; /&gt;<br /></pre><br />完整 dispatcherServlet-servlet.xml:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br />&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;<br />    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br />    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;<br />    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<br /> http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd<br /> http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&quot;&gt;<br /><br />    &lt;aop:aspectj-autoproxy /&gt;<br />    &lt;bean id=&quot;webLogger&quot; class=&quot;com.hkforum.web.logger.WebLogger&quot; /&gt;<br />    &lt;bean id=&quot;indexController&quot; class=&quot;com.hkforum.web.controller.IndexController&quot; /&gt;<br />    &lt;bean id=&quot;viewResolver&quot;<br />        class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;<br />        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot; /&gt;<br />        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;<br />    &lt;/bean&gt;<br />&lt;/beans&gt;<br /></pre><br /><em><em>請自行新增 index.jsp 和 iphoneIndex.jsp 到 /WEB-INF/views/ 資料夾下。<br /><br />用瀏覽器打開 index.</em>， Console 會顯示:<br /><pre class="brush: text">execution(String com.hkforum.web.controller.MyController.genenalProcess()) ip:127.0.0.1<br /></pre>如果是 index.</em>?view=iphone，Console 會顯示:<br /><pre class="brush: text">execution(String com.hkforum.web.controller.MyController.IPhoneView()) ip:127.0.0.1<br /></pre><br />以這種方式來制作截取記錄的好處是可以將記錄程式碼和控制程式碼分開，而且能夠截取到多個 method，又可以減少多餘的程式碼，又比較好維護。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Spring-Recipes-Problem-Solution-Gary-Mak/dp/1590599799?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Spring Recipes: A Problem-Solution Approach" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1590599799&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1590599799" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Spring-Action-Craig-Walls/dp/1933988134?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Spring in Action" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1933988134&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1933988134" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Spring-Web-Recipes-Problem-Solution-Technologies/dp/1430224991?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Spring Web Recipes: A Problem-Solution Approach to Spring Framework Web Development Technologies" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1430224991&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1430224991" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-140520351571043313?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
