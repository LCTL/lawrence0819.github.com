<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Factory Pattern | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/factory-pattern/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2015-12-17T10:59:14+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design Pattern - Factory]]></title>
    <link href="http://pro.ctlok.com/blog/2012/04/02/design-pattern-factory.html"/>
    <updated>2012-04-02T10:32:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/04/02/design-pattern-factory</id>
    <content type="html"><![CDATA[<p>Factory Pattern 可以將創造實例的程式碼分離，令原本核心的程式碼不必太過依賴於某一個物件，
並可以令其他要用到同一物件的地方使用同一套程式碼，方便集中管理。</p>

<p>看看以下例子應該有助你明白這個模式：</p>

<!--more-->


<hr />

<p>公司要你開發一個 Logger (記錄器)，用於記錄程式內的變化，你一開始可能會設計成以下這樣:</p>

<p>{% img /downloads/code/design-pattern-factory/sample1/uml.png %}</p>

<p>{% include_code design-pattern-factory/sample1/Logger.java %}
{% include_code design-pattern-factory/sample1/ConsoleLogger.java %}</p>

<p>其他程式要使用時會直接使用 <code>new ConsoleLogger()</code> 來取得 ConsoleLogger 的 Instance (實例)。</p>

<p>{% include_code design-pattern-factory/sample1/AService.java %}
{% include_code design-pattern-factory/sample1/BService.java %}</p>

<p>有沒有發現什麼問題? 如果使用 Logger 的物件超過 100 個，要轉換 ConsoleLogger 為其他 Logger 就要更改 100 次程式碼。</p>

<hr />

<p>我們可以使用 Factory Pattern 來解決這個問題:</p>

<p>{% img /downloads/code/design-pattern-factory/sample2/uml.png %}</p>

<p>{% include_code design-pattern-factory/sample2/Logger.java %}
{% include_code design-pattern-factory/sample2/ConsoleLogger.java %}
{% include_code design-pattern-factory/sample2/FileLogger.java %}
{% include_code design-pattern-factory/sample2/LoggerFactory.java %}</p>

<p>新增一個 LoggerFactory，用來建立 Logger 。</p>

<p>{% include_code design-pattern-factory/sample2/AService.java %}
{% include_code design-pattern-factory/sample2/BService.java %}</p>

<p>以後要使用 Logger 時不必知道實際是使用 ConsoleLogger 或 FileLogger，只要物件實現了 Logger 這個介面就可以了。
這個 Factory Pattern 解決了一些問題，但仍然差一點，例如: 在測試環境中我想使用 ConsoleLogger，
但在正常環境中是使用 FileLogger，但以上的方法並不能解決這個問題。</p>

<hr />

<p>將 LoggerFactory 的 createLogger 變更為 Non-Static:
{% include_code design-pattern-factory/sample3/LoggerFactory.java %}</p>

<p>新増一個 MockLoggerFactory 在測試環境:
{% include_code design-pattern-factory/sample3/MockLoggerFactory.java %}</p>

<p>{% include_code design-pattern-factory/sample3/AService.java %}
{% include_code design-pattern-factory/sample3/BService.java %}</p>

<p>{% include_code design-pattern-factory/sample3/Main.java %}</p>

<p>這樣就可以在不同環境替換 LoggerFactory 來建立不同的 Logger。</p>

<hr />

<p>以下的圖片是描述 Factory Pattern 的 Class Diagram。（From Wiki）</p>

<p>{% img http://upload.wikimedia.org/wikipedia/commons/thumb/a/a3/FactoryMethod.svg/349px-FactoryMethod.svg.png %}</p>
]]></content>
  </entry>
  
</feed>
