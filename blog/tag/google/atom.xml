<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Google | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/google/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-03-25T13:21:25+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[放棄 Google App Engine 轉投 Amazon Web Service]]></title>
    <link href="http://pro.ctlok.com/2011/10/gae-aws.html"/>
    <updated>2011-10-25T18:06:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/10/gae-aws</id>
    <content type="html"><![CDATA[<p>自從 <b>Google App Engine</b> 轉換收費模式後，已經計劃將現有的 <b>Project</b> 放到 <b>Amazon Web Service</b> 上，以前選用 <b>GAE</b> 的原因是因為便宜，而且有免費使用量。雖然限制很多，但我並不介意這些限制。例如將現有的 <b>Application</b> 移植到上 <b>GAE</b> 上是一件非常痛苦的事，<b>JPA</b> 有一大堆東西不能用，大部份 <b>Entity</b> 要重新規劃，資料移植又是另一件痛苦的事。因為每一個 <b>HTTP Request</b> 也有 30 秒限制，上傳檔案又要另外寫一次。因為價錢便宜，我不介意改。<br /><br />現在 <b>GAE</b> 有新的收費模式，不是以前只計 <b>CPU Hour</b> 的方式，是一個小時一個小時地計算。向 <b>Datasource</b> 存取資料又另外收費，新的收費模式:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-EJYNRtkgUws/TqaCTBMCXnI/AAAAAAAAA5M/68-DSN20SMk/s1600/Google%2Bcloud%2Bservices%2B%25E2%2580%2593%2BApp%2BEngine.png" imageanchor="1" style=""><img border="0" height="357" width="400" src="http://3.bp.blogspot.com/-EJYNRtkgUws/TqaCTBMCXnI/AAAAAAAAA5M/68-DSN20SMk/s400/Google%2Bcloud%2Bservices%2B%25E2%2580%2593%2BApp%2BEngine.png" /></a></div><br />新的收費模式很像 <b>Amazon Web Service</b>，我最不能接受的是 <b>GAE</b> 也跟 <b>AWS EC2</b> 以小時計算費用，<b>EC2</b> 收費如下:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-xGJOT4CKWDI/TqaEhWPZ77I/AAAAAAAAA5Y/XAQWvmUiCYM/s1600/Amazon%2BElastic%2BCompute%2BCloud%2B%2528Amazon%2BEC2%2529.png" imageanchor="1" style=""><img border="0" height="291" width="400" src="http://3.bp.blogspot.com/-xGJOT4CKWDI/TqaEhWPZ77I/AAAAAAAAA5Y/XAQWvmUiCYM/s400/Amazon%2BElastic%2BCompute%2BCloud%2B%2528Amazon%2BEC2%2529.png" /></a></div><br /><b>EC2</b> 一個小型 <b>(Small) Virtual Machine</b> 一小時才 <b>$0.085 USD</b>，<b>GAE</b> 一小時也要 <b>$0.080 USD</b>，但 <b>GAE</b> 的 <b>Virtual Machine</b> 全自動起動的，即是說你不能控制機器數目，雖然你可以設定 <b>Max Idle Instances</b> 數目，但系統在需要時也一樣會新增比你設定的最大數目還多的機器 (我試過好幾次)。如果你起動了 2 台機器，就是 <b>$0.080 USD * 2</b>，一小時收費 <b>$ 0.16 USD</b>。<b>EC2</b> 是可以一台機器放置多個 應用程式，而 <b>GAE</b> 只可以一台機器放置一個應用程式，還是 <b>EC2</b> 比較化算。<br /><br />最後如果你仍然選擇留守 <b>GAE</b>，這裡有幾個方法可幫助你省錢:<br /><br />1. 在 <b>appengine-web.xml</b> 加上:<br /><pre class="brush: xml">&lt;threadsafe&gt;true&lt;/threadsafe&gt;<br /></pre><br />可以令你的機器同時處理多個請求 <b>(Request)</b><br /><br />2. 設定 <b>Max Idle Instances</b> 令 <b>GAE</b> 盡量不起動超過這個數量的機器<br />3. 設定 <b>Min Pending Latency</b> 在機器處理一個請求超過這一個時間才新增機器 (其實我覺得這個設定很雞肋，每一個請求時間也不一樣，又不可以設定太高，亦不能設定太低)<br />4. 盡量用多一點 <b>Cache</b> ，減少存取 <b>Datasource</b><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5183712475670212955?l=pro.ctlok.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Google Closure Compiler 在執行期間壓縮 Javascript]]></title>
    <link href="http://pro.ctlok.com/2011/10/closure-compiler-run-time-compress.html"/>
    <updated>2011-10-21T14:16:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/10/closure-compiler-run-time-compress</id>
    <content type="html"><![CDATA[<p>趁有空又寫寫文章，今次介紹的是 <b>Google Closure Compiler</b>，其實之前已經介紹過一次: <a href="http://pro.ctlok.com/2010/01/javascript_22.html">線上 <b>Javascript</b> 工具</a>，這個工具可以將 <b>Javascript</b> 的大小大幅降低。<br /><br />使用線上工具去壓縮有一個缺點就是要將 <b>Javascript</b> 檔案儲存成 <b>2</b> 份，1 份是原始檔案，另 1 份是經壓縮內容的 <b>Javascript</b>，因為不可能更改經壓縮過的內容，每一次更改檔案就需要更改原始檔案，然後利用 <b>Google Closure Compiler</b> 線上工具再壓縮一次，再更新壓縮內容，而且經壓縮的 <b>Javascript</b> 在瀏覽器 <b>debug</b> 亦比較困難。雖然你可以在 <b>HTML</b> 將引入的 <b>Javascript</b> 檔案改為未經壓縮然後 <b>debug</b>，但萬一忘記改回就麻煩了。<br /><br />幸好 <b>Google Closure Compiler</b> 有提供到 <b>Java</b> 使用的 <b>API</b> 來達到執行期間 <b>(Run Time)</b> 將 <b>Javascript</b> 壓縮。<br /><br />首先到 <b>Google Code</b> 下載: <a href="http://code.google.com/p/closure-compiler/downloads/list">Google Closure Compiler</a><br /><br />可用以下其中一個方法去壓縮:<br /><pre class="brush: java">protected String compress(InputStream inputStream) throws IOException{<br />    Compiler compiler = new Compiler();<br />    <br />    CompilerOptions options = new CompilerOptions();<br />    CompilationLevel.SIMPLE_OPTIMIZATIONS<br />            .setOptionsForCompilationLevel(options);<br />    <br />    JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot; &quot;);<br />    JSSourceFile input = JSSourceFile.fromInputStream(&quot;origin.js&quot;, inputStream);<br />    compiler.compile(extern, input, options);<br />    <br />    return compiler.toSource();<br />}<br /><br />protected String compress(String str) throws IOException{<br />    Compiler compiler = new Compiler();<br />    <br />    CompilerOptions options = new CompilerOptions();<br />    CompilationLevel.SIMPLE_OPTIMIZATIONS<br />            .setOptionsForCompilationLevel(options);<br />    <br />    JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot; &quot;);<br />    JSSourceFile input = JSSourceFile.fromCode(&quot;origin.js&quot;, str);<br />    compiler.compile(extern, input, options);<br />    <br />    return compiler.toSource();<br />}<br /></pre><br />其中 CompilationLevel 分別有 3 個選項:<br /><ul><li>CompilationLevel.WHITESPACE_ONLY</li><li>CompilationLevel.SIMPLE_OPTIMIZATIONS</li><li>CompilationLevel.ADVANCED_OPTIMIZATIONS</li></ul><br /><b>WHITESPACE_ONLY</b> 只會移除 <b>Javascript</b> 的空白。<br /><br /><b>SIMPLE_OPTIMIZATIONS</b> 是最常用的一種，移除 <b>Javascript</b> 的空白，而且將一些 <b>Local Variable</b> 或 <b>Local Function</b> 名稱改變，並將一些沒有用到的 <b>Variable</b> 移除，大幅提高 <b>Javascript</b> 的壓縮率。<br /><br /><b>ADVANCED_OPTIMIZATIONS</b> 是最高壓縮率的模式，將所有 <b>Variable</b> 或 <b>Function</b> 的名稱改變，有使用 <b>Javascript Framework</b> 不建議使用這個選項。<br /><br />在真實環境中我們可以加入一個 <b>Filter</b> 去將 <b>Javascript</b> 壓縮:<br /><pre class="brush: js">package com.ctlok.pro.filter;<br /><br />import java.io.IOException;<br />import java.io.InputStream;<br />import java.util.HashMap;<br />import java.util.Map;<br />import java.util.logging.Level;<br /><br />import javax.servlet.Filter;<br />import javax.servlet.FilterChain;<br />import javax.servlet.FilterConfig;<br />import javax.servlet.ServletException;<br />import javax.servlet.ServletRequest;<br />import javax.servlet.ServletResponse;<br />import javax.servlet.http.HttpServletRequest;<br />import javax.servlet.http.HttpServletResponse;<br /><br />import com.google.javascript.jscomp.CompilationLevel;<br />import com.google.javascript.jscomp.Compiler;<br />import com.google.javascript.jscomp.CompilerOptions;<br />import com.google.javascript.jscomp.JSSourceFile;<br />import com.google.javascript.jscomp.WarningLevel;<br /><br />public class ClosureCompilerFilter implements Filter {<br /><br />    //for cache<br />    private final Map&lt;String, String&gt; compressedJs = new HashMap&lt;String, String&gt;();<br />    private FilterConfig filterConfig;<br />    <br />    public void init(FilterConfig filterConfig) throws ServletException {<br />        this.filterConfig = filterConfig;<br />        <br />        //Turn off the compiler log<br />        Compiler.setLoggingLevel(Level.OFF);<br />    }<br /><br />    public void destroy() {<br /><br />    }<br /><br />    public void doFilter(ServletRequest request, ServletResponse response,<br />            FilterChain chain) throws IOException, ServletException {<br />        <br />        HttpServletRequest req = (HttpServletRequest) request;<br />        HttpServletResponse resp = (HttpServletResponse) response;<br />        <br />        String uri = req.getRequestURI();<br />        <br />        //Prevent compress the compressed Javascript, such as jquery.min.js, mootools.min.js, etc.<br />        if (!uri.matches(&quot;.<em>\.min\.js$&quot;)){<br />            String js = null;<br />            <br />            if (compressedJs.containsKey(uri)){<br />                //get from cache<br />                js = compressedJs.get(uri);<br />            }else{<br />                String contextPath = req.getContextPath();<br />                String jsPath = uri.substring(contextPath.length());<br />                <br />                //get javascript file as stream<br />                //getResourceAsStream cannot include context path<br />                InputStream inputStream = filterConfig.getServletContext().getResourceAsStream(jsPath);<br />                js = compress(inputStream);<br />                <br />                //put to cache<br />                compressedJs.put(uri, js);<br />            }<br />            <br />            resp.getWriter().write(js);<br />            return;<br />        }<br />        <br />        chain.doFilter(request, response);<br />    }<br />    <br />    protected String compress(InputStream inputStream) throws IOException{<br />        Compiler compiler = new Compiler();<br />        <br />        CompilerOptions options = new CompilerOptions();<br />        CompilationLevel.SIMPLE_OPTIMIZATIONS<br />                .setOptionsForCompilationLevel(options);<br />        WarningLevel.QUIET.setOptionsForWarningLevel(options);<br />        <br />        JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot;&quot;);<br />        JSSourceFile input = JSSourceFile.fromInputStream(&quot;origin.js&quot;, inputStream);<br />        compiler.compile(extern, input, options);<br /><br />        return compiler.toSource();<br />    }<br /><br />}<br /></pre><br />在 web.xml 加上:<br /><pre class="brush: xml">&lt;filter&gt;<br />    &lt;display-name&gt;ClosureCompilerFilter&lt;/display-name&gt;<br />    &lt;filter-name&gt;ClosureCompilerFilter&lt;/filter-name&gt;<br />    &lt;filter-class&gt;com.ctlok.pro.filter.ClosureCompilerFilter&lt;/filter-class&gt;<br />&lt;/filter&gt;<br />&lt;filter-mapping&gt;<br />    &lt;filter-name&gt;ClosureCompilerFilter&lt;/filter-name&gt;<br />    &lt;url-pattern&gt;</em>.js&lt;/url-pattern&gt;<br />&lt;/filter-mapping&gt;<br /></pre><br />這樣就可以令到 <b>.js</b> 結尾的 <b>Javascript</b> 檔案經壓縮再傳出去，又不會將 <b>.min.js</b> 已經壓縮過的 <b>Javascript</b> 又再壓縮一次。<br />經過壓縮後會儲存在 <b>Map</b> 內，畢竟壓縮的時間也不短。<br /><br />例如我有一個 /js/myjs.js 的檔案:<br /><pre class="brush: js">function ctlok() {<br />    var self = this;<br />    var $ = jQuery;<br /><br />     this.publicFunction = function() {<br />           localFunction();<br />      };<br /><br />     var localFunction = function() {<br />          var aaaaa = &#39;aaaaa&#39;;<br />          $(&#39;:input&#39;).val(aaaaa);<br />     };<br />}<br /></pre><br />經壓縮後變成:<br /><pre class="brush: js">function ctlok(){var a=jQuery;this.publicFunction=function(){a(&quot;:input&quot;).val(&quot;aaaaa&quot;)}};<br /></pre><br />範例下載:: <a href="https://sites.google.com/site/lawrencespace/lawpronotes/download/Google-Closure-Compiler.zip">Google-Closure-Compiler.zip</a><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-3261921414800777822?l=pro.ctlok.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[試用 Google Cloud SQL]]></title>
    <link href="http://pro.ctlok.com/2011/10/google-cloud-sql.html"/>
    <updated>2011-10-12T15:25:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/10/google-cloud-sql</id>
    <content type="html"><![CDATA[<br /><b>Google</b> 剛剛出的新服務 - <b>Google Cloud SQL</b>，可能有太多人抱怨認為 <b>Google App Engine</b> 的 <b>Datastore</b> 太難用，而且現有的 <b>App</b> 移植到 <b>Google App Engine</b> 最大問題也是 <b>Datastore</b>。傳統的應用程式大多數使用 <b>Relational Database Management System (RDBMS)</b> 關聯式資料庫管理系統作為儲存資料的系統，但 RDBMS 是比較難去擴展整個系統，起初可以靠升級系統硬件去加強效能，但硬件升級愈高，性價比愈低。而 <b>Google App Engine</b> 的 <b>Datastore</b> 是 <b>NoSQL Database</b>，擴展系統是一件很容易的事，可以買 5 台中級機器去組成整個系統，不夠可以再加上去，可以無限地伸延 (理論上)。<b>NoSQL Database</b> 是沒有 <b>Join Table</b> 之類的語法，你只能靠應用程式層面實現 <b>Join Table</b>，這會提高應用程式開發難度。<br /><br /><b>Google Cloud SQL</b> 是用來解決傳統的應用程式移植或對使用 <b>RDBMS</b> 有開發經驗的程式員有多一個選擇。而 <b>Google Cloud SQL</b> 底層是使用 <b>MySQL</b> 實作的。<br /><br />打開 <b>Google Cloud SQL</b> 的 <b>Console</b> 是這個樣子:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-AFL_B5qOkts/TpU1gdRFDbI/AAAAAAAAA2w/w9ChEdPHgbA/s1600/Google%2BAPIs%2BConsole.png" imageanchor="1"><img border="0" height="271" src="http://2.bp.blogspot.com/-AFL_B5qOkts/TpU1gdRFDbI/AAAAAAAAA2w/w9ChEdPHgbA/s400/Google%2BAPIs%2BConsole.png" width="400" /></a></div>而容量方面有三個選擇，分別是 <b>1GB, 5GB</b> 和 <b>10GB</b><br /><div class="separator" style="clear: both; text-align: center;"><br /><a href="http://2.bp.blogspot.com/-GwMRdzzAYHc/TpU13HyeQsI/AAAAAAAAA28/JmzTqt_Vp-8/s1600/create.png" imageanchor="1"><img border="0" height="259" src="http://2.bp.blogspot.com/-GwMRdzzAYHc/TpU13HyeQsI/AAAAAAAAA28/JmzTqt_Vp-8/s400/create.png" width="400" /></a></div>試試新增一個 <b>MySQL Instance</b> (暫時只有 <b>Google App Engine</b> 可以存取到，只需加入 <b>GAE</b> 的 <b>ID</b> 就可以了):<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-Iv86h1Z3L2U/TpU2Jl8OyMI/AAAAAAAAA3I/orPzKAOFaCg/s1600/create2png.png" imageanchor="1"><img border="0" height="259" src="http://4.bp.blogspot.com/-Iv86h1Z3L2U/TpU2Jl8OyMI/AAAAAAAAA3I/orPzKAOFaCg/s400/create2png.png" width="400" /></a></div><br />處理中:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-IxvqvjC8jpY/TpU2m2NxVFI/AAAAAAAAA3U/FJl6SQ7Y9sU/s1600/proccess.png" imageanchor="1"><img border="0" height="259" src="http://4.bp.blogspot.com/-IxvqvjC8jpY/TpU2m2NxVFI/AAAAAAAAA3U/FJl6SQ7Y9sU/s400/proccess.png" width="400" /></a></div><br />完成後看一看 <b>Log</b>:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-LjLRu5ATrJA/TpU255TptoI/AAAAAAAAA3g/bNREUDBB72Y/s1600/log.png" imageanchor="1"><img border="0" height="243" src="http://4.bp.blogspot.com/-LjLRu5ATrJA/TpU255TptoI/AAAAAAAAA3g/bNREUDBB72Y/s400/log.png" width="400" /></a></div><br />再到 <b>Prompt</b> 看看:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-49KpC4a39f0/TpU3Fnw6LqI/AAAAAAAAA3s/qnBGRoU4PGI/s1600/prompt.png" imageanchor="1"><img border="0" height="259" src="http://4.bp.blogspot.com/-49KpC4a39f0/TpU3Fnw6LqI/AAAAAAAAA3s/qnBGRoU4PGI/s400/prompt.png" width="400" /></a></div><br />新增一個 <b>Database</b>，命名為 <b>mydb</b>:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-I9VIUW3JCT4/TpU3hqVeZ2I/AAAAAAAAA34/10YramRrLy0/s1600/create%2Bdb.png" imageanchor="1"><img border="0" height="259" src="http://4.bp.blogspot.com/-I9VIUW3JCT4/TpU3hqVeZ2I/AAAAAAAAA34/10YramRrLy0/s400/create%2Bdb.png" width="400" /></a></div><br />再新增一個 <b>Table</b> 命名為 <b>User:</b><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-r-8wljKeA54/TpU4nTtEIlI/AAAAAAAAA4E/JzBBbwSHiFg/s1600/create%2Buser.png" imageanchor="1"><img border="0" height="243" src="http://1.bp.blogspot.com/-r-8wljKeA54/TpU4nTtEIlI/AAAAAAAAA4E/JzBBbwSHiFg/s400/create%2Buser.png" width="400" /></a></div><br />我發現每一次只可以輸入一行指令，有分號隔著也不行，希望遲點會改善。<br />當然 <b>Google Cloud SQL</b> 有提供 <b>Import</b> 的功能，但檔案一定要存放在 <b>Google Cloud Storage</b> 上。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-i504Lpps5q4/TpU7RL21tbI/AAAAAAAAA4c/NBmd8t3NNmg/s1600/import.png" imageanchor="1"><img border="0" height="243" src="http://1.bp.blogspot.com/-i504Lpps5q4/TpU7RL21tbI/AAAAAAAAA4c/NBmd8t3NNmg/s400/import.png" width="400" /></a></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-kDvbhJ22Js0/TpU7fXmKaeI/AAAAAAAAA4o/uAjXgZ-Be78/s1600/import-sql.png" imageanchor="1"><img border="0" height="243" src="http://3.bp.blogspot.com/-kDvbhJ22Js0/TpU7fXmKaeI/AAAAAAAAA4o/uAjXgZ-Be78/s400/import-sql.png" width="400" /></a></div><br /><br /><b>Import</b> 成功後就試試旗選取一埋資料:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-hVGDFOcJiSg/TpU82Jy9o4I/AAAAAAAAA40/quEBAuWWfiM/s1600/select%2Bcustomers.png" imageanchor="1" style=""><img border="0" height="400" width="116" src="http://1.bp.blogspot.com/-hVGDFOcJiSg/TpU82Jy9o4I/AAAAAAAAA40/quEBAuWWfiM/s400/select%2Bcustomers.png" /></a></div><br />再試試 <b>Join Table</b>:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-6nsvacH9BV0/TpU93-bZ4wI/AAAAAAAAA5A/SDrou4QGvHU/s1600/join%2Btable%2Border%2Border%2Bdetail.png" imageanchor="1" style=""><img border="0" height="400" width="74" src="http://4.bp.blogspot.com/-6nsvacH9BV0/TpU93-bZ4wI/AAAAAAAAA5A/SDrou4QGvHU/s400/join%2Btable%2Border%2Border%2Bdetail.png" /></a></div><br />一樣沒有問題。<br /><br /><b>SQL</b> 檔案: <a href="https://sites.google.com/site/lawrencespace/lawpronotes/download/sampledatabase.sql">sampledatabase.sql</a><br /><br />要申請 <b>Google Cloud SQL</b> 可到 <a href="https://code.google.com/apis/console/">https://code.google.com/apis/console/</a>，然後選取 <b>Service</b> 再在 <b>Google Cloud SQL</b> 按一下 <b>Request access</b>，填好表格後就等 <b>Google</b> 回覆就可以用了 (我是等了兩天才有回覆)。<br />遲一點再在 <b>GAE</b> 上試用。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-8575963009302117038?l=pro.ctlok.com' alt='' /></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Font Directory 新功能 - Google Font Previewer]]></title>
    <link href="http://pro.ctlok.com/2010/07/google-font-directory-google-font.html"/>
    <updated>2010-07-29T10:25:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/07/google-font-directory-google-font</id>
    <content type="html"><![CDATA[<p><b>Google Font Directory</b> 增了一項新的服務，可以給用戶預覽他的字體，在預覽同時更可以即時去調整字體，系統亦會即時將你的設定轉為 <b>CSS</b>，實在太方便了。這個服務的名稱就是 <b>Google Font Previewer</b>。<br /><br />而可供調整的功能有以下這些:<br /><ul><li>轉換字體</li><li>字體大小</li><li>正常，粗體，斜體，粗斜體</li><li>陰影</li><li>轉為英文大寫，小寫或頭一個字母大寫</li><li>加上底線，中線或字的上下都有線</li><li>字母間距</li><li>每一個英文字的間距</li><li>行距</li></ul><br />以下是 <b>Google Font Previewer</b> 的樣子:<br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/TFDkInRkybI/AAAAAAAAAmc/KN1GYNJC2rA/s1600/google-font-preview-1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="194" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/TFDkInRkybI/AAAAAAAAAmc/KN1GYNJC2rA/s320/google-font-preview-1.png" width="320" /></a></div><br />以下則是我調整後的 <b>CSS</b>:<br /><pre class="brush: html">&lt;link  href=&quot;//fonts.googleapis.com/css?family=Lobster:regular&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; &gt;<br />&lt;style&gt;<br />body {<br />  font-family: &#39;Lobster&#39;, serif;<br />  font-size: 40px;<br />  font-style: normal;<br />  font-weight: 700;<br />  text-shadow: 4px 4px 4px #bbb;<br />  text-decoration: none;<br />  text-transform: none;<br />  letter-spacing: 0.012em;<br />  word-spacing: 0.169em;<br />  line-height: 1.54em;<br />}<br />&lt;/style&gt;<br /></pre><br /><style>div#gfpreviewer{  @import url(http://fonts.googleapis.com/css?family=Lobster:regular);  font-family: 'Lobster', serif;  font-size: 40px;  font-style: normal;  font-weight: 700;  text-shadow: 4px 4px 4px #bbb;  text-decoration: none;  text-transform: none;  letter-spacing: 0.012em;  word-spacing: 0.169em;  line-height: 1.54em;  color: #333333;}</style><br /><br />以下是效果:<br /><div id="gfpreviewer">This is some example text. You can edit it. You can also modify it with the controls on the left. When you're done simply copy the code for your own site.</div><br /><b>Google Font Previewer</b> 網址: <a href="http://code.google.com/webfonts/preview">http://code.google.com/webfonts/preview</a><br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Mining-Google-Web-Services-Applications/dp/0782143334?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Mining Google Web Services: Building Applications with the Google API" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0782143334&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0782143334" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Professional-Web-APIs-PHP-Google/dp/0764589547?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Professional Web APIs with PHP: eBay, Google, Paypal, Amazon, FedEx plus Web Feeds" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0764589547&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0764589547" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Google-Hacks-Finding-Worlds-Information/dp/0596527063?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Google Hacks: Tips &amp; Tools for Finding and Using the World&#39;s Information" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596527063&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596527063" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-1485942949301525321?l=pro.ctlok.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Font API 和 Google Font Directory 初體驗]]></title>
    <link href="http://pro.ctlok.com/2010/07/google-font-api-google-font-directory.html"/>
    <updated>2010-07-11T13:27:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/07/google-font-api-google-font-directory</id>
    <content type="html"><![CDATA[<p>在制作網頁時，我們大多數都會選擇一些標準字體，例如: <b>Arial</b>, <b>Times New Roman</b> 和 <b>Verdana</b> 等等，如果想用某些不常見的字體時，會很麻煩。雖然 <b>CSS</b> 提供了 <b>font-face</b> 這一個選項去載入字體，但每一個瀏覽器所支援的字體格式又不一樣，而且 <b>CSS</b> 的寫法也有分別，可能在同一個字體需要幾種不同格式和幾個 <b>CSS file</b>，因為不能確保對方的瀏覽器一定看到自己定義的字體，萬一連字也顯示不到就麻煩了，所以盡可能都不去改成非標準的字體款式。<br /><br /><a href="http://code.google.com/">Google Code</a> 提供了一個新的服務，就是 <a href="http://code.google.com/apis/webfonts/docs/getting_started.html">Google Font API</a>。雖然現在還是測試階段，但照我所見在幾款不同的瀏覽器上也沒有出現問題，<a href="http://www.google.com/">Google</a> 替我們做好了最麻煩的瀏覽器設定，令我們可以安心去選擇漂亮的字體去美化頁面( 我的部落格標題也是使用 <a href="http://code.google.com/apis/webfonts/docs/getting_started.html">Google Font API</a> 去改變字體的 )。<a href="http://www.google.com/">Google</a> 一共提供了 <b>18</b> 款不同字體，見下圖:<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/TDlV1czEsoI/AAAAAAAAAjk/inBDa68LWcg/s1600/Google+Font+Directory_1278825879146.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/TDlV1czEsoI/AAAAAAAAAjk/inBDa68LWcg/s320/Google+Font+Directory_1278825879146.png" width="191" /></a></div><br /><a href="http://code.google.com/apis/webfonts/docs/getting_started.html">Google Font API</a> 這個服務是和 <a href="http://typekit.com/">Typekit</a> 合作的，<a href="http://typekit.com/">Typekit</a> 提供了比 <a href="http://www.google.com/">Google</a> 更多的字體選擇，可以免費試用，但有很多限制，而 <a href="http://www.google.com/">Google</a> 的是免費又可以自由使用。如果覺得 <a href="http://www.google.com/">Google</a> 的字體不能滿足你，你便選擇用 <a href="http://typekit.com/">Typekit</a> 或 <a href="http://webfonts.fonts.com/">Fonts.com</a>吧。<br /><br /><a href="http://www.google.com/">Google</a> 提供了 2 種方式去載入字體，一種是使用載入外部 <b>CSS</b> 的方式去載入字體，另一種則是使用 <b>Javascript</b> 去載入字體。<br /><br />我先講解使用載入外部 <b>CSS</b> 的方式，這比較簡單。<br />假設我要載入一款 <b>Cantarell</b> 字體，你要加入以下的 <b>HTML</b> 在 <b>head</b> 內:<br /><pre class="brush: html">&lt;link href='http://fonts.googleapis.com/css?family=Cantarell' rel='stylesheet' type='text/css' /&gt;<br /></pre><br />或用以下方式去式去載入字體:<br /><pre class="brush:css html-script: true;">&lt;style type="text/css"&gt;<br />    @import url(http://fonts.googleapis.com/css?family=Cantarell);<br />&lt;/style&gt;<br /></pre><br />可以將以下的 <b>CSS</b> 放到你的 <b>CSS</b> 檔案內也可以:<br /><pre class="brush: css">@import url(http://fonts.googleapis.com/css?family=Cantarell);/<em> Load Cantarell font </em>/<br /></pre><br /><b>http://fonts.googleapis.com/css</b> 這個地址是不會變的，而在後面 <b>family</b> 的參數輸入字體名稱就可以了。<br />如果要使用 <b>Cantarell</b> 這個字體:<br /><pre class="brush:css">p { font-family: 'Cantarell', arial, serif; }<br /></pre><br />最好在後面加入一些標準字體，就算萬一這個字體載入失敗，也有一些字體怍後補，不至於由瀏覽器去決定字體。<br />以下是這個字體的樣子:<br /><style>@import url(http://fonts.googleapis.com/css?family=Cantarell:regular,italic,bold,bolditalic);</style><br /><div style="font-family: 'Cantarell'; font-size: 48px;">Cantarell</div><br />如果需要用到<b>普通字款</b>、<b>斜體字</b>、<b>粗體字</b>和<b>粗斜體字</b>，可以用以下方式一次載入這幾款字款:<br /><pre class="brush: html">&lt;link href=' http://fonts.googleapis.com/css?family=Cantarell:regular,italic,bold,bolditalic' rel='stylesheet' type='text/css'&gt;<br /></pre><br />只需在字型名稱後面加上 <b>:</b> ，然後再輸入字款並以 <b>,</b> 去分隔開不同字款就可以了，如果沒有加入任何字款，預設是會載入 <b>regular</b> 字款的。<br /><br /><ul><li><b>regular</b> - 是最普通最常用的字款 (簡寫是 <b>r</b>)</li><li><b>italic</b> - 是斜體字款 (簡寫是 <b>i</b>)</li><li><b>bold</b> - 是粗體字款 (簡寫是 <b>b</b>)</li><li><b>bolditalic</b> - 是粗斜體字款 (簡寫是 <b>bi</b>)</li></ul><br />使用簡寫載入字體:<br /><pre class="brush: html">&lt;link href=' http://fonts.googleapis.com/css?family=Cantarell:r,i,b,bi' rel='stylesheet' type='text/css'&gt;<br /></pre><br /><b>Cantarell</b> 普通字款:<br /><pre class="brush:css">p { font-family: 'Cantarell', arial, serif; }<br /></pre><div style="font-family: 'Cantarell'; font-size: 48px;">Cantarell</div><br /><b>Cantarell</b> 斜體字款:<br /><pre class="brush:css">p { <br />    font-family: 'Cantarell', arial, serif; <br />    font-style:italic; <br />}<br /></pre><div style="font-family: 'Cantarell'; font-size: 48px; font-style: italic;">Cantarell</div><br /><b>Cantarell</b> 粗體字款:<br /><pre class="brush:css">p { <br />    font-family: 'Cantarell', arial, serif; <br />    font-weight:bold; <br />}<br /></pre><div style="font-family: 'Cantarell'; font-size: 48px; font-weight: bold;">Cantarell</div><br /><b>Cantarell</b> 粗斜體字款:<br /><pre class="brush:css">p { <br />    font-family: 'Cantarell', arial, serif; <br />    font-weight:bold; <br />    font-style:italic;<br />}<br /></pre><div style="font-family: 'Cantarell'; font-size: 48px; font-style: italic; font-weight: bold;">Cantarell</div><br />替 <b>Cantarell</b> 加入一些效果:<br /><pre class="brush:css">p { <br />    font-family: 'Cantarell', arial, serif;<br />    text-shadow: 4px 4px 4px #aaa; <br />}<br /></pre><div style="font-family: 'Cantarell'; font-size: 48px; text-shadow: 4px 4px 4px #aaa;">Cantarell</div><br />如果字體名稱是由 2 個字以上組成，中間用空格分隔開了，那可以將空格變成 <b>+</b> 去載入字體:<br /><pre class="brush: html">&lt;link href='http://fonts.googleapis.com/css?family=Reenie+Beanie' rel='stylesheet' type='text/css' /&gt;<br /></pre><br /><pre class="brush: css">@import url(http://fonts.googleapis.com/css?family=Reenie+Beanie);<br /></pre><br />你亦可以一次載入多款字體:<br /><pre class="brush: html">&lt;link href='http://fonts.googleapis.com/css?family=Tangerine|Inconsolata|Droid+Sans' rel='stylesheet' type='text/css' /&gt;<br /></pre><br /><pre class="brush: css">@import url(http://fonts.googleapis.com/css?family=Tangerine|Inconsolata|Droid+Sans);<br /></pre><br />字體和字體之間使用 <b>|</b> 去分隔開，如果要載入多款字體共要每款字體有不同字款也可以:<br /><br /><pre class="brush: html">&lt;link href='http://fonts.googleapis.com/css?family=Tangerine:r,i|Inconsolata:b,bi|Droid+Sans:i,bi' rel='stylesheet' type='text/css' /&gt;<br /></pre><br /><pre class="brush: css">@import url(http://fonts.googleapis.com/css?family=Tangerine:r,i|Inconsolata:b,bi|Droid+Sans:i,bi);<br /></pre><br />使用 <b>Javascript</b> 的方式去載入字體:<br /><pre class="brush: js; html-script: true;">&lt;script type="text/javascript"&gt;<br />    WebFontConfig = {<br />        google: {<br />            families: ['Tangerine', 'Cantarell']<br />        }<br />    };<br />&lt;/script&gt;<br />&lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js"&gt;&lt;/script&gt;<br /></pre><br />使用非同步的方式去載入 <b>Javascript</b> 後再載入字體:<br /><pre class="brush: js; html-script: true;">&lt;script type="text/javascript"&gt;<br />    WebFontConfig = {<br />        google: {<br />            families: ['Tangerine', 'Cantarell']<br />        }<br />    };<br />    (function(){<br />        var wf = document.createElement('script');<br />        wf.src = ('https:' == document.location.protocol ? 'https' : 'http') +<br />        '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';<br />        wf.type = 'text/javascript';<br />        wf.async = 'true';<br />        var s = document.getElementsByTagName('script')[0];<br />        s.parentNode.insertBefore(wf, s);<br />    })();<br />&lt;/script&gt;<br /></pre><br />使用非同步的方式去載入會先看見預設字體，等待 <b>Javascript</b> 載入完畢後才會看見你想要的字體，而第一種方式沒有這個問題。<br /><br />亦可以選擇用 <b>Google AJAX APIs</b> 去載入字體:<br /><pre class="brush: js; html-script: true;">&lt;script type="text/javascript"&gt;<br />    google.load("webfont", "1");<br />    <br />    google.setOnLoadCallback(function(){<br />        WebFont.load({<br />            google: {<br />                families: ['Tangerine', 'Cantarell']<br />            }<br />        });<br />    });<br />&lt;/script&gt;<br /></pre><br />使用 <a href="http://code.google.com/apis/ajax/">Google AJAX APIs</a> 去載入字體一樣會有非同步的問題。<br /><br />使用 <b>Javascript</b> 去載入 2 個字名稱以上的字體:<br /><pre class="brush: js">WebFontConfig = {<br />    google: {<br />        families: ['Tangerine', 'Cantarell', 'Droid Serif']<br />    }<br />};<br /></pre><br />使用 <b>Javascript</b> 去載入不同字款:<br /><pre class="brush: js">WebFontConfig = {<br />    google: {<br />        families: ['Tangerine', 'Cantarell:r,i,b,bi', 'Droid Serif:italic']<br />    }<br />};<br /></pre><br />所有 <a href="http://www.google.com/">Google</a> 提供的字體: <a href="http://code.google.com/webfonts">Google Font Directory</a><br />Google API Reference: <a href="http://code.google.com/apis/webfonts/docs/getting_started.html">Google Font API</a><br /><br />相關書籍: <a href="http://www.amazon.com/Mining-Google-Web-Services-Applications/dp/0782143334?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Mining Google Web Services: Building Applications with the Google API" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0782143334&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0782143334" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Professional-Web-APIs-PHP-Google/dp/0764589547?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Professional Web APIs with PHP: eBay, Google, Paypal, Amazon, FedEx plus Web Feeds" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0764589547&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0764589547" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Google-Hacks-Finding-Worlds-Information/dp/0596527063?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Google Hacks: Tips &amp; Tools for Finding and Using the World's Information" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0596527063&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596527063" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-3474126459738783957?l=pro.ctlok.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
