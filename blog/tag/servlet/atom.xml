<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Servlet | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/servlet/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-03-25T14:31:50+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GlassFish v3 Remote EJB]]></title>
    <link href="http://pro.ctlok.com/2010/04/glassfish-v3-remote-ejb.html"/>
    <updated>2010-04-08T11:13:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/04/glassfish-v3-remote-ejb</id>
    <content type="html"><![CDATA[<p>首先制作 EJB 部份。制作一個 MessageRemote 的介面，然後再實作這個介面。<br /><strong> EJB 3.1 不再需要 Local 的介面 </strong><br /><br />MessageRemote:<br /><pre class="brush: java">package com.blogspot.lawpronotes.ejb;<br />import javax.ejb.Remote;<br /><br />@Remote<br />public interface MessageRemote {<br />    public String sayHello();<br />}<br /></pre><br />Message:<br /><pre class="brush: java">package com.blogspot.lawpronotes.ejb;<br /><br />import javax.ejb.EJB;<br />import javax.ejb.LocalBean;<br />import javax.ejb.Stateless;<br /><br />/<strong><br /> * Session Bean implementation class Message<br /> */<br />@LocalBean<br />@Stateless<br />@EJB(name="java:global/HelloWorldEJB/Message", beanInterface=MessageRemote.class)<br />public class Message implements MessageRemote {<br /><br />    /</strong><br />     * Default constructor. <br />     <em>/<br />    public Message() {<br />        // TODO Auto-generated constructor stub<br />    }<br /><br />    @Override<br />    public String sayHello() {<br />        // TODO Auto-generated method stub<br />        return "Hello World";<br />    }<br />    <br />}<br /></pre><br />現在可以將 EJB Project 放到 GlassFish 上，然後制作一個 JAR 並將 EJB 的 Remote 介面放到 JAR 內，緊記不要連同實作的 Class 放到 JAR 內，不然會發生錯誤。<br /><br />現在制作 Servlet 部份。將剛才制作好的 JAR 放到 WEB-INF/lib 內。<br />新增一個 IndexServlet ，複製以下程式碼並貼上。<br /><pre class="brush: java">package com.blogspot.lawpronotes.servlet;<br /><br />import java.io.IOException;<br />import java.io.PrintWriter;<br />import java.util.Properties;<br /><br />import javax.naming.InitialContext;<br />import javax.naming.NamingException;<br />import javax.rmi.PortableRemoteObject;<br />import javax.servlet.ServletException;<br />import javax.servlet.annotation.WebServlet;<br />import javax.servlet.http.HttpServlet;<br />import javax.servlet.http.HttpServletRequest;<br />import javax.servlet.http.HttpServletResponse;<br /><br />import com.blogspot.lawpronotes.ejb.MessageRemote;<br /><br />/**<br /> * Servlet implementation class IndexServlet<br /> </em>/<br />@WebServlet(name = &quot;Index&quot;, urlPatterns = { &quot;/index&quot; })<br />public class IndexServlet extends HttpServlet {<br />    private static final long serialVersionUID = 1L;<br />    private Properties properties;<br /><br />    /<strong><br />     * @see HttpServlet#HttpServlet()<br />     */<br />    public IndexServlet() {<br />        super();<br />        // TODO Auto-generated constructor stub<br />        properties = new Properties();<br />        properties.put(&quot;java.naming.factory.initial&quot;,<br />                &quot;com.sun.enterprise.naming.impl.SerialInitContextFactory&quot;);<br />        properties.put(&quot;java.naming.factory.url.pkgs&quot;,<br />                &quot;com.sun.enterprise.naming&quot;);<br />        properties.put(&quot;java.naming.factory.state&quot;,<br />                &quot;com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl&quot;);<br />        properties.setProperty(&quot;org.omg.CORBA.ORBInitialHost&quot;, &quot;localhost&quot;);<br />        properties.setProperty(&quot;org.omg.CORBA.ORBInitialPort&quot;, &quot;3700&quot;);<br />    }<br /><br />    protected void doGet(HttpServletRequest request,<br />            HttpServletResponse response) throws ServletException, IOException {<br />        // TODO Auto-generated method stub<br />        PrintWriter out = response.getWriter();<br />        try {<br />            InitialContext context = new InitialContext(properties);<br />            Object obj = context.lookup(&quot;java:global/HelloWorldEJB/Message&quot;);<br />            MessageRemote message = (MessageRemote) PortableRemoteObject<br />                    .narrow(obj, MessageRemote.class);<br />            out.print(message.sayHello());<br />        } catch (NamingException e) {<br />            // TODO Auto-generated catch block<br />            e.printStackTrace();<br />            out.print(e.toString());<br />        }<br />    }<br /><br />    protected void doPost(HttpServletRequest request,<br />            HttpServletResponse response) throws ServletException, IOException {<br />        // TODO Auto-generated method stub<br />    }<br />}<br /></pre><br />web.xml 設定如下:<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"<br /> xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"<br /> xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"<br /> id="WebApp_ID" version="2.5"&gt;<br /> &lt;display-name&gt;HelloWorldWAR&lt;/display-name&gt;<br /> &lt;welcome-file-list&gt;<br />  &lt;welcome-file&gt;index&lt;/welcome-file&gt;<br />  &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;<br />  &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;<br />  &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;<br />  &lt;welcome-file&gt;default.html&lt;/welcome-file&gt;<br />  &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;<br />  &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;<br /> &lt;/welcome-file-list&gt;<br />&lt;/web-app&gt;<br /></pre><br />現在將 WAR Project 放上 GlassFish。再打開 IndexServlet 應該會出現 Hello World 字樣。<br /><br />單機 Java 應用程式也是差不多的做法，但一有點要注意的是要將 GlassFish 的 appserv-rt.jar 加到單機 Java 應用程式下，才能正確地用到 Remote EJB。當然 EJB 的 JAR 也是必需的。<br /></strong> appserv-rt.jar 在 GlassFish 的 lib 資料夾內 **<br /><br />Main:<br /><pre class="brush: java">package com.blogspot.lawpronotes.app;<br /><br />import java.util.Properties;<br /><br />import javax.naming.InitialContext;<br />import javax.naming.NamingException;<br />import javax.rmi.PortableRemoteObject;<br /><br />import com.blogspot.lawpronotes.ejb.MessageRemote;<br /><br />public class Main {<br />    public static void main(String[] args) throws NamingException{<br />        Properties properties = new Properties();<br />        properties.put("java.naming.factory.initial", "com.sun.enterprise.naming.impl.SerialInitContextFactory");<br />        properties.put("java.naming.factory.url.pkgs", "com.sun.enterprise.naming");<br />        properties.put("java.naming.factory.state", "com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl");<br />        properties.setProperty("org.omg.CORBA.ORBInitialHost", "localhost");<br />        properties.setProperty("org.omg.CORBA.ORBInitialPort", "3700");<br />        InitialContext context = new InitialContext(properties);<br />        Object obj = context.lookup("java:global/HelloWorldEJB/Message");<br />        MessageRemote message = (MessageRemote)PortableRemoteObject.narrow(obj, MessageRemote.class);<br />        System.out.println(message.sayHello());<br />    }<br />}<br /></pre><br />在 Console 會看見 Hello World 字樣。<br /><br />Eclipse 範例在這裡下載:&nbsp;<a href="http://sites.google.com/site/lawrencespace/lawpronotes/download/RemoteEJB.zip">RemoteEJB.zip</a><br /><br />相關書籍: <a href="http://www.amazon.com/Beginning-Java-trade-Platform-GlassFish/dp/1430219548?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Beginning Java™ EE 6 Platform with GlassFish™ 3: From Novice to Professional" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1430219548&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1430219548" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Enterprise-JavaBeans-3-1-Andrew-Rubinger/dp/0596158025?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Enterprise JavaBeans 3.1" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0596158025&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596158025" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Java-EE-Tutorial-I-4th/dp/0137081855?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Java EE 6 Tutorial, Volume I, The (4th Edition) (Java Series)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0137081855&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0137081855" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-8223294832797147627?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最簡單的方式實現 MVC (Servlet + JSP)]]></title>
    <link href="http://pro.ctlok.com/2010/02/mvc-servlet-jsp.html"/>
    <updated>2010-02-04T11:25:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/02/mvc-servlet-jsp</id>
    <content type="html"><![CDATA[<p>Model-View-Controller 是現時流行的系統架構，Model 代表模型(資料)，View 代表視圖，Controller 代表控制器，使用 Servlet 和 JSP 實現 MVC 系統架構是非常簡單的，可以在完全不使用仕何 Framework 的情況下實現 MVC。<br /><br />下圖顯示出 Model, View 和 Controller 的關係，以 Controller 為中心，控制整個流程。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2o2OFYCBLI/AAAAAAAAAdM/MZNbYswlrww/s1600-h/350px-ModelViewControllerDiagram.svg.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2o2OFYCBLI/AAAAAAAAAdM/MZNbYswlrww/s320/350px-ModelViewControllerDiagram.svg.png" /></a></div><br />大部份的開發者也會將 HTML 和 其他程式碼混合到一個檔案內，雖然這樣的做發可能令開發時間減少，但以後要修改或維護時便非常困難，要實現 MVC 時不能令視圖被使用者直接用到，如果能被直接用1到便失去了 MVC 的價值，所以私們要將視圖(JSP) 放到使用者不能進入的位置。<br /><div style="text-align: left;"><br />在&nbsp;WEB-INF 資料夾下新增一個 pages 的資料夾，在&nbsp;WEB-INF/pages&nbsp;資料夾下新增一個 index.jsp 的檔案並貼上以下程式碼。WEB-INF 是使用者不能夠進入的位置，這樣便不姅擔心 JSP 僧被直接看到。<br /><br /><pre class="brush: html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;<br />pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt;<br />&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;<br />&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;<br />&lt;html&gt;<br />    &lt;head&gt;<br />        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br />            &lt;title&gt;Index&lt;/title&gt;<br />    &lt;/head&gt;<br />    &lt;body&gt;<br />        &lt;c:out value=&quot;${ model['message'] }&quot; /&gt;<br />    &lt;/body&gt;<br />&lt;/html&gt;<br /></pre><br />現在新增 Package 為 com.blogspot.lawpronotes.servlet ，在 Package 內新增一個&nbsp;Servlet 命名為 IndexServlet.java 並貼上以下程式碼。<br /><br /><pre class="brush: java">package com.blogspot.lawpronotes.servlet;<br /><br />import java.io.IOException;<br />import java.util.HashMap;<br />import java.util.Map;<br /><br />import javax.servlet.RequestDispatcher;<br />import javax.servlet.ServletException;<br />import javax.servlet.http.HttpServlet;<br />import javax.servlet.http.HttpServletRequest;<br />import javax.servlet.http.HttpServletResponse;<br /><br />public class IndexServlet extends HttpServlet {<br />    private static final long serialVersionUID = 1L;<br /><br />    public IndexServlet() {<br />        super();<br />    }<br /><br />    protected void doGet(HttpServletRequest request,<br />            HttpServletResponse response) throws ServletException, IOException {<br />        Map&lt;String, Object&gt; model = new HashMap&lt;String, Object&gt;();<br />        model.put(&quot;message&quot;, &quot;Hello World&quot;);<br />        request.setAttribute(&quot;model&quot;, model);<br />        // Forward to JSP file to display message<br />        RequestDispatcher dispatcher = request<br />                .getRequestDispatcher(&quot;/WEB-INF/pages/index.jsp&quot;);<br />        dispatcher.forward(request, response);<br />    }<br />}<br /></pre><br />web.xml 設定如下:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br />&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br />    xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;<br />    xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;<br />    id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;<br />    &lt;display-name&gt;MVC&lt;/display-name&gt;<br />    &lt;welcome-file-list&gt;<br />        &lt;welcome-file&gt;index&lt;/welcome-file&gt;<br />    &lt;/welcome-file-list&gt;<br />    &lt;servlet&gt;<br />        &lt;description&gt;&lt;/description&gt;<br />        &lt;display-name&gt;IndexServlet&lt;/display-name&gt;<br />        &lt;servlet-name&gt;IndexServlet&lt;/servlet-name&gt;<br />        &lt;servlet-class&gt;com.blogspot.lawpronotes.servlet.IndexServlet&lt;/servlet-class&gt;<br />    &lt;/servlet&gt;<br />    &lt;servlet-mapping&gt;<br />        &lt;servlet-name&gt;IndexServlet&lt;/servlet-name&gt;<br />        &lt;url-pattern&gt;/index&lt;/url-pattern&gt;<br />    &lt;/servlet-mapping&gt;<br />&lt;/web-app&gt;<br /></pre><br /><pre class="brush: java">Map&lt;String, Object&gt; model = new HashMap&lt;String, Object&gt;();<br />model.put("message", "Hello World");<br /></pre><br />這就是最簡單的做法，使了 Map 去將所有資料放進去，再交由視圖去顯示出來，JSP 將會顯示 Hello World。<br /><br /><pre class="brush: java">request.setAttribute("model", model);<br /></pre><br />這句是要將 Model 放到 JSP 可以拿得到的地方。<br /><br /><pre class="brush: java">RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/pages/index.jsp");<br />dispatcher.forward(request, response);<br /></pre><br />RequestDispatcher 作用是將使用者轉發到 JSP 的位置，但使用者是不會知道的，因為這只是 Server 內部的轉發，和 Redirect 不同。<br /><br />相關書籍: <a href="http://www.amazon.com/Murachs-Java-Servlets-JSP-2nd/dp/1890774448?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Murach's Java Servlets and JSP, 2nd Edition" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1890774448&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1890774448" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Head-First-Servlets-JSP-Certified/dp/0596516681?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Head First Servlets and JSP: Passing the Sun Certified Web Component Developer Exam" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0596516681&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596516681" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/JavaServer-Pages-3rd-Hans-Bergsten/dp/0596005636?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="JavaServer Pages, 3rd Edition" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0596005636&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596005636" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><br /><br /></div><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-988610871402524739?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java EE 6 - GlassFish v3 + MySQL 5.1 配合 EJB + JPA + Servlet]]></title>
    <link href="http://pro.ctlok.com/2010/02/java-ee-6-glassfish-v3-mysql-51-ejb-jpa.html"/>
    <updated>2010-02-02T16:23:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/02/java-ee-6-glassfish-v3-mysql-51-ejb-jpa</id>
    <content type="html"><![CDATA[<p>現時的專業系統設計者會主張將系統分為 3 層或 4 層的系統架構<br /><br />3 層的系統架構:<br /><ul><li>客戶層 (Client tier)</li><li>商業邏輯層&nbsp;(Business tier)</li><li>資料層 (Enterprise Information Systems(EIS) tier)</li></ul><div>而 4 層則是在&nbsp;客戶層 (Client tier) 和&nbsp;商業邏輯層&nbsp;(Business tier) 之間加插一個網絡服務層 (Web tier)<br /><br />4 層的系統架構:</div><div><ul><li>客戶層 (Client tier)</li><li>網絡服務層 (Web tier)</li><li>商業邏輯層&nbsp;(Business tier)</li><li>資料層 (Enterprise Information Systems(EIS) tier)</li></ul><div>給大家一張圖片比較好理解<br /><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2aUgRhPYUI/AAAAAAAAAXM/QpLUrGz3Iw4/s1600-h/javaee_ejb_jpa_servlet_1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2aUgRhPYUI/AAAAAAAAAXM/QpLUrGz3Iw4/s320/javaee_ejb_jpa_servlet_1.png" /></a></div><div><br /></div><div>上圖左邊是 3 層架構</div><div>右邊則是 4 層架構</div><div>Web-Based Client 大多數是指瀏覽器&nbsp;</div><div><br /></div><div>其實在上圖的例子不是只有瀏覽器才會使用到網絡服務層 (Web tier)<br />就好像下圖一樣</div><div><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2aUl9H_QdI/AAAAAAAAAXU/0x7W-jEHnqg/s1600-h/javaee_ejb_jpa_servlet_2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2aUl9H_QdI/AAAAAAAAAXU/0x7W-jEHnqg/s320/javaee_ejb_jpa_servlet_2.png" /></a></div><div><br />因為網絡服務層 (Web tier) 包含 Web service<br />Web service 可以經由各種不同的應用程式去使用<br /><br />現在開始試作 4 層的系統架構<br />開發軟件:&nbsp;<a href="http://www.eclipse.org/downloads/">Eclipse IDE for Java EE Developer</a><br />服務器:&nbsp;<a href="https://glassfish.dev.java.net/downloads/v3-final.html">GlassFish v3</a><br />資料庫:&nbsp;<a href="http://dev.mysql.com/downloads/mysql/">MySQL 5.1</a><br /><br />安裝好以上的工具後便開始進行設定<br /><br /><ul><li>Eclipse 整合 GlassFish v3 可參考:&nbsp;<a href="http://lawpronotes.blogspot.com/2010/01/eclipse-glassfish-3.html">http://lawpronotes.blogspot.com/2010/01/eclipse-glassfish-3.html</a></li><li>GlassFish v3 整合 MySQL 5.1 可參考:&nbsp;<a href="http://lawpronotes.blogspot.com/2010/01/glassfish-3-java-ee-server-mysql.html">http://lawpronotes.blogspot.com/2010/01/glassfish-3-java-ee-server-mysql.html</a></li></ul><br />打開&nbsp;MySQL Command Line Client<br />輸入密碼<br />然後輸入以下的 SQL<br /><br /><pre class="brush: sql">CREATE  TABLE IF NOT EXISTS <code>test</code>.<code>User</code> (<br /><br />  <code>UID</code> INT NOT NULL AUTO_INCREMENT ,<br /><br />  <code>name</code> VARCHAR(45) NOT NULL ,<br /><br />  <code>password</code> VARCHAR(45) NOT NULL ,<br /><br />  PRIMARY KEY (<code>UID</code>) )<br /><br />ENGINE = InnoDB<br /><br />DEFAULT CHARACTER SET = utf8;<br /></pre><br /><div class="separator" style="clear: both; text-align: left;"><br /></div><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2abhf7IoKI/AAAAAAAAAXk/aU0UDT5zaRI/s1600-h/javaee_ejb_jpa_servlet_3.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2abhf7IoKI/AAAAAAAAAXk/aU0UDT5zaRI/s320/javaee_ejb_jpa_servlet_3.png" /></a><br /><br /><strong>在安裝 MySQL 後 test 這個 Database 會自動加入</strong><br /><br />在 Eclipse 按 File -&gt; New -&gt; Enterprise Application Project<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2ac-aCJiwI/AAAAAAAAAXs/b_i0QwNKUp4/s1600-h/javaee_ejb_jpa_servlet_4.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2ac-aCJiwI/AAAAAAAAAXs/b_i0QwNKUp4/s320/javaee_ejb_jpa_servlet_4.png" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"></div><ul><li>Project name: TestEAR</li><li>Target runtime: GlassFish v3 Java EE 6</li><li>EAR version: 5.0</li><li>Configuration: Default&nbsp;Configuration&nbsp;for GlassFish v3 Java EE 6</li></ul><br /><div class="separator" style="clear: both; text-align: left;">按下 Finish</div><div class="separator" style="clear: both; text-align: left;"><br /></div><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2adS_YLBlI/AAAAAAAAAX0/tVIbEVoWhK8/s1600-h/javaee_ejb_jpa_servlet_5.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2adS_YLBlI/AAAAAAAAAX0/tVIbEVoWhK8/s320/javaee_ejb_jpa_servlet_5.png" /></a><br /><br />打開 File -&gt; New -&gt; JPA Project<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2afPYFQywI/AAAAAAAAAYE/WyKH9NCQJZU/s1600-h/javaee_ejb_jpa_servlet_7.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2afPYFQywI/AAAAAAAAAYE/WyKH9NCQJZU/s320/javaee_ejb_jpa_servlet_7.png" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"></div><ul><li>Project name: TestJPA</li><li>Configuration: Default&nbsp;Configuration&nbsp;for GlassFish v3 Java EE 6</li><li>EAR membership: Add project to an EAR</li><li>EAR project name: TestEAR</li></ul><br /><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">按下 Finish</div><br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2aeCv7-5eI/AAAAAAAAAX8/EvQpUnjCpf0/s1600-h/javaee_ejb_jpa_servlet_6.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2aeCv7-5eI/AAAAAAAAAX8/EvQpUnjCpf0/s320/javaee_ejb_jpa_servlet_6.png" /></a></div><br />打開 File -&gt; New -&gt; EJB Project<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2afst7K3DI/AAAAAAAAAYM/zmsVfUN68I8/s1600-h/javaee_ejb_jpa_servlet_8.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2afst7K3DI/AAAAAAAAAYM/zmsVfUN68I8/s320/javaee_ejb_jpa_servlet_8.png" /></a></div><br /><ul><li>Project name: TestEJB</li><li>EJB Module version: 3.0 (還沒有 3.1 可供選擇)</li><li>Configuration: Default&nbsp;Configuration&nbsp;for GlassFish v3 Java EE 6</li><li>EAR membership: Add project to an EAR</li><li>EAR project name: TestEAR</li></ul>按下 Next<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2af_AMiuII/AAAAAAAAAYU/jAYJgxUo4cA/s1600-h/javaee_ejb_jpa_servlet_9.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2af_AMiuII/AAAAAAAAAYU/jAYJgxUo4cA/s320/javaee_ejb_jpa_servlet_9.png" /></a></div><br />再按 Next<br /><br />不要選取 Create an EJB client JAR module to hold the client interface and class<br />按下 Finish<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2ahJKTgwwI/AAAAAAAAAYc/AGDUbz78XgE/s1600-h/javaee_ejb_jpa_servlet_10.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2ahJKTgwwI/AAAAAAAAAYc/AGDUbz78XgE/s320/javaee_ejb_jpa_servlet_10.png" /></a></div><br />打開 File -&gt; New -&gt; Dynamic Web Project<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2ahuHDv0GI/AAAAAAAAAYk/kmyGvWzMU90/s1600-h/javaee_ejb_jpa_servlet_11.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2ahuHDv0GI/AAAAAAAAAYk/kmyGvWzMU90/s320/javaee_ejb_jpa_servlet_11.png" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"></div><ul><li>Project name: TestWAR</li><li>Dynamic Web module version: 2.5&nbsp;(還沒有 3.0 可供選擇)</li><li>Configuration: Default&nbsp;Configuration&nbsp;for GlassFish v3 Java EE 6</li><li>EAR membership: Add project to an EAR</li><li>EAR project name: TestEAR</li></ul><div>按下 Finish</div><br /><div class="separator" style="clear: both; text-align: left;"><br /></div><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2ah77u011I/AAAAAAAAAYs/5pq165G5uz8/s1600-h/javaee_ejb_jpa_servlet_12.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2ah77u011I/AAAAAAAAAYs/5pq165G5uz8/s320/javaee_ejb_jpa_servlet_12.png" /></a><br /><br />設換到 JPA 的版面<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2ai9XUJL-I/AAAAAAAAAY0/RB7pKebvAzU/s1600-h/javaee_ejb_jpa_servlet_13.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2ai9XUJL-I/AAAAAAAAAY0/RB7pKebvAzU/s320/javaee_ejb_jpa_servlet_13.png" /></a></div><br />在 Data Source Explorer 的 Database connection 按下滑鼠右鍵<br />按下 New<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2ajx_cJotI/AAAAAAAAAZE/a41QIN-YJyU/s1600-h/javaee_ejb_jpa_servlet_15.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2ajx_cJotI/AAAAAAAAAZE/a41QIN-YJyU/s320/javaee_ejb_jpa_servlet_15.png" /></a></div><br /><br /><ul><li>選擇 MySQL</li><li>Name: Test Connection</li></ul><br />按下 Next<br /><div class="separator" style="clear: both; text-align: left;"><br /></div><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2apUupSJHI/AAAAAAAAAZ8/R6xjHaDecIs/s1600-h/javaee_ejb_jpa_servlet_16.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2apUupSJHI/AAAAAAAAAZ8/R6xjHaDecIs/s320/javaee_ejb_jpa_servlet_16.png" /></a><br /><br />現在是沒有 Driver 可供選擇的<br />按下右邊第二個按鈕<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2akXe5HyII/AAAAAAAAAZM/dHlbR4iPe8o/s1600-h/javaee_ejb_jpa_servlet_17.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2akXe5HyII/AAAAAAAAAZM/dHlbR4iPe8o/s320/javaee_ejb_jpa_servlet_17.png" /></a></div><br />選擇 MySQL 5.1<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2alAT4ZCuI/AAAAAAAAAZU/aqPA_rwLPck/s1600-h/javaee_ejb_jpa_servlet_18.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2alAT4ZCuI/AAAAAAAAAZU/aqPA_rwLPck/s320/javaee_ejb_jpa_servlet_18.png" /></a></div><br />在上方的標籤選擇 Jar List<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2alUAKZzZI/AAAAAAAAAZc/la7eUJFU5a0/s1600-h/javaee_ejb_jpa_servlet_19.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2alUAKZzZI/AAAAAAAAAZc/la7eUJFU5a0/s320/javaee_ejb_jpa_servlet_19.png" /></a></div><br />按下 Edit JAR/Zip... 選擇 MySQL JDBC Driver<br />沒有 Driver 的可在這裡下載:&nbsp;<a href="http://dev.mysql.com/downloads/connector/j/">http://dev.mysql.com/downloads/connector/j/</a><br />按下 OK 回到剛才的頁面<br /><br /><ul><li>Database: test</li><li>URL: jdbc:mysql://localhost:3306/test</li><li>User name: root</li><li>password: (不用教吧)</li></ul><div>確定資料正確後可以按一下 Test Connection 測試一下連接有沒有問題</div><div><br /></div><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2amNw3IK0I/AAAAAAAAAZk/4fkREQalqq0/s1600-h/javaee_ejb_jpa_servlet_20.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2amNw3IK0I/AAAAAAAAAZk/4fkREQalqq0/s320/javaee_ejb_jpa_servlet_20.png" /></a></div><br />正確連接會看見以下畫面<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2anHqNnmNI/AAAAAAAAAZs/7Wmta1xB1GI/s1600-h/javaee_ejb_jpa_servlet_21.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2anHqNnmNI/AAAAAAAAAZs/7Wmta1xB1GI/s320/javaee_ejb_jpa_servlet_21.png" /></a></div><br />按下 Finish 完成<br /><br />在 TestJPA project 新增一個 Entities<br />選取 New -&gt;&nbsp;Entities From Table<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2aoNPIxuzI/AAAAAAAAAZ0/nUvU4iNjevU/s1600-h/javaee_ejb_jpa_servlet_22.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2aoNPIxuzI/AAAAAAAAAZ0/nUvU4iNjevU/s320/javaee_ejb_jpa_servlet_22.png" /></a></div><br /><br /><ul><li>Connection: Test Connection</li><li>Schema: test</li><li>Table: user</li></ul><div>按下 Next</div><div><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2apoE1F2iI/AAAAAAAAAaE/_cpJu24UwoY/s1600-h/javaee_ejb_jpa_servlet_24.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2apoE1F2iI/AAAAAAAAAaE/_cpJu24UwoY/s320/javaee_ejb_jpa_servlet_24.png" /></a></div><div><br /></div><div>再按下 Next</div><div><ul><li><s>Key generator: auto</s></li><li>Collection properties type: java.util.List</li><li>Package:&nbsp;com.blogspot.lawpronotes.jpa</li></ul><div>按下 Finish</div></div><div><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2aqasnkZ2I/AAAAAAAAAaM/RZ75QA31gxw/s1600-h/javaee_ejb_jpa_servlet_25.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2aqasnkZ2I/AAAAAAAAAaM/RZ75QA31gxw/s320/javaee_ejb_jpa_servlet_25.png" /></a></div><div><br /></div><div>在 src 的 資料夾會出現 User.java</div><div><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2arawiJTuI/AAAAAAAAAaU/nZa78cCwdno/s1600-h/javaee_ejb_jpa_servlet_26.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2arawiJTuI/AAAAAAAAAaU/nZa78cCwdno/s320/javaee_ejb_jpa_servlet_26.png" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">原始碼如下</div><pre class="brush: java">package com.blogspot.lawpronotes.jpa;<br /><br />import java.io.Serializable;<br />import javax.persistence.<em>;<br /><br />/**<br /> * The persistent class for the user database table.<br /> * <br /> </em>/<br />@Entity<br />@Table(name = "user")<br />@NamedQueries( { @NamedQuery(name = "User.findAll", query = "SELECT u FROM User u") })<br />public class User implements Serializable {<br />    private static final long serialVersionUID = 1L;<br /><br />    @Id<br />    @Column(name = "UID")<br />    private int uid;<br /><br />    private String name;<br /><br />    private String password;<br /><br />    public User() {<br />    }<br /><br />    public int getUid() {<br />        return this.uid;<br />    }<br /><br />    public void setUid(int uid) {<br />        this.uid = uid;<br />    }<br /><br />    public String getName() {<br />        return this.name;<br />    }<br /><br />    public void setName(String name) {<br />        this.name = name;<br />    }<br /><br />    public String getPassword() {<br />        return this.password;<br />    }<br /><br />    public void setPassword(String password) {<br />        this.password = password;<br />    }<br /><br />}<br /></pre><br />現在設定 EJB<br />到 TestEJB -&gt; Properties<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2eO_EPt59I/AAAAAAAAAac/YMaNZz6y_W4/s1600-h/javaee_ejb_jpa_servlet_27.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2eO_EPt59I/AAAAAAAAAac/YMaNZz6y_W4/s320/javaee_ejb_jpa_servlet_27.png" /></a></div><br />找尋 Java EE Module Dependencies<br />將 TestJPA 打勾起來<br />按下 OK<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2ePP17_UGI/AAAAAAAAAak/9nHxZH6voMQ/s1600-h/javaee_ejb_jpa_servlet_28.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2ePP17_UGI/AAAAAAAAAak/9nHxZH6voMQ/s320/javaee_ejb_jpa_servlet_28.png" /></a></div><br />在 TestEJB 新增一個 Session Bean (EJB 3.x)<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2ePv5remuI/AAAAAAAAAas/51EhjecWwRQ/s1600-h/javaee_ejb_jpa_servlet_29.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2ePv5remuI/AAAAAAAAAas/51EhjecWwRQ/s320/javaee_ejb_jpa_servlet_29.png" /></a></div><ul><li>Java package:&nbsp;com.blogspot.lawpronotes.ejb</li><li>Class name: UserController</li><li>Status type: Stateless</li><li>不要將 Remote 打勾 (在同一個 JVM 環境下不需要用到 Remote)</li><li>將 Local 打勾並輸入:&nbsp;com.blogspot.lawpronotes.ejb.UserControllerLocal</li></ul><div>按下 Next</div><br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2eQZ7sPguI/AAAAAAAAAa0/qJbtwpI7kSc/s1600-h/javaee_ejb_jpa_servlet_30.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2eQZ7sPguI/AAAAAAAAAa0/qJbtwpI7kSc/s320/javaee_ejb_jpa_servlet_30.png" /></a></div><ul><li>Bean name: UserController</li><li>Mapped name: ejb/UserController</li><li>Transaction type: Container</li></ul><div>按下 Finish</div><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2eRuxhV8qI/AAAAAAAAAa8/0Ag4YSf76yM/s1600-h/javaee_ejb_jpa_servlet_31.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2eRuxhV8qI/AAAAAAAAAa8/0Ag4YSf76yM/s320/javaee_ejb_jpa_servlet_31.png" /></a></div><br />在 TestEJB project 內會多出 2 個 file<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2eSUjsfKYI/AAAAAAAAAbE/eir0cPE1SMQ/s1600-h/javaee_ejb_jpa_servlet_32.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2eSUjsfKYI/AAAAAAAAAbE/eir0cPE1SMQ/s320/javaee_ejb_jpa_servlet_32.png" /></a></div><br />將 UserControllerLocal.java 換成以下程式碼<br /><pre class="brush: java">package com.blogspot.lawpronotes.ejb;<br /><br />import javax.ejb.Local;<br /><br />@Local<br />public interface UserControllerLocal {<br />    public void addUser(String userName, String password) throws Exception;<br /><br />    public java.util.List&lt;com.blogspot.lawpronotes.jpa.User&gt; getAllUser()<br />            throws Exception;<br />}<br /><br /></pre><br />再將 UserController.java 換成以下程式碼<br /><pre class="brush: java">package com.blogspot.lawpronotes.ejb;<br /><br />import java.util.List;<br /><br />import javax.ejb.Stateless;<br />import javax.persistence.EntityManager;<br />import javax.persistence.PersistenceContext;<br />import javax.persistence.Query;<br /><br />import com.blogspot.lawpronotes.jpa.User;<br /><br />/<strong><br /> * Session Bean implementation class UserController<br /> */<br />@Stateless(mappedName = "ejb/UserController")<br />public class UserController implements UserControllerLocal {<br /><br />    @PersistenceContext<br />    private EntityManager entityManager;<br /><br />    /</strong><br />     * Default constructor.<br />     <em>/<br />    public UserController() {<br />        // TODO Auto-generated constructor stub<br />    }<br /><br />    @Override<br />    public void addUser(String userName, String password) throws Exception {<br />        // TODO Auto-generated method stub<br />        User user = new User();<br />        user.setName(userName);<br />        user.setPassword(password);<br />        entityManager.persist(user);<br />        entityManager.flush();<br />    }<br /><br />    @SuppressWarnings("unchecked")<br />    @Override<br />    public List&lt;User&gt; getAllUser() throws Exception {<br />        // TODO Auto-generated method stub<br />        List&lt;User&gt; userList = null;<br />        Query query = entityManager.createNamedQuery("User.findAll");<br />        userList = (List&lt;User&gt;) query.getResultList();<br />        return userList;<br />    }<br />}<br /></pre><br />在 TestEJB -&gt; ejbModule -&gt; META-INF 新增一個 XML 檔案<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fTXE10JiI/AAAAAAAAAbM/erUvQuCmK0M/s1600-h/javaee_ejb_jpa_servlet_33.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fTXE10JiI/AAAAAAAAAbM/erUvQuCmK0M/s320/javaee_ejb_jpa_servlet_33.png" /></a></div><br />File name:&nbsp;persistence.xml<br />按下 Finish<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fTqbRrECI/AAAAAAAAAbU/jSDFVmLE8pk/s1600-h/javaee_ejb_jpa_servlet_34.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fTqbRrECI/AAAAAAAAAbU/jSDFVmLE8pk/s320/javaee_ejb_jpa_servlet_34.png" /></a></div><br />貼上以下內容<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;persistence version="1.0"<br />    xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"<br />    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"&gt;<br />    &lt;persistence-unit name="TestJPA"&gt;<br />        &lt;jta-data-source&gt;jdbc/test&lt;/jta-data-source&gt;<br />        &lt;class&gt;com.blogspot.lawpronotes.jpa.User&lt;/class&gt;<br />    &lt;/persistence-unit&gt;<br />&lt;/persistence&gt;<br /></pre><br />其中的 jta-data-source 一定要跟 GlassFish JDBC Resources 的 JNDI name 要一致<br /><pre class="brush: xml">&lt;jta-data-source&gt;jdbc/test&lt;/jta-data-source&gt;<br /></pre><br /><div class="separator" style="clear: both; text-align: left;">進入 TestWAR -&gt; Properties</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fXrTWsEqI/AAAAAAAAAbs/J3JoWvWyT3Y/s1600-h/javaee_ejb_jpa_servlet_37.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fXrTWsEqI/AAAAAAAAAbs/J3JoWvWyT3Y/s320/javaee_ejb_jpa_servlet_37.png" /></a></div><br /><br /><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">找尋 Java EE Module Dependencies</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">將 TestJPA 和 TestEJB 打勾起來</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">按下 OK</div><br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fX9VNH5cI/AAAAAAAAAb0/MvMhMazRHg8/s1600-h/javaee_ejb_jpa_servlet_38.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fX9VNH5cI/AAAAAAAAAb0/MvMhMazRHg8/s320/javaee_ejb_jpa_servlet_38.png" /></a></div><br />在 TestWAR 新增一個 Servlet<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fVe-MooZI/AAAAAAAAAbc/OtzNxlv-yDM/s1600-h/javaee_ejb_jpa_servlet_35.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fVe-MooZI/AAAAAAAAAbc/OtzNxlv-yDM/s320/javaee_ejb_jpa_servlet_35.png" /></a></div><br /><br /><ul><li>Java package:&nbsp;com.blogspot.lawpronotes.servlet</li><li>Class name: IndexServlet</li></ul><div>按下 Finish</div><br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fV3k0Zi4I/AAAAAAAAAbk/rI-SdDGvPFE/s1600-h/javaee_ejb_jpa_servlet_36.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fV3k0Zi4I/AAAAAAAAAbk/rI-SdDGvPFE/s320/javaee_ejb_jpa_servlet_36.png" /></a></div><br />將 IndexServlet.java 換成以下內容<br /><pre class="brush: java">package com.blogspot.lawpronotes.servlet;<br /><br />import java.io.IOException;<br />import java.util.List;<br /><br />import javax.ejb.EJB;<br />import javax.servlet.RequestDispatcher;<br />import javax.servlet.ServletException;<br />import javax.servlet.annotation.WebServlet;<br />import javax.servlet.http.HttpServlet;<br />import javax.servlet.http.HttpServletRequest;<br />import javax.servlet.http.HttpServletResponse;<br /><br />import com.blogspot.lawpronotes.ejb.UserControllerLocal;<br />import com.blogspot.lawpronotes.jpa.User;<br /><br />/**<br /> * Servlet implementation class IndexServlet<br /> </em>/<br />@WebServlet(name = "Index", urlPatterns = { "/index" })<br />public class IndexServlet extends HttpServlet {<br />    private static final long serialVersionUID = 1L;<br /><br />    @EJB<br />    private UserControllerLocal userController;<br /><br />    /<strong><br />     * @see HttpServlet#HttpServlet()<br />     */<br />    public IndexServlet() {<br />        super();<br />        // TODO Auto-generated constructor stub<br />    }<br /><br />    /</strong><br />     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse<br />     *      response)<br />     <em>/<br />    protected void doGet(HttpServletRequest request,<br />            HttpServletResponse response) throws ServletException, IOException {<br />        // TODO Auto-generated method stub<br />        try {<br />            List&lt;User&gt; userList = userController.getAllUser();<br />            request.setAttribute("userList", userList);<br />            RequestDispatcher dispatcher = request<br />                    .getRequestDispatcher("/WEB-INF/pages/index.jsp");<br />            dispatcher.forward(request, response);<br />        } catch (Exception ex) {<br />            ex.printStackTrace();<br />        }<br />    }<br /><br />    /**<br />     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse<br />     *      response)<br />     </em>/<br />    protected void doPost(HttpServletRequest request,<br />            HttpServletResponse response) throws ServletException, IOException {<br />        // TODO Auto-generated method stub<br />        try {<br />            String userName = request.getParameter("userName");<br />            String password = request.getParameter("password");<br />            userController.addUser(userName, password);<br />            List&lt;User&gt; userList = userController.getAllUser();<br />            request.setAttribute("userList", userList);<br />            RequestDispatcher dispatcher = request<br />                    .getRequestDispatcher("/WEB-INF/pages/index.jsp");<br />            dispatcher.forward(request, response);<br />        } catch (Exception ex) {<br />            ex.printStackTrace();<br />        }<br />    }<br />}<br /></pre><br />將 TestWAR -&gt; Web Content 的 index.jsp 移除掉<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fYT1AORjI/AAAAAAAAAb8/u4p5Q2hVBDw/s1600-h/javaee_ejb_jpa_servlet_39.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fYT1AORjI/AAAAAAAAAb8/u4p5Q2hVBDw/s320/javaee_ejb_jpa_servlet_39.png" /></a></div><br />在 TestWAR -&gt;&nbsp;Web Content -&gt; WEB-INF 新增一個資料夾<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fZBoK_V7I/AAAAAAAAAcE/a2_NkozwqEU/s1600-h/javaee_ejb_jpa_servlet_40.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fZBoK_V7I/AAAAAAAAAcE/a2_NkozwqEU/s320/javaee_ejb_jpa_servlet_40.png" /></a></div><br />Folder name: pages<br />按下 Finish<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fZSpaHTaI/AAAAAAAAAcM/I--2ptAi9HI/s1600-h/javaee_ejb_jpa_servlet_41.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fZSpaHTaI/AAAAAAAAAcM/I--2ptAi9HI/s320/javaee_ejb_jpa_servlet_41.png" /></a></div><br />在 pages 資料夾新增一個 JSP<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fZyjh3b-I/AAAAAAAAAcU/9q9_YiHMQxA/s1600-h/javaee_ejb_jpa_servlet_42.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fZyjh3b-I/AAAAAAAAAcU/9q9_YiHMQxA/s320/javaee_ejb_jpa_servlet_42.png" /></a></div><br />File name: index.jsp<br />按下 Finish<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fa8S9aYpI/AAAAAAAAAcc/GFAf5ykdB2w/s1600-h/javaee_ejb_jpa_servlet_43.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fa8S9aYpI/AAAAAAAAAcc/GFAf5ykdB2w/s320/javaee_ejb_jpa_servlet_43.png" /></a></div><br />貼上以下程式碼<br /><pre class="brush: html">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"<br />    pageEncoding="UTF-8" isELIgnored="false" %&gt;<br />&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;<br />&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;<br />&lt;html&gt;<br />&lt;head&gt;<br />&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;<br />&lt;title&gt;Sample&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br /> &lt;c:if test="${userList.size() &gt; 0}"&gt;<br />  &lt;table&gt;<br />   &lt;thead&gt;<br />    &lt;tr&gt;<br />     &lt;td&gt;User Name&lt;/td&gt;<br />     &lt;td&gt;Password&lt;/td&gt;<br />    &lt;/tr&gt;<br />   &lt;/thead&gt;<br />   &lt;tbody&gt;<br />    &lt;c:forEach var="user" items="${userList}"&gt;<br />     &lt;tr&gt;<br />      &lt;td&gt;${user.getName()}&lt;/td&gt;<br />      &lt;td&gt;${user.getPassword()}&lt;/td&gt;<br />     &lt;/tr&gt;<br />    &lt;/c:forEach&gt;<br />   &lt;/tbody&gt;<br />  &lt;/table&gt;<br /> &lt;/c:if&gt;<br /> &lt;form method="post"&gt;<br />  &lt;label&gt;User Name:&lt;/label&gt;&lt;input type="text" name="userName"/&gt;&lt;br/&gt;<br />  &lt;label&gt;Password:&lt;/label&gt;&lt;input type="password" name="password"/&gt;&lt;br/&gt;<br />  &lt;input type="submit"/&gt;<br /> &lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;<br /></pre><br />最後要修改一下 web.xml<br />到 TestWAR -&gt; Web Content -&gt; WEB-INF -&gt; web.xml<br />貼上以下內容<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5"&gt;<br />  &lt;display-name&gt;TestWAR&lt;/display-name&gt;<br />  &lt;welcome-file-list&gt;<br />    &lt;welcome-file&gt;index&lt;/welcome-file&gt;<br />  &lt;/welcome-file-list&gt;<br />&lt;/web-app&gt;<br /></pre><br />現在完成了!<br />立即去測試一下<br />到 TestEAR -&gt; Run As - Run on Server<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fbozjdBHI/AAAAAAAAAck/-qGAmjSuL38/s1600-h/javaee_ejb_jpa_servlet_44.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fbozjdBHI/AAAAAAAAAck/-qGAmjSuL38/s320/javaee_ejb_jpa_servlet_44.png" /></a></div><br />選擇 GlassFish v3 Java EE 6 at localhost<br />按下 Finish<br />Eclipse 便會將整個 Project 打包放到 GlassFish Server 上<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fb5meD4AI/AAAAAAAAAcs/-SOodQ2FNQs/s1600-h/javaee_ejb_jpa_servlet_45.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fb5meD4AI/AAAAAAAAAcs/-SOodQ2FNQs/s320/javaee_ejb_jpa_servlet_45.png" /></a></div><br />在瀏覽器輸入網址:&nbsp;<a href="http://localhost:8080/TestWAR/">http://localhost:8080/TestWAR/</a><br />將會看見以下畫面<br />其實這是一個加入 User 的表格 (好像太陽春了點....)<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fdzGIsEAI/AAAAAAAAAc0/bzKzJLg51qk/s1600-h/javaee_ejb_jpa_servlet_46.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fdzGIsEAI/AAAAAAAAAc0/bzKzJLg51qk/s320/javaee_ejb_jpa_servlet_46.png" /></a></div><br /><ul><li>User Name: Lawrence</li><li>Password: 123456</li></ul><div>按下提交</div><div><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2feSX6c8fI/AAAAAAAAAc8/wYyYP4QI_C8/s1600-h/javaee_ejb_jpa_servlet_47.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2feSX6c8fI/AAAAAAAAAc8/wYyYP4QI_C8/s320/javaee_ejb_jpa_servlet_47.png" /></a></div><div><br /></div><div>結果會顯示如以下畫面</div><div><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fee6Agp8I/AAAAAAAAAdE/W6sbseKZSDc/s1600-h/javaee_ejb_jpa_servlet_48.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fee6Agp8I/AAAAAAAAAdE/W6sbseKZSDc/s320/javaee_ejb_jpa_servlet_48.png" /></a></div><div><br /></div><div>現在講解一下流程:</div><div><ol><li>按下提交</li><li>瀏覽器將表格內容送回 IndexServlet</li><li>IndexServlet 接收內容後將 userName 和 password 送到 EJB Session bean - UserController 的 addUser function</li><li>UserController&nbsp;利用&nbsp;EntityManager 將 userName 和 password 加入到 user table 內</li><li>IndexServlet&nbsp;將所有 user 找出來</li><li>IndexServlet 將 user list 送到 index.jsp 顯示</li></ol><div>大概就是這樣<br /><br />完整範例:&nbsp;<a href="http://sites.google.com/site/lawrencespace/lawpronotes/download/EJB_JPA_Servlet.zip">EJB_JPA_Servlet.zip</a></div><div><br /></div><div>相關書籍:&nbsp;<a href="http://www.amazon.com/Beginning-Java-trade-Platform-GlassFish/dp/1430219548?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Beginning Java™ EE 6 Platform with GlassFish™ 3: From Novice to Professional" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1430219548&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1430219548" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Pro-JPA-Mastering-Persistence-Technology/dp/1430219564?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Pro JPA 2: Mastering the Java™ Persistence API (Expert's Voice in Java Technology)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1430219564&amp;tag=program06-20" /></a><a href="http://www.amazon.com/EJB-3-Action-Debu-Panda/dp/1933988347?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="EJB 3 in Action" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1933988347&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1933988347" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1430219564" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /></div></div></div></div><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-4305019519713509058?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java EE 6 - Servlet 3.0 新功能 - 注解 (Annotations)]]></title>
    <link href="http://pro.ctlok.com/2010/01/java-ee-6-servlet-30-annotations.html"/>
    <updated>2010-01-31T00:51:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/01/java-ee-6-servlet-30-annotations</id>
    <content type="html"><![CDATA[<p>Servlet 3.0 的新功能<br />類似 Spring Framework 的 Web MVC使用 Java Annotation 來擴展 Servlet<br />廢話不多說<br />看例子<br />先來看舊的設定方法<br /><br />IndexServlet <br /><pre class="brush: java">package com.test.servlet;<br /><br />import java.io.IOException;<br />import java.io.PrintWriter;<br /><br />import javax.servlet.ServletException;<br />import javax.servlet.http.HttpServlet;<br />import javax.servlet.http.HttpServletRequest;<br />import javax.servlet.http.HttpServletResponse;<br /><br />/<strong><br /> * Servlet implementation class Index<br /> */<br /><br />public class IndexServlet extends HttpServlet {<br />    private static final long serialVersionUID = 1L;<br /><br />    /</strong><br />     * @see HttpServlet#HttpServlet()<br />     <em>/<br />    public IndexServlet() {<br />        super();<br />        // TODO Auto-generated constructor stub<br />    }<br /><br />    /**<br />     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse<br />     *      response)<br />     </em>/<br />    protected void doGet(HttpServletRequest request,<br />            HttpServletResponse response) throws ServletException, IOException {<br />        // TODO Auto-generated method stub<br />        PrintWriter out = response.getWriter();<br />        out.println(&quot;Servlet hello world!&quot;);<br />    }<br /><br />    /<strong><br />     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse<br />     *      response)<br />     */<br />    protected void doPost(HttpServletRequest request,<br />            HttpServletResponse response) throws ServletException, IOException {<br />        // TODO Auto-generated method stub<br />    }<br /><br />}<br /></pre><br />MyFilter <br /><pre class="brush: java">package com.test.filter;<br /><br />import java.io.IOException;<br />import java.io.PrintWriter;<br /><br />import javax.servlet.Filter;<br />import javax.servlet.FilterChain;<br />import javax.servlet.FilterConfig;<br />import javax.servlet.ServletException;<br />import javax.servlet.ServletRequest;<br />import javax.servlet.ServletResponse;<br /><br />/</strong><br /> * Servlet Filter implementation class MyFilter<br /> <em>/<br /><br />public class MyFilter implements Filter {<br /><br />    /**<br />     * Default constructor.<br />     </em>/<br />    public MyFilter() {<br />        // TODO Auto-generated constructor stub<br />    }<br /><br />    /<strong><br />     * @see Filter#destroy()<br />     */<br />    public void destroy() {<br />        // TODO Auto-generated method stub<br />    }<br /><br />    /</strong><br />     * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain)<br />     <em>/<br />    public void doFilter(ServletRequest request, ServletResponse response,<br />            FilterChain chain) throws IOException, ServletException {<br />        // TODO Auto-generated method stub<br />        // place your code here<br />        PrintWriter out = response.getWriter();<br />        out.println(&quot;MyFilter hello world!&quot;);<br />        // pass the request along the filter chain<br />        chain.doFilter(request, response);<br />    }<br /><br />    /**<br />     * @see Filter#init(FilterConfig)<br />     </em>/<br />    public void init(FilterConfig fConfig) throws ServletException {<br />        // TODO Auto-generated method stub<br />    }<br /><br />}<br /></pre><br />web.xml <br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br />&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br />    xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;<br />    xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;<br />    id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;<br />    &lt;display-name&gt;TestWAR&lt;/display-name&gt;<br />    &lt;welcome-file-list&gt;<br />        &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;<br />        &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;<br />        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;<br />        &lt;welcome-file&gt;default.html&lt;/welcome-file&gt;<br />        &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;<br />        &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;<br />        &lt;welcome-file&gt;index&lt;/welcome-file&gt;<br />    &lt;/welcome-file-list&gt;<br />    &lt;servlet&gt;<br />        &lt;description&gt;&lt;/description&gt;<br />        &lt;display-name&gt;IndexServlet&lt;/display-name&gt;<br />        &lt;servlet-name&gt;IndexServlet&lt;/servlet-name&gt;<br />        &lt;servlet-class&gt;com.test.servlet.IndexServlet&lt;/servlet-class&gt;<br />    &lt;/servlet&gt;<br />    &lt;servlet-mapping&gt;<br />        &lt;servlet-name&gt;IndexServlet&lt;/servlet-name&gt;<br />        &lt;url-pattern&gt;/index&lt;/url-pattern&gt;<br />    &lt;/servlet-mapping&gt;<br />    &lt;filter&gt;<br />        &lt;display-name&gt;MyFilter&lt;/display-name&gt;<br />        &lt;filter-name&gt;MyFilter&lt;/filter-name&gt;<br />        &lt;filter-class&gt;com.test.filter.MyFilter&lt;/filter-class&gt;<br />    &lt;/filter&gt;<br />    &lt;filter-mapping&gt;<br />        &lt;filter-name&gt;MyFilter&lt;/filter-name&gt;<br />        &lt;url-pattern&gt;/<em>&lt;/url-pattern&gt;<br />    &lt;/filter-mapping&gt;<br />&lt;/web-app&gt;<br /></pre><br />結果顯示:<br />MyFilter hello world!<br />Servlet hello world!<br /><br />舊有的設定方式需要在 web.xml 設定好 Servlet 和 Filter 才可以<br />現在看看新的設定方式<br /><br />IndexServlet <br /><pre class="brush: java">package com.test.servlet;<br /><br />import java.io.IOException;<br />import java.io.PrintWriter;<br /><br />import javax.servlet.ServletException;<br />import javax.servlet.annotation.WebServlet;<br />import javax.servlet.http.HttpServlet;<br />import javax.servlet.http.HttpServletRequest;<br />import javax.servlet.http.HttpServletResponse;<br /><br />/**<br /> * Servlet implementation class Index<br /> </em>/<br />@WebServlet(name = &quot;Index&quot;, urlPatterns = { &quot;/index&quot; })<br />public class IndexServlet extends HttpServlet {<br />    private static final long serialVersionUID = 1L;<br /><br />    /<strong><br />     * @see HttpServlet#HttpServlet()<br />     */<br />    public IndexServlet() {<br />        super();<br />        // TODO Auto-generated constructor stub<br />    }<br /><br />    /</strong><br />     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse<br />     *      response)<br />     <em>/<br />    protected void doGet(HttpServletRequest request,<br />            HttpServletResponse response) throws ServletException, IOException {<br />        // TODO Auto-generated method stub<br />        PrintWriter out = response.getWriter();<br />        out.println(&quot;Servlet annotation work!&quot;);<br />    }<br /><br />    /**<br />     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse<br />     *      response)<br />     </em>/<br />    protected void doPost(HttpServletRequest request,<br />            HttpServletResponse response) throws ServletException, IOException {<br />        // TODO Auto-generated method stub<br />    }<br /><br />}<br /></pre><br />MyFilter <br /><pre class="brush: java">package com.test.filter;<br /><br />import java.io.IOException;<br />import java.io.PrintWriter;<br /><br />import javax.servlet.Filter;<br />import javax.servlet.FilterChain;<br />import javax.servlet.FilterConfig;<br />import javax.servlet.ServletException;<br />import javax.servlet.ServletRequest;<br />import javax.servlet.ServletResponse;<br />import javax.servlet.annotation.WebFilter;<br /><br />/<strong><br /> * Servlet Filter implementation class MyFilter<br /> <em>/<br />@WebFilter(filterName = &quot;MyFilter&quot;, urlPatterns = { &quot;/</em>&quot; })<br />public class MyFilter implements Filter {<br /><br />    /</strong><br />     * Default constructor.<br />     <em>/<br />    public MyFilter() {<br />        // TODO Auto-generated constructor stub<br />    }<br /><br />    /**<br />     * @see Filter#destroy()<br />     </em>/<br />    public void destroy() {<br />        // TODO Auto-generated method stub<br />    }<br /><br />    /<strong><br />     * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain)<br />     */<br />    public void doFilter(ServletRequest request, ServletResponse response,<br />            FilterChain chain) throws IOException, ServletException {<br />        // TODO Auto-generated method stub<br />        // place your code here<br />        PrintWriter out = response.getWriter();<br />        out.println(&quot;MyFilter annotation work!&quot;);<br />        // pass the request along the filter chain<br />        chain.doFilter(request, response);<br />    }<br /><br />    /</strong><br />     * @see Filter#init(FilterConfig)<br />     <em>/<br />    public void init(FilterConfig fConfig) throws ServletException {<br />        // TODO Auto-generated method stub<br />    }<br /><br />}<br /></pre><br />web.xml <br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br />&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br />    xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;<br />    xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;<br />    id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;<br />    &lt;display-name&gt;TestWAR&lt;/display-name&gt;<br />    &lt;welcome-file-list&gt;<br />        &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;<br />        &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;<br />        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;<br />        &lt;welcome-file&gt;default.html&lt;/welcome-file&gt;<br />        &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;<br />        &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;<br />        &lt;welcome-file&gt;index&lt;/welcome-file&gt;<br />    &lt;/welcome-file-list&gt;<br />&lt;/web-app&gt;<br /></pre><br />結果顯示:  <br />MyFilter annotation work! <br />Servlet annotation work!  <br /><br />IndexServlet 加入了<br /><pre class="brush: java">@WebServlet(name="Index", urlPatterns={"/index"})<br /></pre><br />MyFilter 加入了<br /><pre class="brush: java">@WebFilter(filterName="MyFilter", urlPatterns={"/</em>"})<br /></pre><br />設定交由各自的 Class 去設定<br />web.xml 完全不需要設定 Servlet 和 Filter <br />方便多了 <br />如果你不喜歡這樣的設定方式也可以用回舊有的設定方法 <br /><br />雖然 Servlet 3.0 多了這個好用的東西<br />但還是比不上 Spring Framework 的注解方式(Annotation) 好用 (純粹個人意見)<br /><br />WAR 檔案(連原始碼):&nbsp;<a href="http://sites.google.com/site/lawrencespace/lawpronotes/download/TestWAR.war">TestWar.war</a><br /><br />相關書籍:&nbsp;<a href="http://www.amazon.com/Beginning-Java-EE-GlassFish-Second/dp/143022889X?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Beginning Java EE 6 with GlassFish 3, Second Edition" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=143022889X&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=143022889X" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Java-EE-Beginners-Sharanam-Shah/dp/8184049390?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Java EE 6 for Beginners" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=8184049390&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=8184049390" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Core-Servlets-Javaserver-Pages-Technologies/dp/0130092290?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Core Servlets and Javaserver Pages: Core Technologies, Vol. 1 (2nd Edition)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0130092290&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0130092290" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-6522269090498340287?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
