<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Decorator | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/decorator/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2015-12-17T10:59:14+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design Pattern - Decorator]]></title>
    <link href="http://pro.ctlok.com/blog/2012/04/11/design-pattern-decorator.html"/>
    <updated>2012-04-11T15:29:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/04/11/design-pattern-decorator</id>
    <content type="html"><![CDATA[<p>Decorator Pattern 可以令到不用改動原本物件的程式碼，而又可以擴充一些功能在這個物件上，
就好像 Plugin 一樣。你可以想像一下，WordPress 的 Plugin 並不需要改動核心的程式，
但又可以増加一些功能。
Java 上的 InputStream 一樣採用這種模式去實現。</p>

<p>看看以下例子應該有助你明白這個模式:</p>

<!--more-->


<hr />

<p>公司要你開發一個手機用戶計費系統，因應用戶使用時間而去收費，
使用時間愈多折扣亦愈多。而用戶亦有分普通用戶或 VIP 用戶，
VIP 用戶亦有更多折扣。</p>

<p>一開始你可能會設計成這樣:</p>

<p>{% include_code design-pattern-decorator/sample1/User.java %}
{% include_code design-pattern-decorator/sample1/MobilePayment.java %}
{% include_code design-pattern-decorator/sample1/Main.java %}</p>

<p><code>text 執行結果
Lawrence usage: 10000 minute, charge: 8640.0
Tony usage: 4000 minute, charge: 4320.0
</code></p>

<p>你可以看見所有計費的程式碼也在 <code>MobilePayment.charge</code> 內，如果再要增加計費條件
就要修改這個地方的程式碼。</p>

<hr />

<p>現在公司又要增加一些收費條件，因為提供額外的服務給公司客戶，需要收取額外 10% 服務費。
如果你只改動 <code>MobilePayment.charge</code> 內的程式碼，那愈來愈多條件時就難以維護，
現在我們使用 Decorator Pattern 去解決這些問題，收費條件亦可以隨時抽換。</p>

<p>{% img /downloads/code/design-pattern-decorator/sample2/uml.png %}</p>

<p>{% include_code design-pattern-decorator/sample2/User.java %}
{% include_code design-pattern-decorator/sample2/Payment.java %}
{% include_code design-pattern-decorator/sample2/BasicMobilePayment.java %}
{% include_code design-pattern-decorator/sample2/AdditionalPayment.java %}
{% include_code design-pattern-decorator/sample2/UsageAmountPayment.java %}
{% include_code design-pattern-decorator/sample2/VIPPayment.java %}
{% include_code design-pattern-decorator/sample2/CompanyPayment.java %}
{% include_code design-pattern-decorator/sample2/Main.java %}</p>

<p><code>text 執行結果
Lawrence usage: 10000 minute, charge: 8640.0
Tony usage: 4000 minute, charge: 4320.0
ABC Company usage: 10000 minute, charge: 10560.0
</code></p>

<p>這樣就可以隨時新增條件或移除條件而又不會影響到核心的程式碼。</p>

<hr />

<p>以下的圖片是描述 Singleton Pattern 的 Class Diagram。（From Wiki）</p>

<p>{% img http://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Decorator_UML_class_diagram.svg/400px-Decorator_UML_class_diagram.svg.png %}</p>
]]></content>
  </entry>
  
</feed>
