<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Filter | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/filter/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-03-26T22:10:22+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Google Closure Compiler 在執行期間壓縮 Javascript]]></title>
    <link href="http://pro.ctlok.com/2011/10/closure-compiler-run-time-compress.html"/>
    <updated>2011-10-21T14:16:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/10/closure-compiler-run-time-compress</id>
    <content type="html"><![CDATA[<p>趁有空又寫寫文章，今次介紹的是 <b>Google Closure Compiler</b>，其實之前已經介紹過一次: <a href="http://pro.ctlok.com/2010/01/javascript_22.html">線上 <b>Javascript</b> 工具</a>，這個工具可以將 <b>Javascript</b> 的大小大幅降低。<br /><br />使用線上工具去壓縮有一個缺點就是要將 <b>Javascript</b> 檔案儲存成 <b>2</b> 份，1 份是原始檔案，另 1 份是經壓縮內容的 <b>Javascript</b>，因為不可能更改經壓縮過的內容，每一次更改檔案就需要更改原始檔案，然後利用 <b>Google Closure Compiler</b> 線上工具再壓縮一次，再更新壓縮內容，而且經壓縮的 <b>Javascript</b> 在瀏覽器 <b>debug</b> 亦比較困難。雖然你可以在 <b>HTML</b> 將引入的 <b>Javascript</b> 檔案改為未經壓縮然後 <b>debug</b>，但萬一忘記改回就麻煩了。<br /><br />幸好 <b>Google Closure Compiler</b> 有提供到 <b>Java</b> 使用的 <b>API</b> 來達到執行期間 <b>(Run Time)</b> 將 <b>Javascript</b> 壓縮。<br /><br />首先到 <b>Google Code</b> 下載: <a href="http://code.google.com/p/closure-compiler/downloads/list">Google Closure Compiler</a><br /><br />可用以下其中一個方法去壓縮:<br /><pre class="brush: java">protected String compress(InputStream inputStream) throws IOException{<br />    Compiler compiler = new Compiler();<br />    <br />    CompilerOptions options = new CompilerOptions();<br />    CompilationLevel.SIMPLE_OPTIMIZATIONS<br />            .setOptionsForCompilationLevel(options);<br />    <br />    JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot; &quot;);<br />    JSSourceFile input = JSSourceFile.fromInputStream(&quot;origin.js&quot;, inputStream);<br />    compiler.compile(extern, input, options);<br />    <br />    return compiler.toSource();<br />}<br /><br />protected String compress(String str) throws IOException{<br />    Compiler compiler = new Compiler();<br />    <br />    CompilerOptions options = new CompilerOptions();<br />    CompilationLevel.SIMPLE_OPTIMIZATIONS<br />            .setOptionsForCompilationLevel(options);<br />    <br />    JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot; &quot;);<br />    JSSourceFile input = JSSourceFile.fromCode(&quot;origin.js&quot;, str);<br />    compiler.compile(extern, input, options);<br />    <br />    return compiler.toSource();<br />}<br /></pre><br />其中 CompilationLevel 分別有 3 個選項:<br /><ul><li>CompilationLevel.WHITESPACE_ONLY</li><li>CompilationLevel.SIMPLE_OPTIMIZATIONS</li><li>CompilationLevel.ADVANCED_OPTIMIZATIONS</li></ul><br /><b>WHITESPACE_ONLY</b> 只會移除 <b>Javascript</b> 的空白。<br /><br /><b>SIMPLE_OPTIMIZATIONS</b> 是最常用的一種，移除 <b>Javascript</b> 的空白，而且將一些 <b>Local Variable</b> 或 <b>Local Function</b> 名稱改變，並將一些沒有用到的 <b>Variable</b> 移除，大幅提高 <b>Javascript</b> 的壓縮率。<br /><br /><b>ADVANCED_OPTIMIZATIONS</b> 是最高壓縮率的模式，將所有 <b>Variable</b> 或 <b>Function</b> 的名稱改變，有使用 <b>Javascript Framework</b> 不建議使用這個選項。<br /><br />在真實環境中我們可以加入一個 <b>Filter</b> 去將 <b>Javascript</b> 壓縮:<br /><pre class="brush: js">package com.ctlok.pro.filter;<br /><br />import java.io.IOException;<br />import java.io.InputStream;<br />import java.util.HashMap;<br />import java.util.Map;<br />import java.util.logging.Level;<br /><br />import javax.servlet.Filter;<br />import javax.servlet.FilterChain;<br />import javax.servlet.FilterConfig;<br />import javax.servlet.ServletException;<br />import javax.servlet.ServletRequest;<br />import javax.servlet.ServletResponse;<br />import javax.servlet.http.HttpServletRequest;<br />import javax.servlet.http.HttpServletResponse;<br /><br />import com.google.javascript.jscomp.CompilationLevel;<br />import com.google.javascript.jscomp.Compiler;<br />import com.google.javascript.jscomp.CompilerOptions;<br />import com.google.javascript.jscomp.JSSourceFile;<br />import com.google.javascript.jscomp.WarningLevel;<br /><br />public class ClosureCompilerFilter implements Filter {<br /><br />    //for cache<br />    private final Map&lt;String, String&gt; compressedJs = new HashMap&lt;String, String&gt;();<br />    private FilterConfig filterConfig;<br />    <br />    public void init(FilterConfig filterConfig) throws ServletException {<br />        this.filterConfig = filterConfig;<br />        <br />        //Turn off the compiler log<br />        Compiler.setLoggingLevel(Level.OFF);<br />    }<br /><br />    public void destroy() {<br /><br />    }<br /><br />    public void doFilter(ServletRequest request, ServletResponse response,<br />            FilterChain chain) throws IOException, ServletException {<br />        <br />        HttpServletRequest req = (HttpServletRequest) request;<br />        HttpServletResponse resp = (HttpServletResponse) response;<br />        <br />        String uri = req.getRequestURI();<br />        <br />        //Prevent compress the compressed Javascript, such as jquery.min.js, mootools.min.js, etc.<br />        if (!uri.matches(&quot;.<em>\.min\.js$&quot;)){<br />            String js = null;<br />            <br />            if (compressedJs.containsKey(uri)){<br />                //get from cache<br />                js = compressedJs.get(uri);<br />            }else{<br />                String contextPath = req.getContextPath();<br />                String jsPath = uri.substring(contextPath.length());<br />                <br />                //get javascript file as stream<br />                //getResourceAsStream cannot include context path<br />                InputStream inputStream = filterConfig.getServletContext().getResourceAsStream(jsPath);<br />                js = compress(inputStream);<br />                <br />                //put to cache<br />                compressedJs.put(uri, js);<br />            }<br />            <br />            resp.getWriter().write(js);<br />            return;<br />        }<br />        <br />        chain.doFilter(request, response);<br />    }<br />    <br />    protected String compress(InputStream inputStream) throws IOException{<br />        Compiler compiler = new Compiler();<br />        <br />        CompilerOptions options = new CompilerOptions();<br />        CompilationLevel.SIMPLE_OPTIMIZATIONS<br />                .setOptionsForCompilationLevel(options);<br />        WarningLevel.QUIET.setOptionsForWarningLevel(options);<br />        <br />        JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot;&quot;);<br />        JSSourceFile input = JSSourceFile.fromInputStream(&quot;origin.js&quot;, inputStream);<br />        compiler.compile(extern, input, options);<br /><br />        return compiler.toSource();<br />    }<br /><br />}<br /></pre><br />在 web.xml 加上:<br /><pre class="brush: xml">&lt;filter&gt;<br />    &lt;display-name&gt;ClosureCompilerFilter&lt;/display-name&gt;<br />    &lt;filter-name&gt;ClosureCompilerFilter&lt;/filter-name&gt;<br />    &lt;filter-class&gt;com.ctlok.pro.filter.ClosureCompilerFilter&lt;/filter-class&gt;<br />&lt;/filter&gt;<br />&lt;filter-mapping&gt;<br />    &lt;filter-name&gt;ClosureCompilerFilter&lt;/filter-name&gt;<br />    &lt;url-pattern&gt;</em>.js&lt;/url-pattern&gt;<br />&lt;/filter-mapping&gt;<br /></pre><br />這樣就可以令到 <b>.js</b> 結尾的 <b>Javascript</b> 檔案經壓縮再傳出去，又不會將 <b>.min.js</b> 已經壓縮過的 <b>Javascript</b> 又再壓縮一次。<br />經過壓縮後會儲存在 <b>Map</b> 內，畢竟壓縮的時間也不短。<br /><br />例如我有一個 /js/myjs.js 的檔案:<br /><pre class="brush: js">function ctlok() {<br />    var self = this;<br />    var $ = jQuery;<br /><br />     this.publicFunction = function() {<br />           localFunction();<br />      };<br /><br />     var localFunction = function() {<br />          var aaaaa = &#39;aaaaa&#39;;<br />          $(&#39;:input&#39;).val(aaaaa);<br />     };<br />}<br /></pre><br />經壓縮後變成:<br /><pre class="brush: js">function ctlok(){var a=jQuery;this.publicFunction=function(){a(&quot;:input&quot;).val(&quot;aaaaa&quot;)}};<br /></pre><br />範例下載:: <a href="https://sites.google.com/site/lawrencespace/lawpronotes/download/Google-Closure-Compiler.zip">Google-Closure-Compiler.zip</a><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-3261921414800777822?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Filter 強制將頁面轉成 UTF-8 編碼]]></title>
    <link href="http://pro.ctlok.com/2010/07/spring-filter-utf-8-encode.html"/>
    <updated>2010-07-19T20:14:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/07/spring-filter-utf-8-encode</id>
    <content type="html"><![CDATA[<p>網頁亂碼的問題一直是一個非常困擾的問題，明明在自己的電腦測試時還好好的，當放上伺服器時又會出現亂碼。有時就算是網頁頁面使用了 <b>UTF-8</b> 編碼也不能解決問題，原因是伺服器後台程式輸出的文字不是以  <b>UTF-8</b> 編碼。要一一解決這些問題實在是非常浪費時間。<br /><br />如果你有使用到 <b>Spring Framework</b> 的話，你可以試試使用 <b>Spring Framework</b> 內建的 <b>Filter</b> 去將頁面所有字串轉換成 <b>UTF-8</b> 編碼，以解決亂碼問題。我在 <b>Google App Engine</b> 上開發的應用程式也有亂碼問題，將頁面所有字串轉換成 <b>UTF-8</b> 編碼後便解決了所有亂碼問題。<br /><br />首先在 web.xml 加上 Filter:<br /><pre class="brush: xml;">&lt;filter&gt;<br />    &lt;filter-name&gt;<br />        encodingFilter<br />    &lt;/filter-name&gt;<br />    &lt;filter-class&gt;<br />        org.springframework.web.filter.CharacterEncodingFilter<br />    &lt;/filter-class&gt;<br />    &lt;init-param&gt;<br />        &lt;param-name&gt;<br />            encoding<br />        &lt;/param-name&gt;<br />        &lt;param-value&gt;<br />            UTF-8<br />        &lt;/param-value&gt;<br />    &lt;/init-param&gt;<br />    &lt;init-param&gt;<br />        &lt;param-name&gt;<br />            forceEncoding<br />        &lt;/param-name&gt;<br />        &lt;param-value&gt;<br />            true<br />        &lt;/param-value&gt;<br />    &lt;/init-param&gt;<br />&lt;/filter&gt;<br />&lt;filter-mapping&gt;<br />    &lt;filter-name&gt;<br />        encodingFilter<br />    &lt;/filter-name&gt;<br />    &lt;url-pattern&gt;<br />        /*<br />    &lt;/url-pattern&gt;<br />&lt;/filter-mapping&gt;<br /></pre><br />有一點要記的是 <b>CharacterEncodingFilter</b> 一定要是第一個 <b>Filter</b>。之後要加的 <b>Filter</b> 要加在下面。<br /><br />所有 <b>JSP </b> 頁面亦要以 <b>UTF-8</b> 編碼，在 <b>JSP </b> 頁面加上以下程式碼:<br /><pre class="brush: text">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; %&gt;<br /></pre><br />在 <b>HTML</b> 的 <b>head</b> 亦要加上以下程式碼提示瀏覽器此頁面用 <b>UTF-8</b> 編碼。<br /><pre class="brush: html">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;<br /></pre><br />這樣就可以解決亂碼問題了。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Spring-Recipes-Problem-Solution-Gary-Mak/dp/1590599799?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Spring Recipes: A Problem-Solution Approach" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1590599799&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1590599799" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Spring-Action-Craig-Walls/dp/1933988134?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Spring in Action" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1933988134&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1933988134" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Beginning-Java-trade-Platform-GlassFish/dp/1430219548?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Beginning Java&amp;trade; EE 6 Platform with GlassFish&amp;trade; 3: From Novice to Professional" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1430219548&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1430219548" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-517070873543919211?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
