<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/c-/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-03-29T10:46:38+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adjacency Matrix Network Shortest Path]]></title>
    <link href="http://pro.ctlok.com/2010/01/adjacency-matrix-network-shortest-path.html"/>
    <updated>2010-01-23T19:17:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/01/adjacency-matrix-network-shortest-path</id>
    <content type="html"><![CDATA[<p><span style="color: red;"><b>這只是大學的習作</b></span><br /><br />今次的 Adjacency Matrix Network 加進了新的功能<br /><ul><li>可以找出最短路徑</li><li>讀取文字檔來輸入路徑訊息</li><li>GUI</li></ul><div>GUI 使用了 WPF 技術<br /></div><br />原始碼:<br /><br />AM_Network<br /><pre class="brush: csharp">using System;<br />using System.Collections.Generic;<br />using System.Text;<br />using System.IO;<br /><br />namespace NetworkLibrary<br />{<br />    public class AM_Network : Network<br />    {<br />        //Define the large number for shortest path function node init value<br />        private const int <em>LargeNumber = 5000000;<br />        private int [ , ] </em>LinkMatrix; // the adjacency matrix<br /><br />        public int LargeNumber<br />        {<br />            get { return <em>LargeNumber; }<br />        }<br /><br />        public int[,] LinkMatrix<br />        {<br />            get { return </em>LinkMatrix; }<br />        }<br /><br />        // constructor to create an AM Network with given number of nodes and adjacency matrix<br />        // raise TypeLoadException if something wrong with the input data<br />        // Note : We could define our own exceptions, but have chosen not to do so<br />        public AM_Network(int numNodes, int[ , ] theMatrix)<br />        {<br />            if (numNodes &lt;= 0)<br />                throw new TypeLoadException("Must have positive number of nodes");<br />            else<br />                <em>Size = numNodes; <br />            if ((theMatrix.GetLength(0) != numNodes) || (theMatrix.GetLength(1) != numNodes))<br />                throw new TypeLoadException("Array size not the same as number of nodes");<br />            else<br />                </em>LinkMatrix = theMatrix;<br />        }<br /><br />        public AM_Network(string fileName)<br />        {<br />            //handel file not found<br />            if (!File.Exists(fileName))<br />                throw new FileNotFoundException("File do not exists");<br /><br />            int lineNumber = 0;<br /><br />            try<br />            {<br />                /<strong><br />                 * Starting read the text file<br />                 * trim each line<br />                 * convert the first line string to integer<br />                 * init the martrix<br />                 */<br />                FileStream input = new FileStream(fileName, FileMode.Open, FileAccess.Read);<br />                StreamReader fileReader = new StreamReader(input);<br />                string line = fileReader.ReadLine().Trim();<br />                lineNumber++;<br />                <em>Size = Convert.ToInt32(line);<br />                </em>LinkMatrix = new int[Size, Size];<br /><br /><br />                for (int i = 0; i &lt; Size; i++)<br />                {<br />                    /</strong><br />                     * Read line<br />                     * Checking line have a data<br />                     * Checking number of integer is same to matrix size<br />                     * if not same to matrix size will throw exception<br />                     <em>/<br /><br />                    lineNumber++;<br />                    line = fileReader.ReadLine();<br />                    if (line == null)<br />                        throw new MatrixNotCorrectException();<br /><br />                    string[] tempArray = line.Split(',');<br /><br />                    if (tempArray.Length &gt; Size || tempArray.Length &lt; Size)<br />                        throw new MatrixNotCorrectException();<br /><br />                    for (int ii = 0; ii &lt; tempArray.Length; ii++)<br />                        <em>LinkMatrix[i, ii] = Convert.ToInt32(tempArray[ii]);<br />                }<br /><br />                //Close the reader and streaming<br />                fileReader.Close();<br />                input.Close();<br />            }<br />            catch (FormatException)<br />            {<br />                throw new FormatException("Number format error in line " + lineNumber);<br />            }<br />            catch (Exception ex)<br />            {<br />                throw new Exception(ex.Message + " in line " + lineNumber);<br />            }<br />        }<br /><br />        // return the number of links in the network<br />        public override int NumberOfLinks()<br />        {<br />            int result = 0;<br />            // just count the number of non-zero elements in the adjacency matrix<br />            foreach (int element in </em>LinkMatrix)<br />                if (element != 0)<br />                    result++;<br />            return result;<br />        }<br /><br />        // return the out-degree of node aNode in the network<br />        public override int OutDegree(int aNode)<br />        {<br />            if (aNode &gt; Size)<br />                throw new NonExistentNodeException();<br /><br />            int result = 0;<br />            // count the number of non-zero entries in row aNode of the adjacency matrix<br />            for (int j = 0; j &lt; Size; j++)<br />                if (<em>LinkMatrix[aNode,j] != 0)<br />                    result++;<br />            return result;<br />        }<br /><br />        // return the in-degree of node aNode in the network<br />        public override int InDegree(int aNode)<br />        {<br />            if (aNode &gt; Size)<br />                throw new NonExistentNodeException();<br /><br />            int result = 0;<br />            // count the number of non-zero entries in column aNode of the adjacency matrix<br />            for (int j = 0; j &lt; Size; j++)<br />                if (</em>LinkMatrix[j, aNode] != 0)<br />                    result++;<br />            return result;<br />        }<br /><br />        // return the list of nodes reachable from aNode in this network<br />        // less detailed comments than in class LL_Network<br /><br />        public override List&lt;int&gt; ReachableFrom(int aNode)<br />        {<br />            if (aNode &gt; Size)<br />                throw new NonExistentNodeException();<br /><br />            List&lt;int&gt; result = new List&lt;int&gt;();<br /><br />            // set up 3 Boolean arrays to hold information about newly connected nodes<br />            Boolean[] selectedNodes = new Boolean[Size];<br />            Boolean[] selectedOnThisPass = new Boolean[Size];<br />            Boolean[] selectedOnLastPass = new Boolean[Size];<br /><br /><br />            // set up a Boolean variable to record if any new nodes were selected on the last pass<br />            Boolean wasNew;<br /><br />            // start off by selecting node aNode itself on the first pass<br />            selectedNodes[aNode] = true;<br />            selectedOnThisPass[aNode] = true;<br />            wasNew = true;<br /><br />            // now check over all the nodes added on the last pass to see if <br />            // any new nodes are connectable to them, and hence to aNode<br />            // only do this if there were nodes added on the last pass<br /><br />            // stop when no new node was added on last pass<br />            while (wasNew)<br />            {<br />                // first copy the "selected on this pass" from last pass to "selected on last path" for this pass<br />                // and reset "selected on this path" to all false<br />                for (int i = 0; i &lt; selectedOnLastPass.Length; i++)<br />                    selectedOnLastPass[i] = selectedOnThisPass[i];<br />                for (int i = 0; i &lt; selectedOnThisPass.Length; i++)<br />                    selectedOnThisPass[i] = false;<br />                // reset wasNew to false at the start of the pass<br />                wasNew = false;<br />                for (int i = 0; i &lt; Size; i++)<br />                {<br />                    // if l.From was added to the connected nodes on the last pass<br />                    // and l.To is not yet connected, then signal that l.To is now<br />                    // connected, and that it has been connected on this pass;<br />                    // also indicate that a new node has been connected<br />                    if (selectedOnLastPass[i])<br />                        for (int j = 0; j &lt; Size; j++)<br />                            if ((<em>LinkMatrix[i,j] != 0) &amp;&amp; !selectedNodes[j])<br />                            {<br />                                selectedNodes[j] = true;<br />                                selectedOnThisPass[j] = true;<br />                                wasNew = true;<br />                            }<br />                }<br />            }<br /><br />            // now build the list that is to be returned by scanning the array selectedNodes<br />            for (int i = 0; i &lt; selectedNodes.Length; i++)<br />                if (selectedNodes[i])<br />                    result.Add(i);<br />            return result;<br />        }<br /><br />        // return string representation of the network<br />        public override string ToString()<br />        {<br />            string result = "&lt;";<br />            string theMatrix = "";<br />            for (int i = 0; i &lt; Size; i++)<br />            {<br />                theMatrix +=  "|";<br />                for (int j = 0; j &lt; Size; j++)<br />                {<br />                    theMatrix += "  " +</em>LinkMatrix[i,j];<br />                    if (j == (Size-1))<br />                        theMatrix += "|\n";<br />                }<br />            }<br />            result += Size.ToString() + ",\n" + theMatrix + "&gt;";<br />            return result;<br /><br />        }<br /><br />        // return the network in LL form<br />        public LL_Network To_LL()<br />        {<br />            List&lt;Link&gt; Links = new List&lt;Link&gt;();<br />            // for each row in the adjacency matrix, build link objects and add to Links<br />            for (int i = 0; i &lt; Size; i++)<br />                for (int j = 0; j &lt; Size; j++)<br />                    if (<em>LinkMatrix[i,j] != 0)<br />                    {<br />                        Link l = new Link(i,j,</em>LinkMatrix[i,j]);<br />                        Links.Add(l);<br />                    }<br />            LL_Network result = new LL_Network(Size, Links);<br />            return result;<br />        }<br /><br />        public List&lt;NetworkLibrary.Path&gt; shortestPaths(int startNode)<br />        {<br />            if (startNode &gt; Size)<br />                throw new NonExistentNodeException();<br /><br />            List&lt;Path&gt; pathList = new List&lt;Path&gt;();<br /><br />            /</em>for (int i = 0; i &lt; Size; i++)<br />            {<br />                pathList.Add(shortestPaths(startNode, i)[0]);<br />            }<em>/<br /><br />            /**<br />             * Define the node value<br />             * Define node shortest neighbour<br />             * Init the value and shortedt neighbor<br />             </em>/<br />            bool[] nodeVisited = new bool[Size];<br />            int[] nodesValue = new int[Size];<br />            int[] nodesShortesNeighbour = new int[Size];<br /><br />            for (int i = 0; i &lt; Size; i++)<br />            {<br />                nodeVisited[i] = false;<br />                nodesValue[i] = LargeNumber;<br />                nodesShortesNeighbour[i] = -1;<br />            }<br /><br />            //self node value is 0<br />            nodesValue[startNode] = 0;<br /><br />            List&lt;int&gt; checkNodeList = new List&lt;int&gt;();<br />            checkNodeList.Add(startNode);<br /><br /><br />            //If checkNodeList have data will continue the looping<br />            while (checkNodeList.Count &gt; 0)<br />            {<br />                /<em><em><br />                 * Checking this node was check or not<br />                 * if has been check will remove that<br />                 </em>/<br />                if (nodeVisited[checkNodeList[0]] == false)<br />                {<br />                    //check current node all out going link<br />                    for (int i = 0; i &lt; Size; i++)<br />                    {<br />                        //Checking which link is link to other node<br />                        if (<em>LinkMatrix[checkNodeList[0], i] &gt; 0)<br />                        {<br />                            //Checking this link weight is it less than the last value<br />                            if ((</em>LinkMatrix[checkNodeList[0], i] + nodesValue[checkNodeList[0]]) &lt; nodesValue[i])<br />                            {<br />                                //Assign the new value into destination node value<br />                                //Destination node shortest neighbor is current node<br />                                //Put the destination node into check list<br />                                //Updated node should be check again<br />                                nodesValue[i] = <em>LinkMatrix[checkNodeList[0], i] + nodesValue[checkNodeList[0]];<br />                                nodesShortesNeighbour[i] = checkNodeList[0];<br />                                checkNodeList.Add(i);<br />                                nodeVisited[i] = false;<br />                            }<br />                        }<br />                    }<br />                    nodeVisited[checkNodeList[0]] = true;<br />                }<br />                else<br />                {<br />                    checkNodeList.RemoveAt(0);<br />                }<br />            }<br /><br /><br />            //Checking end node is reachable<br />            for (int i = 0; i &lt; Size; i++)<br />            {<br />                if (nodesValue[i] &lt; LargeNumber)<br />                {<br />                    List&lt;int&gt; nodeList = new List&lt;int&gt;();<br />                    Path path = new Path();<br />                    int currentNode = i;<br /><br />                    //From end node to start node to fine the shortest path<br />                    while (currentNode != startNode)<br />                    {<br />                        nodeList.Add(currentNode);<br />                        currentNode = nodesShortesNeighbour[currentNode];<br />                    }<br />                    nodeList.Add(startNode);<br /><br />                    //Reverse the list<br />                    //Start node in list index 0<br />                    nodeList.Reverse();<br />                    path.NodeList = nodeList;<br />                    path.Length = nodesValue[i];<br />                    pathList.Add(path);<br />                }<br />                else<br />                {<br />                    //End Node unreachable should return the LargeNumber path length<br />                    Path path = new Path();<br />                    path.NodeList = null;<br />                    path.Length = LargeNumber;<br />                    pathList.Add(path);<br />                }<br />            }<br /><br />            return pathList;<br />        }<br /><br />        public List&lt;NetworkLibrary.Path&gt; shortestPaths(int startNode, int endNode)<br />        {<br />            if (startNode &gt; Size || endNode &gt; Size)<br />                throw new NonExistentNodeException();<br /><br />            List&lt;Path&gt; pathList = new List&lt;Path&gt;();<br />            pathList.Add(shortestPaths(startNode)[endNode]);<br />            return pathList;<br />        }<br />    }<br />    <br />}<br /></pre><br />Path:<br /><pre class="brush: csharp">using System;<br />using System.Collections.Generic;<br />using System.Text;<br /><br />namespace NetworkLibrary<br />{<br />    public class Path<br />    {<br />        private List&lt;int&gt; </em>NodeList;<br />        private int <em>Length;<br /><br />        public int Length<br />        {<br />            get { return </em>Length; }<br />            set { <em>Length = value; }<br />        }<br /><br />        public List&lt;int&gt; NodeList<br />        {<br />            get { return </em>NodeList; }<br />            set { _NodeList = value; }<br />        }<br />    }<br />}<br /></pre><br />Windows.xaml:<br /><pre class="brush: xml">&lt;Window x:Class="NetworkView.Window1"<br />    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"<br />    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"<br />    Title="Window1" Width="680" Height="768" WindowStyle="ToolWindow" ResizeMode="NoResize"&gt;<br />    &lt;Grid&gt;<br />        &lt;Grid Height="41.675" Margin="13.336,12,280.056,0" Name="grid1" VerticalAlignment="Top"&gt;<br />            &lt;TextBox Margin="37,9.994,170.034,8.335" Name="fileName" IsReadOnly="True" /&gt;<br />            &lt;Button  Margin="0,9.994,88.351,9.476" Name="btnBrowse" Click="browseTextFile" HorizontalAlignment="Right" Width="76"&gt;Browse&lt;/Button&gt;<br />            &lt;Label HorizontalAlignment="Left" Margin="-1.336,9.003,0,6" Name="label1" Width="37"&gt;File:&lt;/Label&gt;<br />            &lt;Button HorizontalAlignment="Right" Margin="0,9.994,6,9.476" Name="btnConfirm" Width="76" Click="confirm"&gt;Confirm&lt;/Button&gt;<br />        &lt;/Grid&gt;<br />        &lt;Canvas Width="630" Height="630" Margin="12,86.684,12,12" Name="cvsNodeView"&gt;&lt;/Canvas&gt;<br />        &lt;Grid Height="68" Margin="0,12,12,0" Name="grid2" VerticalAlignment="Top" HorizontalAlignment="Right" Width="261.719"&gt;<br />            &lt;ComboBox Margin="70.014,5.001,6,0" Name="cmbFromNode" Height="22.991" VerticalAlignment="Top" /&gt;<br />            &lt;Label HorizontalAlignment="Left" Margin="0,5.001,0,0" Name="label2" Width="63" Height="24.658" VerticalAlignment="Top"&gt;From:&lt;/Label&gt;<br />            &lt;Label Margin="0,34,0,12" Name="label3" HorizontalAlignment="Left" Width="64" Height="24.658" FlowDirection="LeftToRight"&gt;To:&lt;/Label&gt;<br />            &lt;ComboBox Margin="70.014,0,6,11.669" Name="cmbToNode" Height="22" VerticalAlignment="Bottom" /&gt;<br />        &lt;/Grid&gt;<br />    &lt;/Grid&gt;<br />&lt;/Window&gt;<br /></pre><br />Window.xaml.cs:<br /><pre class="brush: csharp">using System;<br />using System.Collections.Generic;<br />using System.Linq;<br />using System.Text;<br />using System.Windows;<br />using System.Windows.Controls;<br />using System.Windows.Data;<br />using System.Windows.Documents;<br />using System.Windows.Input;<br />using System.Windows.Media;<br />using System.Windows.Media.Imaging;<br />using System.Windows.Navigation;<br />using System.Windows.Shapes;<br />using System.IO;<br />using NetworkLibrary;<br /><br />namespace NetworkView<br />{<br />    /// &lt;summary&gt;<br />    /// Interaction logic for Window1.xaml<br />    /// &lt;/summary&gt;<br />    public partial class Window1 : Window<br />    {<br />        private AM_Network AN;<br />        private List&lt;Ellipse&gt; ellipses;<br />        private TextBlock txtPathLength;<br />        private Line[,] lines;<br />        public Window1()<br />        {<br />            InitializeComponent();<br />            ellipses = new List&lt;Ellipse&gt;();<br />            txtPathLength = new TextBlock();<br />        }<br /><br />        private void browseTextFile(object sender, RoutedEventArgs e)<br />        {<br />            Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();<br /><br />            // Set filter for file extension and default file extension<br />            dlg.DefaultExt = ".txt";<br />            dlg.Filter = "Text File (.txt) | </em>.txt";<br /><br />            // Display OpenFileDialog by calling ShowDialog method<br />            Nullable&lt;bool&gt; result = dlg.ShowDialog();<br /><br />            // Get the selected file name and display in a TextBox<br />            if (result == true)<br />            {<br />                // Open document<br />                string filename = dlg.FileName;<br />                fileName.Text = filename;<br />            }<br />        }<br /><br />        private void confirm(object sender, RoutedEventArgs e)<br />        {<br />            try<br />            {<br />                //Create a AM Network<br />                AN = new AM_Network(fileName.Text);<br /><br />                //Clear all remain data<br />                cmbFromNode.SelectionChanged -= updateShortestPath;<br />                cmbToNode.SelectionChanged -= updateShortestPath;<br />                cmbFromNode.Items.Clear();<br />                cmbToNode.Items.Clear();<br />                cvsNodeView.Children.Clear();<br /><br />                //Add node into component<br />                for (int i = 0; i &lt; AN.Size; i++)<br />                {<br />                    ComboBoxItem cmbFromNodeItem = new ComboBoxItem();<br />                    ComboBoxItem cmbToNodeItem = new ComboBoxItem();<br />                    cmbFromNodeItem.Content = "Node " + i;<br />                    cmbToNodeItem.Content = "Node " + i;<br />                    cmbFromNode.Items.Add(cmbFromNodeItem);<br />                    cmbToNode.Items.Add(cmbToNodeItem);<br />                }<br /><br />                //Draw a node view and link<br />                drawNodeView();<br />                cmbFromNode.SelectedIndex = 0;<br />                cmbToNode.SelectedIndex = 0;<br /><br />                //Set the combox changed action<br />                cmbFromNode.SelectionChanged += updateShortestPath;<br />                cmbToNode.SelectionChanged += updateShortestPath;<br />            }<br />            catch (Exception ex)<br />            {<br />                MessageBox.Show(ex.Message, "Error");<br />            }<br />        }<br /><br />        private void drawNodeView()<br />        {<br />            double w = cvsNodeView.Width &gt;= cvsNodeView.Height ? cvsNodeView.Height : cvsNodeView.Width;<br />            double nodeSize = cvsNodeView.Width / AN.Size * 0.7;<br /><br />            //Draw a link first<br />            lines = new Line[AN.LinkMatrix.GetLength(0), AN.LinkMatrix.GetLength(0)];<br />            for (int i = 0; i &lt; AN.LinkMatrix.GetLength(0); i++)<br />            {<br />                //Define the x, y from current node<br />                double x1 = (w / 2 - nodeSize / 2) - (w / 2 - nodeSize / 2) * Math.Cos(2 * Math.PI * i / AN.Size) + nodeSize / 2;<br />                double y1 = (w / 2 - nodeSize / 2) - (w / 2 - nodeSize / 2) * Math.Sin(2 * Math.PI * i / AN.Size) + nodeSize / 2;<br />                for (int ii = i; ii &lt; AN.LinkMatrix.GetLength(0); ii++)<br />                {<br />                    if (AN.LinkMatrix[i, ii] &gt; 0)<br />                    {<br />                        Line myLine = new Line();<br />                        myLine.X1 = x1;<br />                        myLine.Y1 = y1;<br /><br />                        //Set the x2, y2 to destination node<br />                        myLine.X2 = (w / 2 - nodeSize / 2) - (w / 2 - nodeSize / 2) * Math.Cos(2 * Math.PI * ii / AN.Size) + nodeSize / 2;<br />                        myLine.Y2 = (w / 2 - nodeSize / 2) - (w / 2 - nodeSize / 2) * Math.Sin(2 * Math.PI * ii / AN.Size) + nodeSize / 2;<br /><br />                        //line style<br />                        myLine.StrokeThickness = 2;<br />                        myLine.Stroke = Brushes.Black;<br /><br />                        //Add to canvas<br />                        cvsNodeView.Children.Add(myLine);<br /><br />                        //Store the line reference for fine shortest path to change color<br />                        lines[i, ii] = myLine;<br />                        lines[ii, i] = myLine;<br /><br />                        //Add the text block to the line center<br />                        TextBlock txtLinkWeight = new TextBlock();<br />                        txtLinkWeight.Text = AN.LinkMatrix[i, ii].ToString();<br />                        txtLinkWeight.FontSize = nodeSize / 4;<br />                        txtLinkWeight.Foreground = Brushes.Black;<br />                        txtLinkWeight.Background = Brushes.White;<br />                        Canvas.SetLeft(txtLinkWeight, (myLine.X1 &gt;= myLine.X2) ? myLine.X1 - ((myLine.X1 - myLine.X2) / 2) : myLine.X2 - ((myLine.X2 - myLine.X1) / 2));<br />                        Canvas.SetTop(txtLinkWeight, (myLine.Y1 &gt;= myLine.Y2) ? myLine.Y1 - ((myLine.Y1 - myLine.Y2) / 2) : myLine.Y2 - ((myLine.Y2 - myLine.Y1) / 2));<br />                        cvsNodeView.Children.Add(txtLinkWeight);<br />                    }<br />                }<br />            }<br /><br />            //Draw a Node<br />            for (int i = 0; i &lt; AN.Size; i++)<br />            {<br /><br />                //Define the ellipse x and y<br />                double ellipseX = (w / 2 - nodeSize / 2) - (w / 2 - nodeSize / 2) * Math.Cos(2 * Math.PI * i / AN.Size);<br />                double ellipseY = (w / 2 - nodeSize / 2) - (w / 2 - nodeSize / 2) * Math.Sin(2 * Math.PI * i / AN.Size);<br /><br />                //Set ellipse color<br />                Ellipse myEllipse = new Ellipse();<br />                myEllipse.Fill = Brushes.Black;<br /><br />                // Set the width and height of the Ellipse.<br />                myEllipse.Width = nodeSize;<br />                myEllipse.Height = nodeSize;<br /><br />                //Set the ellipse x and y in canvas<br />                Canvas.SetLeft(myEllipse, ellipseX);<br />                Canvas.SetTop(myEllipse, ellipseY);<br /><br />                //Add ellipse to canvas and ellipse list<br />                cvsNodeView.Children.Add(myEllipse);<br />                ellipses.Add(myEllipse);<br /><br />                //Create a text block to display the node number<br />                TextBlock txtNodeNumber = new TextBlock();<br />                txtNodeNumber.Text = i.ToString();<br />                txtNodeNumber.FontSize = nodeSize / 3;<br />                txtNodeNumber.Foreground = Brushes.White;<br />                Canvas.SetLeft(txtNodeNumber, (ellipseX + nodeSize / 2) - txtNodeNumber.FontSize / 2);<br />                Canvas.SetTop(txtNodeNumber, (ellipseY + nodeSize / 2) - txtNodeNumber.FontSize / 2);<br />                cvsNodeView.Children.Add(txtNodeNumber);<br />            }<br />        }<br /><br />        private void updateShortestPath(object sender, SelectionChangedEventArgs e)<br />        {<br />            try<br />            {<br />                //Call the shortest path function<br />                List&lt;NetworkLibrary.Path&gt; path = AN.shortestPaths(cmbFromNode.SelectedIndex, cmbToNode.SelectedIndex);<br />                if (path[0].Length &lt; AN.LargeNumber)<br />                {<br />                    List&lt;int&gt; nodeList = path[0].NodeList;<br />                    int previousNode = -1;<br />                    resumeToNormal();<br /><br />                    //Change the start node color<br />                    ellipses[cmbFromNode.SelectedIndex].Fill = Brushes.DarkRed;<br />                    previousNode = nodeList[0];<br />                    for (int i = 1; i &lt; nodeList.Count; i++)<br />                    {<br />                        //Change the next node and line color<br />                        ellipses[nodeList[i]].Fill = Brushes.DarkRed;<br />                        lines[previousNode, nodeList[i]].Stroke = Brushes.Red;<br />                        previousNode = nodeList[i];<br />                    }<br /><br />                    //Display the path length<br />                    txtPathLength.Text = "Path Length: " + path[0].Length;<br />                    txtPathLength.FontSize = 20;<br />                    txtPathLength.Foreground = Brushes.Black;<br />                    cvsNodeView.Children.Add(txtPathLength);<br />                }<br />            }<br />            catch (Exception ex)<br />            {<br />                MessageBox.Show(ex.Message);<br />            }<br />        }<br /><br />        private void resumeToNormal()<br />        {<br />            //All line should resume resume to black color<br />            for (int i = 0; i &lt; lines.GetLength(0); i++)<br />            {<br />                for (int ii = 0; ii &lt; lines.GetLength(0); ii++)<br />                {<br />                    Line myLine = lines[i, ii];<br />                    if (myLine != null)<br />                        myLine.Stroke = Brushes.Black;<br />                }<br />            }<br /><br />            //All node should resume to black color<br />            for (int i = 0; i &lt; ellipses.Count; i++)<br />            {<br />                ellipses[i].Fill = Brushes.Black;<br />            }<br /><br />            //Remove the path length text block<br />            cvsNodeView.Children.Remove(txtPathLength);<br />        }<br /><br />    }<br />}<br /></pre><br />文字檔:<br /><pre class="brush: text">7<br />0,3429,0,0,0,3050,4250<br />3429,0,982,0,0,0,0<br />0,982,0,288,1040,0,0<br />0,0,288,0,657,0,0<br />0,0,1040,657,0,732,0<br />3050,0,0,0,732,0,2716<br />4250,0,0,0,0,2716,0<br /></pre><br />第一行是描述有多少個點<br />以下的都是描述路徑<br /><br />相閞書籍: <a href="http://www.amazon.com/WPF-Recipes-2008-Problem-Solution-Approach/dp/1430210842?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="WPF Recipes in C# 2008: A Problem-Solution Approach (Expert's Voice in .Net)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1430210842&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1430210842" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Pro-WPF-2008-Presentation-Professionals/dp/1590599551?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Pro WPF in C# 2008: Windows Presentation Foundation with .NET 3.5, Second Edition (Books for Professionals by Professionals)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1590599551&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1590599551" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Illustrated-WPF-Experts-Voice-Net/dp/1430219106?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Illustrated WPF (Expert's Voice in .Net)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1430219106&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1430219106" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-3030107223142511501?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINQ 配合 Regular Expression]]></title>
    <link href="http://pro.ctlok.com/2010/01/linq-regular-expression.html"/>
    <updated>2010-01-18T15:03:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/01/linq-regular-expression</id>
    <content type="html"><![CDATA[<p>LINQ 是 Microsoft .Net 的產物<br />擁有靈活的搜尋功能<br />如果將 LINQ&nbsp;配合 Regular Expression<br />更加方便和更有彈性<br /><br />以下的例子:<br /><br /><pre class="brush: csharp">using System;<br />using System.Collections.Generic;<br />using System.Linq;<br />using System.Text;<br />using System.Text.RegularExpressions;<br /><br />namespace LINQTest<br />{<br />    class Program<br />    {<br />        static void Main(string[] args)<br />        {<br />            string[] name = <br />            { "Ann", "Addison", "Peter", "John", <br />              "Lawrence", "Mary", "Barclay", "Buckley", <br />              "Dawn", "Leslie", "Queenie", "Palma",<br />              "Fatima", "Unaiza", "Karida", "Zarifa"<br />            };<br />            Regex pattern = new Regex("<sup>[laz]\w*[ea]$",</sup> RegexOptions.IgnoreCase);<br />            IEnumerable&lt;string&gt; nameList = name.Where(n =&gt; pattern.IsMatch(n));<br />            foreach (string filteredName in nameList)<br />                Console.WriteLine(filteredName);<br />            Console.ReadLine();<br />        }<br />    }<br />}<br /></pre><br />例如我想將 l, a, z 開頭和 e, a 結尾的名稱找出來<br />先設定好 Regular Expression Pattern<br /><br /><pre class="brush: csharp">new Regex("<sup>[laz]\w*[ea]$",</sup> RegexOptions.IgnoreCase);<br /></pre><br />RegexOptions.IgnoreCase 作用是不理英文字母是大寫還是小寫<br /><br /><pre class="brush: csharp">IEnumerable&lt;string&gt; nameList = name.Where(n =&gt; pattern.IsMatch(n));<br /></pre><br />如果條件附合便將 name 放到 nameList 內<br /><br />例子的執行結果是<br />Lawrence<br />Leslie<br />Zarifa<br /><br />相關書籍: <a href="http://www.amazon.com/Pro-LINQ-Language-Integrated-Windows-Net/dp/1590597893?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Pro LINQ: Language Integrated Query in C# 2008 (Windows.Net)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1590597893&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1590597893" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/LINQ-Unleashed-C-Paul-Kimmel/dp/0672329832?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="LINQ Unleashed: for C#" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0672329832&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0672329832" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Programming-Microsoft%C2%AE-PRO-Developer-Paolo-Pialorsi/dp/0735624003?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Programming Microsoft® LINQ (PRO-Developer)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0735624003&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0735624003" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-4669875155411328952?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adjacency Matrix Network and List of Link Network]]></title>
    <link href="http://pro.ctlok.com/2010/01/adjacency-matrix-network-and-list-of.html"/>
    <updated>2010-01-09T19:09:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/01/adjacency-matrix-network-and-list-of</id>
    <content type="html"><![CDATA[<p><span style="font-size: small;"><span class="Apple-style-span" style="color: red;"><b>這只是大學的習作</b></span></span><br /><span style="font-size: small;"><br /></span><br /><span style="font-size: small;">在大學習作中需要制作一個&nbsp;Adjacency Matrix Network 和 List of Link Network 的 Class</span><br /><span style="font-size: small;">大致功能:&nbsp;</span><br /><ul><li>查詢有多少 Path 連進選取的 Node</li><li>查詢有多少 Path 由選取的 Node 出發</li><li>查詢一個 Node 能否到達另一個&nbsp;Node</li><li>Path 的總和</li><li>2 種 Network 互相轉換</li></ul><br /><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">做此習作感受到了 Microsoft .NET 內的 LINQ 的強大<br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">只需短短一行的程式碼便可以做出了複雜的查詢<br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">實在是非常方便<br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><br /><span style="font-size: small;">原始碼如下:</span><br /><span style="font-size: small;"><br /></span><br /><span style="font-size: small;">Network Class</span><br /><pre class="brush: csharp">using System;<br />using System.Collections.Generic;<br />using System.Text;<br /><br />namespace NetworkLibrary<br />{<br />    public abstract class Network<br />    {<br />        protected int <em>Size;<br /><br />        //Size is read only<br />        public int Size<br />        {<br />            get { return </em>Size; }<br />        }<br /><br />        public abstract int NumberOfLinks();<br /><br />        public abstract int OutDegree(int nodeNumber);<br /><br />        public abstract int InDegree(int nodeNumber);<br /><br />        public abstract List&lt;int&gt; ReachableFrom(int nodeNumber);<br />    }<br />}<br /></pre><span style="font-size: small;">Adjacency Matrix Network Class</span><br /><pre class="brush: csharp">using System;<br />using System.Collections.Generic;<br />using System.Linq;<br />using System.Text;<br /><br />namespace NetworkLibrary<br />{<br />    public class AM_Network : Network<br />    {<br />        private int[][] <em>NodeMatrix;<br /><br />        public int[][] NodeMatrix<br />        {<br />            get { return </em>NodeMatrix; }<br />        }<br /><br />        public AM_Network(int numberOfNode, int[,] nodeMap)<br />        {<br />            /<strong><br />             * Error checking<br />             * No node exception<br />             * Null argument exception<br />             * Martrix not correct exception<br />             */<br /><br />            if (numberOfNode &lt; 1)<br />                throw new NumberOfNodeLessThenOneException("Number Of Node Less Then One");<br />            else if (nodeMap == null)<br />                throw new ArgumentNullException("Node Map is null");<br />            else if (numberOfNode * numberOfNode != nodeMap.Length)<br />                throw new NumberOfNodeNotEqualMatrixHeightException("Number of Node or Matrix Height Not Correct");<br />            else if (!nodeMap.IsFixedSize)<br />                throw new MatrixNotCorrectException("Matrix Width Not Correct");<br /><br />            //Store to local variable<br />            base.<em>Size = numberOfNode;<br /><br />            //Convert 2D array to jagged array<br />            </em>NodeMatrix = new int[numberOfNode][];<br />            for (int i = 0; i &lt; numberOfNode; i++)<br />            { <br />                <em>NodeMatrix[i] = new int[numberOfNode];<br />                for (int ii = 0; ii &lt; numberOfNode; ii++)<br />                    </em>NodeMatrix[i][ii] = nodeMap[i, ii];<br />            }<br /><br />        }<br /><br />        public LL_Network To_LL()<br />        {<br />            /</strong><br />             * Create a list store a Link information<br />             * Search matrix information<br />             * if matrix value greater then zero<br />             * should be create a array to store node data<br />             <em>/<br /><br />            List&lt;int[]&gt; linkList = new List&lt;int[]&gt;();<br />            for (int i = 0; i &lt; <em>NodeMatrix.Length; i++)<br />            {<br />                for (int ii = 0; ii &lt; </em>NodeMatrix[i].Length; ii++)<br />                {<br />                    if (<em>NodeMatrix[i][ii] &gt; 0)<br />                        linkList.Add(new int[] { i, ii, </em>NodeMatrix[i][ii] });<br />                }<br />            }<br />            return new LL_Network(base._Size, linkList.ToArray());<br />        }<br /><br />        public override string ToString()<br />        {<br />            /**<br />             * retrun network type<br />             * network size and total link<br />             </em>/<br /><br />            string info = "Network Type: Adjacency Matrix\n";<br />            info += "Network Size: " + base.<em>Size + "\n";<br />            info += "Number Of Link: " + NumberOfLinks() + "\n";<br />            return info;<br />        }<br /><br />        public override int NumberOfLinks()<br />        {<br />            //Return network total link<br />            return </em>NodeMatrix.Sum(row =&gt; row.Count(column =&gt; column &gt; 0));<br />        }<br /><br />        public override int OutDegree(int nodeNumber)<br />        {<br />            /<strong><br />             * Error checking<br />             * Negative node number exception<br />             * Node not found exception<br />             * return number of link in this node point to other node<br />             */<br />            if (nodeNumber &lt; 0)<br />                throw new NegativeNodeNumberException("Node Number Cannot be a Negative Number");<br />            else if (nodeNumber &gt; base.<em>Size - 1)<br />                throw new NonExistentNodeException("Node not found");<br />            return </em>NodeMatrix[nodeNumber].Count(column =&gt; column &gt; 0);<br />        }<br /><br />        public override int InDegree(int nodeNumber)<br />        {<br />            /</strong><br />             * Error checking<br />             * Negative node number exception<br />             * Node not found exception<br />             * return number of link in this node is other node point to this node<br />             <em>/<br />            if (nodeNumber &lt; 0)<br />                throw new NegativeNodeNumberException("Node Number Cannot be a Negative Number");<br />            else if (nodeNumber &gt; base.<em>Size - 1)<br />                throw new NonExistentNodeException("Node not found");<br />            return </em>NodeMatrix.Count(row =&gt; row[nodeNumber] &gt; 0);<br />        }<br /><br />        public override List&lt;int&gt; ReachableFrom(int nodeNumber)<br />        {<br />            /**<br />             * Error checking<br />             * Negative node number exception<br />             * Node not found exception<br />             </em>/<br />            if (nodeNumber &lt; 0)<br />                throw new NegativeNodeNumberException("Node Number Cannot be a Negative Number");<br />            else if (nodeNumber &gt; base.<em>Size - 1)<br />                throw new NonExistentNodeException("Node not found");<br /><br />            /<strong><br />             * Create 2 list to store node<br />             * reachableList is a final result list<br />             * Store node into nonCheckNodeList when this node was checked.<br />             * Prevent repeat to check<br />             */<br />            List&lt;int&gt; reachableList = new List&lt;int&gt;();<br />            List&lt;int&gt; nonCheckNodeList = new List&lt;int&gt;();<br />            bool update;<br /><br />            //Source node must be add to reachableList<br />            reachableList.Add(nodeNumber);<br /><br />            do<br />            {<br />                /</strong><br />                 * Initial the update to false<br />                 * because we will check the node is it repeat.<br />                 * <br />                 * Create a checkNodeList<br />                 * checkNodeList only store a will check node<br />                 * It filter the nonCheckNodeList node<br />                 * <br />                 * Loop the checkNodeList<br />                 <em>/<br />                update = false;<br />                List&lt;int&gt; checkNodeList = reachableList.Except(nonCheckNodeList).ToList();<br />                for (int i = 0; i &lt; checkNodeList.Count; i++)<br />                {<br />                    /**<br />                     * Add current node to nonCheckNodeList<br />                     * because current node was checked.<br />                     * <br />                     * Define the List and check this node can reach to which node<br />                     </em>/<br />                    nonCheckNodeList.Add(reachableList[i]);<br />                    IEnumerable&lt;int&gt; result = </em>NodeMatrix[checkNodeList[i]]<br />                        .Select((column, index) =&gt; new { column, index })<br />                        .Where(obj =&gt; obj.column &gt; 0)<br />                        .Select(obj =&gt; obj.index);<br /><br />                    foreach (int temp in result)<br />                    {<br />                        /<strong><br />                         * Check node is it repeat<br />                         * if not repeat is should be store in reachableList<br />                         * and update set to true<br />                         * because this node was store into the reachableList<br />                         */<br />                        if (!reachableList.Exists(node =&gt; node == temp))<br />                        {<br />                            update = true;<br />                            reachableList.Add(temp);<br />                        }<br />                    }<br />                }<br />            } while (update);<br /><br />            /</strong><br />             * Sorting the list <br />             * and return the result<br />             <em>/<br />            reachableList.Sort();<br />            return reachableList;<br />        }<br />    }<br />}<br /></pre>List of Link Network Class<br /><pre class="brush:csharp">using System.Collections.Generic;<br />using System.Linq;<br />using System.Text;<br /><br />namespace NetworkLibrary<br />{<br />    public class LL_Network : Network<br />    {<br />        private NetworkLibrary.Link[] <em>NodeLinks;<br /><br />        public NetworkLibrary.Link[] NodeLinks<br />        {<br />            get { return </em>NodeLinks; }<br />        }<br /><br />        public LL_Network(int numberOfNode, int[][] nodeMap)<br />        {<br />            /**<br />             * Error checking<br />             * No node exception<br />             * Null argument exception<br />             * Too many exception<br />             </em>/<br /><br />            if (numberOfNode &lt; 1)<br />                throw new NumberOfNodeLessThenOneException("Number Of Node Less Then One");<br />            else if (nodeMap == null)<br />                throw new ArgumentNullException("Node Map is null");<br />            else if (numberOfNode * numberOfNode &lt; nodeMap.Length)<br />                throw new TooManyLinkException("Too Many Link");<br /><br />            //Store to local variable<br />            base.<em>Size = numberOfNode;<br />            </em>NodeLinks = new Link[nodeMap.Length];<br />            <br />            //Create Link from array<br />            for (int i = 0; i &lt; nodeMap.Length; i++)<br />            {<br />                if (nodeMap[i].Length != 3)<br />                    throw new LinkNumberOfArgumentException("Link Must have 3 Argument");<br />                <em>NodeLinks[i] = new Link(nodeMap[i][0], nodeMap[i][1], nodeMap[i][2]);<br />            }<br />        }<br /><br />        public AM_Network To_AM()<br />        {<br />            /<em>*<br />             * Create a 2D array<br />             * Assign a link value into array<br />             </em>/<br /><br />            int[,] amStructure = new int[base.</em>Size, base.<em>Size];<br />            for (int i = 0; i &lt; base.</em>Size; i++)<br />            {<br />                for (int ii = 0; ii &lt; base.<em>Size; ii++)<br />                {<br />                    IEnumerable&lt;Link&gt; result = </em>NodeLinks.Where(n =&gt; n.Node == i &amp;&amp; n.DestinationNode == ii);<br />                    amStructure[i,ii] = (result.Count() &gt; 0) ? result.First().Weight : 0;<br />                }<br />            }<br />            return new AM_Network(base.<em>Size, amStructure);<br />        }<br /><br />        public override string ToString()<br />        {<br />            /<em>*<br />             * retrun network type<br />             * network size and total link<br />             </em>/<br />            string info = "Network Type: List-of-Links\n";<br />            info += "Network Size: " + base.</em>Size + "\n";<br />            info += "Number Of Link: " + NumberOfLinks() + "\n";<br />            return info;<br />        }<br /><br />        public override int NumberOfLinks()<br />        {<br />            //Return network total link<br />            return <em>NodeLinks.Length;<br />        }<br /><br />        public override int OutDegree(int nodeNumber)<br />        {<br />            /<em>*<br />             * Error checking<br />             * Negative node number exception<br />             * Node not found exception<br />             * return number of link in this node point to other node<br />             </em>/<br />            if (nodeNumber &lt; 0)<br />                throw new NegativeNodeNumberException("Node Number Cannot be a Negative Number");<br />            else if (!</em>NodeLinks.ToList().Exists(link =&gt; link.Node == nodeNumber))<br />                throw new NonExistentNodeException("Node not found");<br />            return <em>NodeLinks.Count(link =&gt; link.Node == nodeNumber);<br />        }<br /><br />        public override int InDegree(int nodeNumber)<br />        {<br />            /<em>*<br />             * Error checking<br />             * Negative node number exception<br />             * Node not found exception<br />             * return number of link in this node is other node point to this node<br />             </em>/<br />            if (nodeNumber &lt; 0)<br />                throw new NegativeNodeNumberException("Node Number Cannot be a Negative Number");<br />            else if (!</em>NodeLinks.ToList().Exists(link =&gt; link.Node == nodeNumber))<br />                throw new NonExistentNodeException("Node not found");<br />            return <em>NodeLinks.Count(link =&gt; link.DestinationNode == nodeNumber);<br />        }<br /><br />        public override List&lt;int&gt; ReachableFrom(int nodeNumber)<br />        {<br />            /<em>*<br />             * Error checking<br />             * Negative node number exception<br />             * Node not found exception<br />             </em>/<br /><br />            if (nodeNumber &lt; 0)<br />                throw new NegativeNodeNumberException("Node Number Cannot be a Negative Number");<br />            else if (!</em>NodeLinks.ToList().Exists(link =&gt; link.Node == nodeNumber))<br />                throw new NonExistentNodeException("Node not found");<br /><br />            /<strong><br />             * Create 2 list to store node<br />             * reachableList is a final result list<br />             * Store node into nonCheckNodeList when this node was checked.<br />             * Prevent repeat to check<br />             */<br /><br />            List&lt;int&gt; reachableList = new List&lt;int&gt;();<br />            List&lt;int&gt; nonCheckNodeList = new List&lt;int&gt;();<br />            bool update;<br /><br />            //Source node must be add to reachableList<br />            reachableList.Add(nodeNumber);<br /><br />            do<br />            {<br />                /</strong><br />                 * Initial the update to false<br />                 * because we will check the node is it repeat.<br />                 * <br />                 * Create a checkNodeList<br />                 * checkNodeList only store a will check node<br />                 * It filter the nonCheckNodeList node<br />                 * <br />                 * Loop the checkNodeList<br />                 <em>/<br /><br />                update = false;<br />                List&lt;int&gt; checkNodeList = reachableList.Except(nonCheckNodeList).ToList();<br />                for (int i = 0; i &lt; checkNodeList.Count; i++)<br />                {<br />                    /**<br />                     * Add current node to nonCheckNodeList<br />                     * because current node was checked.<br />                     * <br />                     * Define the List and check this node can reach to which node<br />                     </em>/<br />                    nonCheckNodeList.Add(reachableList[i]);<br />                    IEnumerable&lt;Link&gt; result = <em>NodeLinks.Where(link =&gt; link.Node == checkNodeList[i]);<br />                    foreach (Link temp in result)<br />                    {<br />                        /<strong><br />                         * Check node is it repeat<br />                         * if not repeat is should be store in reachableList<br />                         * and update set to true<br />                         * because this node was store into the reachableList<br />                         */<br />                        if (!reachableList.Exists(node =&gt; node == temp.DestinationNode))<br />                        {<br />                            update = true;<br />                            reachableList.Add(temp.DestinationNode);<br />                        }<br />                    }<br />                }<br />            } while (update);<br /><br />            /</strong><br />             * Sorting the list <br />             * and return the result<br />             */<br />            reachableList.Sort();<br />            return reachableList;<br />        }<br />    }<br />}<br /></pre>Link Class<br /><pre class="brush: csharp">using System;<br />using System.Collections.Generic;<br />using System.Text;<br /><br />namespace NetworkLibrary<br />{<br />    public struct Link<br />    {<br />        /**<br />         * </em>Node store a current Node<br />         * <em>DestinationNode store a next Node<br />         * </em>Weight store a link weight<br />         */<br />        private int <em>Node;<br />        private int </em>DestinationNode;<br />        private int <em>Weight;<br />        <br />        public int Node<br />        {<br />            get { return </em>Node; }<br />            set { <em>Node = value; }<br />        }<br />        <br /><br />        public int DestinationNode<br />        {<br />            get { return </em>DestinationNode; }<br />            set { <em>DestinationNode = value; }<br />        }<br />        <br /><br />        public int Weight<br />        {<br />            get { return </em>Weight; }<br />            set { <em>Weight = value; }<br />        }<br /><br />        //Constructor<br />        public Link(int node, int destinationNode, int weight)<br />        {<br />            </em>Node = node;<br />            <em>DestinationNode = destinationNode;<br />            </em>Weight = weight;<br />        }<br />    }<br />}<br /></pre><br /><br /><span style="font-size: small;">相關書籍:&nbsp;<a href="http://www.amazon.com/Head-First-C-Andrew-Stellman/dp/0596514824?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Head First C#" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0596514824&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596514824" style="border: none !important; margin: 0px !important;" width="1" /><a href="http://www.amazon.com/Microsoft-Visual-C-2008-Step/dp/0735624305?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Microsoft Visual C# 2008 Step by Step" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0735624305&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0735624305" style="border: none !important; margin: 0px !important;" width="1" /><a href="http://www.amazon.com/Illustrated-2008-Windows-Net-Daniel-Solis/dp/1590599543?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Illustrated C# 2008 (Windows.Net)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1590599543&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1590599543" style="border: none !important; margin: 0px !important;" width="1" /></span><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5892868758636521479?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
