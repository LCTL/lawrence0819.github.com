<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/spring/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-04-03T14:45:19+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在 JSP 使用 Expression Language 拿取 Spring Bean 內容]]></title>
    <link href="http://pro.ctlok.com/2010/08/jsp-expression-language-spring-bean.html"/>
    <updated>2010-08-23T22:16:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/08/jsp-expression-language-spring-bean</id>
    <content type="html"><![CDATA[<p>有好一陣沒有更新這個部落格了，這數星期也在製作一個個人項目，忙得沒時間打文章，現在這個項目的主要功能也完成了，可遲一點再更新。<br /><br />有使用 <b>Spring Framework</b> 的也知道 <b>Spring bean</b> 在不同的 <b>bean</b> 內也輕易存取得到，方法亦有幾種。<br /><br />例如使用 <b>Java Annotation</b> 的方式去自動注入<br /><pre class="brush: java">@Autowired<br />private MyBean bean;<br /></pre><br />又可以使用 XML 的方式去注入<br /><pre class="brush: xml">&lt;bean id=&quot;person&quot; class=&quot;org.springframework.beans.TestBean&quot; scope=&quot;prototype&quot;&gt;<br />    &lt;property name=&quot;age&quot; value=&quot;10&quot;/&gt;<br />    &lt;property name=&quot;spouse&quot;&gt;<br />        &lt;bean class=&quot;org.springframework.beans.TestBean&quot;&gt;<br />            &lt;property name=&quot;age&quot; value=&quot;11&quot;/&gt;<br />        &lt;/bean&gt;<br />    &lt;/property&gt;<br />&lt;/bean&gt;<br /></pre><br />又可以在執行階段動態取得 <b>Spring bean</b><br /><pre class="brush: java">ApplicationContext context =  WebApplicationContextUtils.getWebApplicationContext(getServletContext());<br />Object bean = context.getBean("myBean");<br /></pre><br />那在 <b>JSP</b> 中怎麼取得 <b>Spring bean</b>，你可以使用第三種方式去取得 <b>bean</b>，但我不喜歡在 JSP 中插入 <b>Java</b> 程式碼，所以我會使用以下方法。<br /><br />在設定 <b>Spring web mvc</b> 的 <b>viewResolver</b> 時加入一個參數就可以了:<br /><pre class="brush: xml"><bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"><br />    <property name="exposeContextBeansAsAttributes" value="true"/><br /></bean><br /></pre><br />就是這樣簡單，你就可以在 <b>JSP</b> 用以下方式拿到 <b>bean</b> 的內容:<br /><pre class="brush: xml">&lt;c:out value=&quot;${ bean.value }&quot; /&gt;<br /></pre><br />除了這個方法外，你亦可以幾 <b>Spring bean</b> 放到 <b>HttpServletRequest</b> 內，令 <b>JSP</b> 可以存取得到，但沒有以上方法簡單直接。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Spring-Recipes-Problem-Solution-Gary-Mak/dp/1590599799?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Spring Recipes: A Problem-Solution Approach" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1590599799&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1590599799" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Spring-Action-Craig-Walls/dp/1933988134?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Spring in Action" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1933988134&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1933988134" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Spring-Recipes-Problem-Solution-Approach-Second/dp/1430224991?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Spring Recipes: A Problem-Solution Approach, Second Edition" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1430224991&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1430224991" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-648921993872290780?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Spring Bean 內取得 HttpServletRequest 物件]]></title>
    <link href="http://pro.ctlok.com/2010/07/spring-bean-get-httpservletrequest.html"/>
    <updated>2010-07-21T17:41:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/07/spring-bean-get-httpservletrequest</id>
    <content type="html"><![CDATA[<p>使用 <b>Java</b> 去開發 <b>Web</b> 應用程式時，大部份時候都會使用到 <b>HttpServletRequest</b> 來做各項操作，例如拿取用戶的 IP 地址:<br /><pre class="brush: java">String ip = request.getRemoteAddr();<br /></pre><br />又例如要拿取用戶的 <b>Session</b> 物件:<br /><pre class="brush: java">HTTPSession session = request.getSession();<br /></pre><br />有很多操作也是靠 <b>HttpServletRequest</b> 來做。<br /><br />需要在 <b>Spring bean</b> 要取得 <b>HttpServletRequest</b> 物件時，如果每次都經由 <b>HttpServlet</b> 拿到 <b>HttpServletRequest</b> 物件後再傳入去 <b>Spring bean</b>，這樣的做法太煩人了，<b>Spring Framework</b> 提供了一個方法可以不用靠自己的 <b>HttpServlet</b> 傳入就可以取得 <b>HttpServletRequest</b>。<br /><br />以下是程式碼:<br /><pre class="brush: java">ServletRequestAttributes attr = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();<br />HttpServletRequest request = attr.getRequest();<br /></pre><br />在 <b>web.xml</b> 內亦要加上一個 <b>listener</b> 以防 <b>HttpServletRequest</b> 在其他地方使用時會發生 <b>Thread</b> 方面的問題:<br /><pre class="brush: xml">&lt;listener&gt;<br />    &lt;listener-class&gt;<br />        org.springframework.web.context.request.RequestContextListener<br />    &lt;/listener-class&gt;<br />&lt;/listener&gt;<br /></pre><br />使用 <b>Spring Framework 3</b> 的也可以使用 <b>@Autowired</b> 的方式令 <b>Spring</b> 自動注入 <b>HttpServletRequest</b>:<br /><pre class="brush: java">@Autowired<br />private HttpServletRequest request;<br /></pre><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Pro-Spring-3-Jan-Machacek/dp/1430218452?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Pro Spring 3" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1430218452&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1430218452" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Spring-Action-Craig-Walls/dp/1933988134?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Spring in Action" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1933988134&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1933988134" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Beginning-Java-trade-Platform-GlassFish/dp/1430219548?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Beginning Java&amp;trade; EE 6 Platform with GlassFish&amp;trade; 3: From Novice to Professional" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1430219548&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1430219548" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-7769193057426545079?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Filter 強制將頁面轉成 UTF-8 編碼]]></title>
    <link href="http://pro.ctlok.com/2010/07/spring-filter-utf-8-encode.html"/>
    <updated>2010-07-19T20:14:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/07/spring-filter-utf-8-encode</id>
    <content type="html"><![CDATA[<p>網頁亂碼的問題一直是一個非常困擾的問題，明明在自己的電腦測試時還好好的，當放上伺服器時又會出現亂碼。有時就算是網頁頁面使用了 <b>UTF-8</b> 編碼也不能解決問題，原因是伺服器後台程式輸出的文字不是以  <b>UTF-8</b> 編碼。要一一解決這些問題實在是非常浪費時間。<br /><br />如果你有使用到 <b>Spring Framework</b> 的話，你可以試試使用 <b>Spring Framework</b> 內建的 <b>Filter</b> 去將頁面所有字串轉換成 <b>UTF-8</b> 編碼，以解決亂碼問題。我在 <b>Google App Engine</b> 上開發的應用程式也有亂碼問題，將頁面所有字串轉換成 <b>UTF-8</b> 編碼後便解決了所有亂碼問題。<br /><br />首先在 web.xml 加上 Filter:<br /><pre class="brush: xml;">&lt;filter&gt;<br />    &lt;filter-name&gt;<br />        encodingFilter<br />    &lt;/filter-name&gt;<br />    &lt;filter-class&gt;<br />        org.springframework.web.filter.CharacterEncodingFilter<br />    &lt;/filter-class&gt;<br />    &lt;init-param&gt;<br />        &lt;param-name&gt;<br />            encoding<br />        &lt;/param-name&gt;<br />        &lt;param-value&gt;<br />            UTF-8<br />        &lt;/param-value&gt;<br />    &lt;/init-param&gt;<br />    &lt;init-param&gt;<br />        &lt;param-name&gt;<br />            forceEncoding<br />        &lt;/param-name&gt;<br />        &lt;param-value&gt;<br />            true<br />        &lt;/param-value&gt;<br />    &lt;/init-param&gt;<br />&lt;/filter&gt;<br />&lt;filter-mapping&gt;<br />    &lt;filter-name&gt;<br />        encodingFilter<br />    &lt;/filter-name&gt;<br />    &lt;url-pattern&gt;<br />        /*<br />    &lt;/url-pattern&gt;<br />&lt;/filter-mapping&gt;<br /></pre><br />有一點要記的是 <b>CharacterEncodingFilter</b> 一定要是第一個 <b>Filter</b>。之後要加的 <b>Filter</b> 要加在下面。<br /><br />所有 <b>JSP </b> 頁面亦要以 <b>UTF-8</b> 編碼，在 <b>JSP </b> 頁面加上以下程式碼:<br /><pre class="brush: text">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; %&gt;<br /></pre><br />在 <b>HTML</b> 的 <b>head</b> 亦要加上以下程式碼提示瀏覽器此頁面用 <b>UTF-8</b> 編碼。<br /><pre class="brush: html">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;<br /></pre><br />這樣就可以解決亂碼問題了。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Spring-Recipes-Problem-Solution-Gary-Mak/dp/1590599799?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Spring Recipes: A Problem-Solution Approach" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1590599799&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1590599799" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Spring-Action-Craig-Walls/dp/1933988134?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Spring in Action" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1933988134&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1933988134" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Beginning-Java-trade-Platform-GlassFish/dp/1430219548?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Beginning Java&amp;trade; EE 6 Platform with GlassFish&amp;trade; 3: From Novice to Professional" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1430219548&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1430219548" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-517070873543919211?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Web MVC - REST]]></title>
    <link href="http://pro.ctlok.com/2010/06/spring-web-mvc-rest.html"/>
    <updated>2010-06-28T22:55:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/06/spring-web-mvc-rest</id>
    <content type="html"><![CDATA[<p>在 Spring Framework 幫助下，很容易便可以做出 REST 風格的 URL。<br />REST 的介紹: <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer">Representational State Transfer</a><br /><br />REST 風格的 URL 會長成以下的樣子:<br /><pre class="brush: text">http://pro.ctlok.com/2010/06/28/bababa<br /></pre><br />各位是否覺得很熟悉? 經常瀏覽不同類型的 Blog 的朋友應該見慣這種 URL 吧，在 WordPress 也可以將文章 URL 設定為這種格式，是對搜尋器優化了的一種 URL。在 Spring Web MVC 也可以做到 REST 風格的 URL，而且很簡單。<br /><br />在這裡我不把 Spring Web MVC 重頭說一次了，有興趣的請在我的部落格找找 Spring 相關的文章。<br /><br />在這裡我跟以上的 URL 做一個示範:<br /><pre class="brush: java">@RequestMapping(value="/{year}/{month}/{day}/{postTitle}", method=RequestMethod.GET)<br />public String findPost(@PathVariable("year") String year, @PathVariable("month") String month, @PathVariable("day") String day, @PathVariable("postTitle") String postTitle, Model model) {<br />    Post post = postService.find(year, month, day, postTitle);  <br />    model.addAttribute("post", post);  <br />    return "post"; <br />}<br /></pre><br />就是這麼簡單就做到了，如果是以前不懂這種技術，可能會這麼做:<br /><pre class="brush: text">http://www.abcxyz.com/post?year=2010&amp;month=06&amp;day=28&amp;title=bababa<br /></pre><br />這樣雖然也可以達到相同目的，但這種 URL 不利於搜尋器。<br /><br />Spring 亦可以將參數自動轉換成其他格式:<br /><pre class="brush: java">@RequestMapping(value="/user/{userId}", method=RequestMethod.GET)<br />public String findPost(@PathVariable("userID") long userID, Model model) {<br />    //........ <br />}<br /></pre><br />在已註冊的 URI 後再加上其他參數也可以:<br /><pre class="brush: java">@RequestMapping(value="/user/{userId}", method=RequestMethod.GET)<br />public String findPost(@PathVariable("userID") long userID, Model model) {<br />    //........ <br />}<br /><br />@RequestMapping(value="/user/*/friend/{friendID}", method=RequestMethod.GET)<br />public String findPost(@PathVariable("friendID") long friendID, Model model) {<br />    //........ <br />}<br /></pre><br />亦可以將數據綁定在參數上:<br /><pre class="brush: java">@InitBinder<br />public void initBinder(WebDataBinder binder) {<br />    SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");<br />    binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));<br />}<br /><br />@RequestMapping(value="/{date}/{postTitle}", method=RequestMethod.GET)<br />public String findPost(@PathVariable("date") Date date, @PathVariable("postTitle") String postTitle, Model model) {<br />    //........ <br />}<br /></pre><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Expert-Spring-MVC-Web-Flow/dp/159059584X?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Expert Spring MVC and Web Flow" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=159059584X&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=159059584X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Expert-Spring-MVC-Flow-ebook/dp/B001D4V7RC?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Expert Spring MVC and Web Flow" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=B001D4V7RC&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=B001D4V7RC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Spring-Action-Craig-Walls/dp/1933988134?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Spring in Action" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1933988134&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1933988134" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-449880508701103446?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 AspectJ 記錄 Spring Bean 丟出的 Exception]]></title>
    <link href="http://pro.ctlok.com/2010/06/aspectj-record-spring-bean-method-throw.html"/>
    <updated>2010-06-09T11:06:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/06/aspectj-record-spring-bean-method-throw</id>
    <content type="html"><![CDATA[<p>在上一篇也提過使用 AspectJ 可輕鬆地將大量 Method 前後插入程式碼，網址: <a href="http://pro.ctlok.com/2010/06/aspectj-record-spring-bean-method.html">AspectJ 記錄執行時間</a><br /><br />今次這篇是使用 AspectJ 去記錄 Spring Bean 丟出的 Exception，一樣是非常簡單就可達成目的。<br /><br />首先要先在設定 bean 的 xml 檔案加上以下內容:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br />&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;<br />    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;<br />    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br /> xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;<br />    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<br /> http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<br /> http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&quot;&gt;<br /> <br />    &lt;aop:aspectj-autoproxy /&gt;<br />    &lt;context:component-scan base-package=&quot;com.ctlok.pro.bean.aspect&quot; /&gt;<br /><br />&lt;/beans&gt;<br /></pre><br />製作一個 CommonLogger 的 class:<br /><pre class="brush: java">package com.ctlok.pro.bean.aspect;<br /><br />import org.aspectj.lang.annotation.Aspect;<br />import org.aspectj.lang.annotation.Pointcut;<br />import java.util.logging.Logger;<br />import org.springframework.stereotype.Component;<br /><br />@Aspect<br />@Component<br />public class CommonLogger {<br /><br />    private static final Logger logger = Logger.getLogger(CommonLogger.class.getName());<br /><br />    @Pointcut(&quot;execution(<em> com.ctlok.pro.bean.service.</em>.<em>(..))&quot;)<br />    public void service() {<br />    }<br /><br />}<br /></pre><br />首先定義那些 bean method 要被記錄，在這裡是些有 com.ctlok.pro.bean.service 內的 class 和所有 method 都記錄起來。<br /><br />再來是加入記錄程式碼:<br /><pre class="brush: java">@AfterThrowing(pointcut = &quot;service()&quot;, throwing = &quot;throwable&quot;)<br />public void exceptionLogger(JoinPoint joinPoint, Throwable throwable) {<br />    String clazz = joinPoint.getTarget().getClass().getSimpleName();<br />    String method = joinPoint.getSignature().getName();<br />    String log = &quot;Class: &quot; + clazz + &quot;run Method: &quot; + method + &quot; throw Exception: &quot; + throwable.toString();<br />    logger.warning(log);<br />}<br /></pre><br />@AfterThrowing 注解用來設定被記錄的 method 丟出 exception 後便執行。<br />throwing 用來設定 Throwable class 的名稱。<br /><br />完整的 CommonLogger:<br /><pre class="brush: java">package com.ctlok.pro.bean.aspect;<br /><br />import org.aspectj.lang.JoinPoint;<br />import org.aspectj.lang.annotation.AfterThrowing;<br />import org.aspectj.lang.annotation.Aspect;<br />import org.aspectj.lang.annotation.Pointcut;<br />import java.util.logging.Logger;<br />import org.springframework.stereotype.Component;<br /><br />@Aspect<br />@Component<br />public class CommonLogger {<br /><br />    private static final Logger logger = Logger.getLogger(CommonLogger.class<br />            .getName());<br /><br />    @Pointcut(&quot;execution(</em> com.ctlok.pro.bean.service.<em>.</em>(..))&quot;)<br />    public void service() {<br />    }<br /><br />    @AfterThrowing(pointcut = &quot;service()&quot;, throwing = &quot;throwable&quot;)<br />    public void exceptionLogger(JoinPoint joinPoint, Throwable throwable) {<br />        String clazz = joinPoint.getTarget().getClass().getSimpleName();<br />        String method = joinPoint.getSignature().getName();<br />        String log = &quot;Class: &quot; + clazz + &quot;run Method: &quot; + method<br />                + &quot; throw Exception: &quot; + throwable.toString();<br />        logger.warning(log);<br />    }<br /><br />}<br /></pre><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Aspectj-Action-Enterprise-Spring-Applications/dp/1933988053?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Aspectj in Action: Enterprise AOP with Spring Applications" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1933988053&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1933988053" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/AspectJ-Action-Practical-Aspect-Oriented-Programming/dp/1930110936?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="AspectJ in Action: Practical Aspect-Oriented Programming" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1930110936&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1930110936" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Eclipse-AspectJ-Aspect-Oriented-Programming-Development/dp/0321245873?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Eclipse AspectJ: Aspect-Oriented Programming with AspectJ and the Eclipse AspectJ Development Tools" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0321245873&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0321245873" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-1885450191955309087?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
