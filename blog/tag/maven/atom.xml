<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Maven | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/maven/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-07-18T14:12:57+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maven + Jetty 測試  JSF 2 Annotation]]></title>
    <link href="http://pro.ctlok.com/blog/2012/04/03/maven-jetty-jsf-2.html"/>
    <updated>2012-04-03T14:37:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/04/03/maven-jetty-jsf-2</id>
    <content type="html"><![CDATA[<p>剛剛使用 Maven + Jetty 的組合去測試一 JSF 2.0，但很奇怪，所有的 <code>Java Bean</code> 都找不到。
原來要 JSF 自動搜索 <code>Java Bean</code> 是要包裝成 <code>WAR</code> 才可以。</p>

<p>原本運行 Jetty 使用 <code>mvn jetty:run</code> ，只要改成 <code>mvn jetty:run-war</code> 就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Setup Jetty Development Server]]></title>
    <link href="http://pro.ctlok.com/blog/2012/03/30/maven-setup-jetty-dev-server.html"/>
    <updated>2012-03-30T14:38:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/03/30/maven-setup-jetty-dev-server</id>
    <content type="html"><![CDATA[<p>在 Maven 使用 Jetty 作為 Web Server 是非常簡單，在 <code>pom.xml</code> 加入以下設定:</p>

<p>``` xml
<plugin></p>

<pre><code>&lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
&lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
&lt;version&gt;6.1.26&lt;/version&gt;
&lt;configuration&gt;
    &lt;stopPort&gt;9966&lt;/stopPort&gt;
    &lt;stopKey&gt;stop&lt;/stopKey&gt;
&lt;/configuration&gt;
</code></pre>

<p></plugin>
```</p>

<p>以後只需要輸入 <code>mvn jetty:run</code> 就會啟動 Jetty Web Server，輸入 <code>mvn jetty:stop</code> 則關閉，
非常方便。啟動後打開 <code>http://localhost:8080</code> 就可以用了。</p>

<!--more-->


<hr />

<p>如果要在 Unit Test 測試 URL 或版面的 HTML 是否正確，可以參考以下的 <code>pom.xml</code> 設定:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (pom.xml)</span> <a href='/downloads/code/maven-setup-jetty-dev-server/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'><span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>pro.ctlok.com<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jetty<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.0.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>jetty<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url&gt;</span>http://maven.apache.org<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.5<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>javax.servlet.jsp<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>jsp-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>4.10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;build&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>2.0.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;source&gt;</span>1.5<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;target&gt;</span>1.5<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-surefire-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>2.12<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.mortbay.jetty<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-jetty-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>6.1.26<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;stopPort&gt;</span>9966<span class="nt">&lt;/stopPort&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;stopKey&gt;</span>stop<span class="nt">&lt;/stopKey&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                    <span class="c">&lt;!-- Before test class execute, start Jetty web server first --&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;id&gt;</span>start-jetty<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;phase&gt;</span>test-compile<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;goal&gt;</span>run<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;scanIntervalSeconds&gt;</span>0<span class="nt">&lt;/scanIntervalSeconds&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;daemon&gt;</span>true<span class="nt">&lt;/daemon&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>                    <span class="c">&lt;!-- After test, stop Jetty web server --&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;id&gt;</span>stop-jetty<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;phase&gt;</span>test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;goal&gt;</span>stop<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/build&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>以上設定可以在測試前啟動 Jetty Web Server，測試完畢就會自動關閉。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (HelloServlet.java)</span> <a href='/downloads/code/maven-setup-jetty-dev-server/HelloServlet.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">pro</span><span class="o">.</span><span class="na">ctlok</span><span class="o">.</span><span class="na">com</span><span class="o">.</span><span class="na">jetty</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">6496751289098922589L</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="nd">@Override</span>
</span><span class='line'>	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span>
</span><span class='line'>			<span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (UrlTest.java)</span> <a href='/downloads/code/maven-setup-jetty-dev-server/UrlTest.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">pro</span><span class="o">.</span><span class="na">ctlok</span><span class="o">.</span><span class="na">com</span><span class="o">.</span><span class="na">jetty</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.HttpURLConnection</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UrlTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="nd">@Test</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://localhost:8080/jetty/index&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="n">HttpURLConnection</span> <span class="n">conn</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpURLConnection</span><span class="o">)</span> <span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">assert</span> <span class="n">conn</span><span class="o">.</span><span class="na">getResponseCode</span><span class="o">()</span> <span class="o">==</span> <span class="mi">200</span><span class="o">;</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">BufferedReader</span> <span class="n">rd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">conn</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">try</span><span class="o">{</span>
</span><span class='line'>			<span class="k">assert</span> <span class="n">rd</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">rd</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (web.xml)</span> <a href='/downloads/code/maven-setup-jetty-dev-server/web.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;web-app</span> <span class="na">version=</span><span class="s">&quot;2.5&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee&quot;</span>
</span><span class='line'><span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'><span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;display-name&gt;</span>jetty<span class="nt">&lt;/display-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;session-config&gt;</span>
</span><span class='line'>        <span class="nt">&lt;session-timeout&gt;</span>30<span class="nt">&lt;/session-timeout&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/session-config&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>        <span class="nt">&lt;display-name&gt;</span>IndexServlet<span class="nt">&lt;/display-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>IndexServlet<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-class&gt;</span>pro.ctlok.com.jetty.HelloServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>IndexServlet<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url-pattern&gt;</span>/index<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;welcome-file-list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;welcome-file&gt;</span>index<span class="nt">&lt;/welcome-file&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/welcome-file-list&gt;</span>
</span><span class='line'><span class="nt">&lt;/web-app&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse + Maven 2 開發 Java SE 專案 - 3]]></title>
    <link href="http://pro.ctlok.com/2010/09/eclipse-maven-2-develop-java-se-project_20.html"/>
    <updated>2010-09-20T12:37:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/09/eclipse-maven-2-develop-java-se-project_20</id>
    <content type="html"><![CDATA[<p>上一篇: <a href="http://pro.ctlok.com/2010/09/eclipse-maven-2-develop-java-se-project_17.html">Eclipse + Maven 2 開發 Java SE 專案 - 2</a><br /><br />上一篇已經體驗過 <b>Maven</b> 強大的程式庫管理，在這一篇會使用到 <b>Maven</b> 另一個功能 - 測試。不可以小看這個測試功能，測試功能能確保你的程式正確，如果你更改了某部份程式碼，可能會影響到整個程式運作，運行一個測試程式可以確保系統其他組件不受影響。<b>Maven</b> 在打包前會自動執行一次測試程式。<br /><br />使用上一編文章的 <b>Project</b> 再去進行 <b>Maven</b> 練習，打開 <b>pom.xml</b>，然後選擇 <b>Dependenices</b> 標籤，按下 <b>Add</b> 然後輸入 <b>junit</b> 找到一大堆 <b>junit</b> 的程式庫，選擇以下圖片那一個:<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/TJbal6X_ZOI/AAAAAAAAAnk/txx0tbOfxu8/s1600/maven-javase-junit-1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="300" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/TJbal6X_ZOI/AAAAAAAAAnk/txx0tbOfxu8/s320/maven-javase-junit-1.png" width="320" /></a></div><br />按下 <b>OK</b> 後在旁邊的 <b>Dependency Details</b> 的 <b>Scope</b> 選擇 <b>test</b>，因為在主程式內不需要 <b>JUnit</b>，只需在測試程式內使用。<br /><br />加入一個測試程式去測試 HelloWorldBean 的 getHelloWorld() 是不是返回 "Hello World" 的 String Object:<br /><pre class="brush: java">package com.ctlok.pro.tutorial.maven.javase.test;<br /><br />import junit.framework.Assert;<br /><br />import org.junit.Before;<br />import org.junit.Test;<br />import org.springframework.context.ApplicationContext;<br />import org.springframework.context.support.ClassPathXmlApplicationContext;<br /><br />import com.ctlok.pro.tutorial.maven.javase.bean.HelloWorldBean;<br /><br />public class SimpleTest {<br /><br />    private ApplicationContext ctx;<br /><br />    @Before<br />    public void initSpring() {<br />        ctx = new ClassPathXmlApplicationContext(new String[] { &quot;beans.xml&quot; });<br />    }<br /><br />    @Test<br />    public void testHelloWorld() {<br />        HelloWorldBean bean = (HelloWorldBean) ctx<br />                .getBean(HelloWorldBean.class);<br />        Assert.assertEquals(&quot;Hello World&quot;, bean.getHelloWorld());<br />    }<br /><br />}<br /></pre><br />因為我們使用的 <b>JUnit</b> 是 <b>4.8</b> 版本，並使用注解的方式，<b>Java</b> 版本一定要 <b>1.5</b> 或以上才支援，所以加入一個 <b>Plugin</b> 去將程序碼編譯成 <b>Java 1.5</b> 的程式。<br /><br />現在到 <b>pom.xml</b> 的 Plugins ，加入 <b>maven-compiler-plugin</b>，然後設定以下的 <b>XML</b>:<br /><pre class="brush: xml">&lt;plugin&gt;<br />    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br />    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;<br />    &lt;version&gt;2.3.2&lt;/version&gt;<br />    &lt;configuration&gt;<br />        &lt;source&gt;1.5&lt;/source&gt;<br />        &lt;target&gt;1.5&lt;/target&gt;<br />    &lt;/configuration&gt;<br />&lt;/plugin&gt;<br /></pre><br />完整的 pom.xml:<br /><pre class="brush: xml">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br />    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br />    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br />    &lt;groupId&gt;com.ctlok.pro.tutorial.maven.javase&lt;/groupId&gt;<br />    &lt;artifactId&gt;javase&lt;/artifactId&gt;<br />    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;<br />    &lt;name&gt;Maven Tutorial&lt;/name&gt;<br />    &lt;description&gt;Maven Tutorial&lt;/description&gt;<br />    &lt;build&gt;<br />        &lt;plugins&gt;<br />            &lt;plugin&gt;<br />                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br />                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;<br />                &lt;version&gt;2.3.1&lt;/version&gt;<br />                &lt;configuration&gt;<br />                    &lt;archive&gt;<br />                        &lt;manifest&gt;<br />                            &lt;mainClass&gt;com.ctlok.pro.tutorial.maven.javase.Main&lt;/mainClass&gt;<br />                            &lt;packageName&gt;com.ctlok.pro.tutorial.maven.javase&lt;/packageName&gt;<br />                            &lt;addClasspath&gt;false&lt;/addClasspath&gt;<br />                        &lt;/manifest&gt;<br />                        &lt;manifestEntries&gt;<br />                            &lt;mode&gt;development&lt;/mode&gt;<br />                            &lt;url&gt;${pom.url}&lt;/url&gt;<br />                        &lt;/manifestEntries&gt;<br />                    &lt;/archive&gt;<br />                &lt;/configuration&gt;<br />            &lt;/plugin&gt;<br />            &lt;plugin&gt;<br />                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br />                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;<br />                &lt;version&gt;2.1&lt;/version&gt;<br />                &lt;executions&gt;<br />                    &lt;execution&gt;<br />                        &lt;id&gt;ud&lt;/id&gt;<br />                        &lt;phase&gt;prepare-package&lt;/phase&gt;<br />                        &lt;goals&gt;<br />                            &lt;goal&gt;unpack-dependencies&lt;/goal&gt;<br />                        &lt;/goals&gt;<br />                    &lt;/execution&gt;<br />                &lt;/executions&gt;<br />                &lt;configuration&gt;<br />                    &lt;outputDirectory&gt;${project.build.outputDirectory}&lt;/outputDirectory&gt;<br />                &lt;/configuration&gt;<br />            &lt;/plugin&gt;<br />            &lt;plugin&gt;<br />                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br />                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;<br />                &lt;version&gt;2.3.2&lt;/version&gt;<br />                &lt;configuration&gt;<br />                    &lt;source&gt;1.5&lt;/source&gt;<br />                    &lt;target&gt;1.5&lt;/target&gt;<br />                &lt;/configuration&gt;<br />            &lt;/plugin&gt;<br />        &lt;/plugins&gt;<br />    &lt;/build&gt;<br />    &lt;dependencies&gt;<br />        &lt;dependency&gt;<br />            &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br />            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;<br />            &lt;version&gt;3.0.4.RELEASE&lt;/version&gt;<br />            &lt;type&gt;jar&lt;/type&gt;<br />            &lt;scope&gt;compile&lt;/scope&gt;<br />        &lt;/dependency&gt;<br />        &lt;dependency&gt;<br />            &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br />            &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;<br />            &lt;version&gt;3.0.4.RELEASE&lt;/version&gt;<br />            &lt;type&gt;jar&lt;/type&gt;<br />            &lt;scope&gt;compile&lt;/scope&gt;<br />        &lt;/dependency&gt;<br />        &lt;dependency&gt;<br />            &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br />            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;<br />            &lt;version&gt;3.0.4.RELEASE&lt;/version&gt;<br />            &lt;type&gt;jar&lt;/type&gt;<br />            &lt;scope&gt;compile&lt;/scope&gt;<br />        &lt;/dependency&gt;<br />        &lt;dependency&gt;<br />            &lt;groupId&gt;junit&lt;/groupId&gt;<br />            &lt;artifactId&gt;junit&lt;/artifactId&gt;<br />            &lt;version&gt;4.8.1&lt;/version&gt;<br />            &lt;type&gt;jar&lt;/type&gt;<br />            &lt;scope&gt;test&lt;/scope&gt;<br />        &lt;/dependency&gt;<br />    &lt;/dependencies&gt;<br />    &lt;dependencyManagement&gt;<br />        &lt;dependencies&gt;<br />        &lt;/dependencies&gt;<br />    &lt;/dependencyManagement&gt;<br />&lt;/project&gt;<br /></pre><br />現在執行 <b>Run as -> Maven test</b>，<b>Console</b> 會打印出以下內容:<br /><pre class="brush: text">[INFO] Scanning for projects...<br />[INFO]                                                                         <br />[INFO] ------------------------------------------------------------------------<br />[INFO] Building Maven Tutorial 1.0.0-SNAPSHOT<br />[INFO] ------------------------------------------------------------------------<br />[INFO] <br />[INFO] --- maven-resources-plugin:2.4.1:resources (default-resources) @ javase ---<br />[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!<br />[INFO] Copying 1 resource<br />[INFO] <br />[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ javase ---<br />[INFO] Nothing to compile - all classes are up to date<br />[INFO] <br />[INFO] --- maven-resources-plugin:2.4.1:testResources (default-testResources) @ javase ---<br />[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!<br />[INFO] Copying 0 resource<br />[INFO] <br />[INFO] --- maven-compiler-plugin:2.3.2:testCompile (default-testCompile) @ javase ---<br />[INFO] Nothing to compile - all classes are up to date<br />[INFO] <br />[INFO] --- maven-surefire-plugin:2.4.3:test (default-test) @ javase ---<br />[INFO] Surefire report directory: D:\testing\javase\target\surefire-reports<br /><br />-------------------------------------------------------<br /> T E S T S<br />-------------------------------------------------------<br />Running com.ctlok.pro.tutorial.maven.javase.test.SimpleTest<br />Sep 20, 2010 4:22:06 AM org.springframework.context.support.AbstractApplicationContext prepareRefresh<br />INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@18d107f: startup date [Mon Sep 20 04:22:06 GMT 2010]; root of context hierarchy<br />Sep 20, 2010 4:22:07 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions<br />INFO: Loading XML bean definitions from class path resource [beans.xml]<br />Sep 20, 2010 4:22:07 AM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons<br />INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1a33d48: defining beans [helloWorldBean]; root of factory hierarchy<br />Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.354 sec<br /><br />Results :<br /><br />Tests run: 1, Failures: 0, Errors: 0, Skipped: 0<br /><br />[INFO] ------------------------------------------------------------------------<br />[INFO] BUILD SUCCESS<br />[INFO] ------------------------------------------------------------------------<br />[INFO] Total time: 1.885s<br />[INFO] Finished at: Mon Sep 20 04:22:07 GMT 2010<br />[INFO] Final Memory: 2M/4M<br />[INFO] ------------------------------------------------------------------------<br /></pre><br />出現這個訊息代表測試成功，你可以試試更改測試程式碼出現不合預期的結果去看看 <b>Maven</b> 會出現什麼訊息。<br /><br />例如將 SimpleTest.testHelloWorld() 改為以下內容:<br /><pre class="brush: java">HelloWorldBean bean = (HelloWorldBean) ctx<br />        .getBean(HelloWorldBean.class);<br />Assert.assertEquals("hello world", bean.getHelloWorld());<br /></pre><br />執行 <b>"Maven clean"</b> 去清理 <b>target</b> 資料夾內所有東西，然後再執行 <b>"Maven test"</b>，<b>Console</b> 會打印出以下內容:<br /><pre class="brush: text">[INFO] Scanning for projects...<br />[INFO]                                                                         <br />[INFO] ------------------------------------------------------------------------<br />[INFO] Building Maven Tutorial 1.0.0-SNAPSHOT<br />[INFO] ------------------------------------------------------------------------<br />[INFO] <br />[INFO] --- maven-resources-plugin:2.4.1:resources (default-resources) @ javase ---<br />[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!<br />[INFO] Copying 1 resource<br />[INFO] <br />[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ javase ---<br />[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!<br />[INFO] Compiling 2 source files to D:\testing\javase\target\classes<br />[INFO] <br />[INFO] --- maven-resources-plugin:2.4.1:testResources (default-testResources) @ javase ---<br />[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!<br />[INFO] Copying 0 resource<br />[INFO] <br />[INFO] --- maven-compiler-plugin:2.3.2:testCompile (default-testCompile) @ javase ---<br />[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!<br />[INFO] Compiling 1 source file to D:\testing\javase\target\test-classes<br />[INFO] <br />[INFO] --- maven-surefire-plugin:2.4.3:test (default-test) @ javase ---<br />[INFO] Surefire report directory: D:\testing\javase\target\surefire-reports<br /><br />-------------------------------------------------------<br /> T E S T S<br />-------------------------------------------------------<br />Running com.ctlok.pro.tutorial.maven.javase.test.SimpleTest<br />Sep 20, 2010 4:26:33 AM org.springframework.context.support.AbstractApplicationContext prepareRefresh<br />INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@ad3ba4: startup date [Mon Sep 20 04:26:33 GMT 2010]; root of context hierarchy<br />Sep 20, 2010 4:26:33 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions<br />INFO: Loading XML bean definitions from class path resource [beans.xml]<br />Sep 20, 2010 4:26:33 AM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons<br />INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1b09468: defining beans [helloWorldBean]; root of factory hierarchy<br />Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.323 sec &lt;&lt;&lt; FAILURE!<br /><br />Results :<br /><br />Failed tests: <br />  testHelloWorld(com.ctlok.pro.tutorial.maven.javase.test.SimpleTest)<br /><br />Tests run: 1, Failures: 1, Errors: 0, Skipped: 0<br /><br />[INFO] ------------------------------------------------------------------------<br />[INFO] BUILD FAILURE<br />[INFO] ------------------------------------------------------------------------<br />[INFO] Total time: 2.812s<br />[INFO] Finished at: Mon Sep 20 04:26:33 GMT 2010<br />[INFO] Final Memory: 2M/8M<br />[INFO] ------------------------------------------------------------------------<br />[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.4.3:test (default-test) on project javase: There are test failures.<br /><br />Please refer to D:\testing\javase\target\surefire-reports for the individual test results.<br />-> [Help 1]<br />[ERROR] <br />[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.<br />[ERROR] Re-run Maven using the -X switch to enable full debug logging.<br />[ERROR] <br />[ERROR] For more information about the errors and possible solutions, please read the following articles:<br />[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException<br /></pre><br />這就是測試失敗的訊息了，使用 <b>"Maven package"</b> 時，<b>Maven</b> 也會自動去執行一次測試的。現在可以執行 <b>"Maven clean"</b> 去清理 <b>target</b> 資料夾內所有東西，然後再執行 <b>"Maven package"</b> 去打包整個程式。<br /><br />以上就是簡單的 <b>Maven</b> 應用，你現在應該掌握到 <b>Maven</b> 的基本使用方法，接下來可以試試在沒有 <b>Eclipse</b> 和 <b>m2eclipse</b> 的情況下使用 <b>Maven</b> 去管理 <b>Jave</b> 項目。<br /><br />Apache Maven 網址: <a href="http://maven.apache.org/">http://maven.apache.org/</a><br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Java-Power-Tools-Ferguson-Smart/dp/0596527934?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Java Power Tools" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596527934&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596527934" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Maven-Definitive-Guide-Sonatype-Company/dp/0596517335?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Maven: The Definitive Guide" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596517335&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596517335" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Apache-Maven-2-Effective-Implementation/dp/1847194540?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Apache Maven 2 Effective Implementation" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1847194540&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1847194540" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-3286996958206602644?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse + Maven 2 開發 Java SE 專案 - 2]]></title>
    <link href="http://pro.ctlok.com/2010/09/eclipse-maven-2-develop-java-se-project_17.html"/>
    <updated>2010-09-17T16:54:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/09/eclipse-maven-2-develop-java-se-project_17</id>
    <content type="html"><![CDATA[<p>上一編: <a href="http://pro.ctlok.com/2010/09/eclipse-maven-2-develop-java-se-project.html">Eclipse + Maven 2 開發 Java SE 專案 - 1</a><br /><br />在上一篇已經成功使用 <b>Maven</b> 製作出一個 <b>Hello World</b> 程式出來，但仍然未能體驗到 <b>Maven</b> 有什麼好處。在這一編文章，程式需要用到 <b>Spring Framework</b>，<b>Spring</b> 的依賴程式庫就交由 <b>Maven</b> 去管理，令各位可以體驗到 <b>Maven</b> 強大之處。<br /><br />使用上一編文章的 <b>Project</b> 再去進行 <b>Maven</b> 練習，打開 <b>pom.xml</b>，然後選擇 <b>Dependenices</b> 標籤，按下 <b>Add</b> 然後輸入 <b>org.spring</b> 找到一大堆 <b>Spring Framework</b> 的程式庫:<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJMi-tAIihI/AAAAAAAAAnc/R6KMHCGH-Ow/s1600/eclipse-maven-javase-1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="300" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJMi-tAIihI/AAAAAAAAAnc/R6KMHCGH-Ow/s320/eclipse-maven-javase-1.png" width="320" /></a></div><br />總共要加入 3 個程式庫，分別是 <b>spring-context</b>, <b>spring-beans</b> 和 <b>spring-core</b>，如下圖所示:<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJMi_J2DNeI/AAAAAAAAAng/hS_mjiHdCkg/s1600/eclipse-maven-javase-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="168" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJMi_J2DNeI/AAAAAAAAAng/hS_mjiHdCkg/s320/eclipse-maven-javase-2.png" width="320" /></a></div><br />儲存 <b>pom.xml</b>，然後發現 Console 顯示下載所需的程式庫，等到下載完成後，打開 <b>Maven Dependenices</b> 發現不是 3 個程式庫，而是有 9 個程式庫，分別是 spring-context, spring-aop, aopilliance, spring-asm, spring-beans, sprng-core, commons-logging, spring-expression。原來那 3 個 <b>Spring</b> 程式庫要依賴另外那 6 個程式庫，而這些程式庫已經由 <b>Maven</b> 管理好，我們根本不需要去理會那些依賴程式庫，只要知道自己的程式需要用什麼程式庫就可以了，實在非常方便。<br /><br />現在製作一個 HelloWorldBean.java:<br /><pre class="brush: java">package com.ctlok.pro.tutorial.maven.javase.bean;<br /><br />public class HelloWorldBean {<br />    <br />    public String getHelloWorld(){<br />        return "Hello World";<br />    }<br />    <br />}<br /></pre><br />再到 <b>src/main/resources</b> 加入一個 <b>beans.xml</b> 檔案:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br />&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;<br />    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br />    xsi:schemaLocation=&quot;<br />http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;<br /><br />    &lt;bean id=&quot;helloWorldBean&quot;<br />        class=&quot;com.ctlok.pro.tutorial.maven.javase.bean.HelloWorldBean&quot; /&gt;<br /><br />&lt;/beans&gt;<br /></pre><br />現在修改 <b>Main.java</b> 為以下內容:<br /><pre class="brush: java">package com.ctlok.pro.tutorial.maven.javase;<br /><br />import org.springframework.context.ApplicationContext;<br />import org.springframework.context.support.ClassPathXmlApplicationContext;<br /><br />import com.ctlok.pro.tutorial.maven.javase.bean.HelloWorldBean;<br /><br />public class Main {<br /><br />    public static void main(String[] args) {<br /><br />        ApplicationContext ctx = new ClassPathXmlApplicationContext(<br />                new String[] { "beans.xml" });<br />        HelloWorldBean bean = (HelloWorldBean) ctx<br />                .getBean(HelloWorldBean.class);<br />        System.out.println(bean.getHelloWorld());<br /><br />    }<br /><br />}<br /></pre><br />程式方面已經製作完成，現在需要打包成 <b>Runnable JAR</b> 檔案，但因為這個程式依賴了 9 個程式庫，我們需要將自己的 <b>Class</b> 檔案連同程式庫一起打包到同一個 <b>JAR</b> 內才可以執行到。打包部份可使用 <b>Maven Plugin</b> 去幫助我們連同程式庫一起打包到同一個 <b>JAR</b> 內。<br /><br />打開 <b>pom.xml</b> 到 並按下 <b>Plugins</b> 標籤，按下 <b>Add</b> 然後輸入 <b>maven-dependency-plugin</b>，加入這個 <b>Plugin</b>，現在 pom.xml 內一共有 2 個 <b>Plugin</b>，一個是 <b>maven-dependency-plugin</b>，另一個是 <b>maven-jar-plugin</b>。<br /><br />現在去設定 <b>maven-dependency-plugin</b>，按下 <b>pom.xml</b> 標籤，將 <b>maven-dependency-plugin</b> 改為以下內容:<br /><pre class="brush: xml">&lt;plugin&gt;<br />    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br />    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;<br />    &lt;version&gt;2.1&lt;/version&gt;<br />    &lt;executions&gt;<br />        &lt;execution&gt;<br />            &lt;id&gt;ud&lt;/id&gt;<br />            &lt;phase&gt;prepare-package&lt;/phase&gt;<br />            &lt;goals&gt;<br />                &lt;goal&gt;unpack-dependencies&lt;/goal&gt;<br />            &lt;/goals&gt;<br />        &lt;/execution&gt;<br />    &lt;/executions&gt;<br />    &lt;configuration&gt;<br />        &lt;outputDirectory&gt;${project.build.outputDirectory}&lt;/outputDirectory&gt;<br />    &lt;/configuration&gt;<br />&lt;/plugin&gt;<br /></pre><br /><b>execution</b> 內的 <b>phase</b> 是設定何時執行這個 <b>Plugin</b>，我設定為準備打包前。<br />而 <b>goals</b> 則可以設定這個 Plugin 執行時會使用的方法，可設定多於一種方法。我設定為將程式庫的 <b>JAR</b> 拆解開。<br /><br /><b>configuration</b> 內的 <b>outputDirectory</b> 是設定將這些程式庫複製到那一個資料夾內。<br /><br />完整的 <b>pom.xml</b>:<br /><pre class="brush: xml">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br />    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br />    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br />    &lt;groupId&gt;com.ctlok.pro.tutorial.maven.javase&lt;/groupId&gt;<br />    &lt;artifactId&gt;javase&lt;/artifactId&gt;<br />    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;<br />    &lt;name&gt;Maven Tutorial&lt;/name&gt;<br />    &lt;description&gt;Maven Tutorial&lt;/description&gt;<br />    &lt;build&gt;<br />        &lt;plugins&gt;<br />            &lt;plugin&gt;<br />                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br />                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;<br />                &lt;version&gt;2.3.1&lt;/version&gt;<br />                &lt;configuration&gt;<br />                    &lt;archive&gt;<br />                        &lt;manifest&gt;<br />                            &lt;mainClass&gt;com.ctlok.pro.tutorial.maven.javase.Main&lt;/mainClass&gt;<br />                            &lt;packageName&gt;com.ctlok.pro.tutorial.maven.javase&lt;/packageName&gt;<br />                            &lt;addClasspath&gt;false&lt;/addClasspath&gt;<br />                        &lt;/manifest&gt;<br />                        &lt;manifestEntries&gt;<br />                            &lt;mode&gt;development&lt;/mode&gt;<br />                            &lt;url&gt;${pom.url}&lt;/url&gt;<br />                        &lt;/manifestEntries&gt;<br />                    &lt;/archive&gt;<br />                &lt;/configuration&gt;<br />            &lt;/plugin&gt;<br />            &lt;plugin&gt;<br />                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br />                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;<br />                &lt;version&gt;2.1&lt;/version&gt;<br />                &lt;executions&gt;<br />                    &lt;execution&gt;<br />                        &lt;id&gt;ud&lt;/id&gt;<br />                        &lt;phase&gt;prepare-package&lt;/phase&gt;<br />                        &lt;goals&gt;<br />                            &lt;goal&gt;unpack-dependencies&lt;/goal&gt;<br />                        &lt;/goals&gt;<br />                    &lt;/execution&gt;<br />                &lt;/executions&gt;<br />                &lt;configuration&gt;<br />                    &lt;outputDirectory&gt;${project.build.outputDirectory}&lt;/outputDirectory&gt;<br />                &lt;/configuration&gt;<br />            &lt;/plugin&gt;<br />        &lt;/plugins&gt;<br />    &lt;/build&gt;<br />    &lt;dependencies&gt;<br />        &lt;dependency&gt;<br />            &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br />            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;<br />            &lt;version&gt;3.0.4.RELEASE&lt;/version&gt;<br />            &lt;type&gt;jar&lt;/type&gt;<br />            &lt;scope&gt;compile&lt;/scope&gt;<br />        &lt;/dependency&gt;<br />        &lt;dependency&gt;<br />            &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br />            &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;<br />            &lt;version&gt;3.0.4.RELEASE&lt;/version&gt;<br />            &lt;type&gt;jar&lt;/type&gt;<br />            &lt;scope&gt;compile&lt;/scope&gt;<br />        &lt;/dependency&gt;<br />        &lt;dependency&gt;<br />            &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br />            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;<br />            &lt;version&gt;3.0.4.RELEASE&lt;/version&gt;<br />            &lt;type&gt;jar&lt;/type&gt;<br />            &lt;scope&gt;compile&lt;/scope&gt;<br />        &lt;/dependency&gt;<br />    &lt;/dependencies&gt;<br />&lt;/project&gt;<br /></pre><br />現在執行 <b>Run as -> Maven package</b>，完成後發現 <b>target</b> 出現一個 <b>javase-1.0.0-SNAPSHOT.jar</b>，使用指令去執行程式:<br /><br /><pre class="brush: bat">C:>java -jar javase-1.0.0-SNAPSHOT.jar<br /></pre><br />出現以下訊息即代表成功:<br /><pre class="brush: text">Sep 17, 2010 4:50:02 PM org.springframework.context.support.AbstractApplicationC<br />ontext prepareRefresh<br />INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationCont<br />ext@758fc9: startup date [Fri Sep 17 16:50:02 CST 2010]; root of context hierarc<br />hy<br />Sep 17, 2010 4:50:02 PM org.springframework.beans.factory.xml.XmlBeanDefinitionR<br />eader loadBeanDefinitions<br />INFO: Loading XML bean definitions from class path resource [beans.xml]<br />Sep 17, 2010 4:50:04 PM org.springframework.beans.factory.support.DefaultListabl<br />eBeanFactory preInstantiateSingletons<br />INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.<br />DefaultListableBeanFactory@bfc8e0: defining beans [helloWorldBean]; root of fact<br />ory hierarchy<br />Hello World<br /></pre><br />下一編再說。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Power-Distance-II-Advanced-Techniques/dp/B0007DBB5S?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Power &amp; Distance II: Advanced Techniques and Drills for the Perfect Swing" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=B0007DBB5S&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=B0007DBB5S" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Maven-Developers-Notebook-Notebooks/dp/0596007507?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Maven: A Developer&#39;s Notebook (Developer&#39;s Notebooks)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596007507&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596007507" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Maven-Definitive-Guide-Sonatype-Company/dp/0596517335?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Maven: The Definitive Guide" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596517335&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596517335" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5315520784844396473?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse + Maven 2 開發 Java SE 專案 - 1]]></title>
    <link href="http://pro.ctlok.com/2010/09/eclipse-maven-2-develop-java-se-project.html"/>
    <updated>2010-09-16T11:41:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/09/eclipse-maven-2-develop-java-se-project</id>
    <content type="html"><![CDATA[<p>轉了新工作，所以比較忙碌，今天拿一點時間寫寫文章。新公司需要用到 <b>Maven</b> 這一套專案管理系統，以前我也想去學習一下，但因為要設定 <b>XML</b> 檔案或一些指令，最後又打消了念頭。現在因為新公司要用到 <b>Maven</b>，不學不行，只好硬著頭皮去學，在學習過程中真的覺得 <b>Maven</b> 是一套非常強大的管理系統，有點後悔太遲學。<br /><br /><b>Maven</b> 是一套專案管理系統，<b>Maven</b> 使用一個 POM.xml (POM = Project Object Model) 去設定整個專案，<b>Maven</b> 不是只能管理單一專案，在一個專案內可能包括了數個不同組件的專案，<b>Maven</b> 也一樣支援。而 <b>Maven</b> 亦能替專案管理好依賴程式庫 (Library)，就算是程式庫的依賴程式庫也一樣可以管理好，我認為這個是 <b>Maven</b> 最強大的功能。在還未學懂使用 <b>Maven</b> 之前，使用 <b>Spring Framework</b> 時，可能會不知道原來 <b>Spring</b> 是需要 <b>Common Logging</b> 這一個程式庫的，到運行程式發覺有錯誤，上網找找才知道要加入 <b>Common Logging</b> 這個程式庫。使用了 <b>Maven</b> 便不用再擔心這個問題，你只需要關心你的專案需要那一個程式庫，不用去關心程式庫依賴那一個程式庫，以下我會使用一個簡單例子去幫助各位去學習 <b>Maven</b>。<br /><br />學習 <b>Maven</b> 前請先準備 <b>Eclipse</b>，為什麼要用 <b>Eclipse</b> 呢，因為 <b>Eclipse</b> 有一個 <b>Maven</b> 的 <b>Plugin</b>，這個 <b>Plugin</b> 可以幫助你去設定 <b>Maven</b> 的 <b>pom.xml</b> 又可以不用使用指令去操作 <b>Maven</b>。我認為學習 <b>Maven</b> 的最大阻力是設定 <b>POM.xml</b> 和指令部份，首先借助 <b>Plugin</b> 去了解 <b>Maven</b> 的基本結構，才慢慢去記一些指令和學習手動設定 <b>POM.xml</b>，會令學習更容易。<br /><br />Eclipse 下載網址: <a href="http://www.eclipse.org/downloads/">http://www.eclipse.org/downloads/</a><br />m2eclipse (Plugin) 下載網址: <a href="http://m2eclipse.sonatype.org/installing-m2eclipse.html">http://m2eclipse.sonatype.org/installing-m2eclipse.html</a><br /><br />安裝完成後請將 <b>Eclipse</b> 使用的 <b>JRE</b> 轉為 <b>JDK</b>。<br /><br />新增一個 <b>Maven Project</b>，如下圖所示:<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJGEJOsprpI/AAAAAAAAAnA/Kx90zm5VEgA/s1600/maven-jave-se-1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="304" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJGEJOsprpI/AAAAAAAAAnA/Kx90zm5VEgA/s320/maven-jave-se-1.png" width="320" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">選擇 Create a simple project，然後按 Next:</div><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/TJGEJtsXXkI/AAAAAAAAAnE/VTJx08-9b9E/s1600/maven-jave-se-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="289" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/TJGEJtsXXkI/AAAAAAAAAnE/VTJx08-9b9E/s320/maven-jave-se-2.png" width="320" /></a></div><br />填上下圖的資料，然後按 Finish:<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJGEKMnuylI/AAAAAAAAAnI/nmbYLkiZN-c/s1600/maven-jave-se-3.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="289" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJGEKMnuylI/AAAAAAAAAnI/nmbYLkiZN-c/s320/maven-jave-se-3.png" width="320" /></a></div><br />應該會見到 Project 的結構和下圖一樣:<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJGEKlfzSsI/AAAAAAAAAnM/vW95LGErnmE/s1600/maven-jave-se-4.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJGEKlfzSsI/AAAAAAAAAnM/vW95LGErnmE/s1600/maven-jave-se-4.png" /></a></div><br />因為是開發 Java SE 的項目，將 Perspective 轉為 Java:<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJGEK52pfaI/AAAAAAAAAnQ/3VpIGDQ9nQQ/s1600/maven-jave-se-5.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJGEK52pfaI/AAAAAAAAAnQ/3VpIGDQ9nQQ/s1600/maven-jave-se-5.png" /></a></div><br />變成以下樣子:<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJGELAM5FEI/AAAAAAAAAnU/KTVq2cbaAzs/s1600/maven-jave-se-6.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/TJGELAM5FEI/AAAAAAAAAnU/KTVq2cbaAzs/s1600/maven-jave-se-6.png" /></a></div><br />最後將 <b>JRE System Library [J2SE-1.4]</b> 改為你使用中的 <b>Java SDK</b>。<br /><br /><b>Maven</b> 的主要結構是由 2 個資料夾加上一個 <b>pom.xml</b> 所組成，<b>src</b> 這個資料夾是存放所有檔案的地方，項目所有檔案都是在這個資料夾內，而 <b>target</b> 這個資料夾可以不用理，因為是 <b>Maven</b> 存放完成檔案的地方，例如: JAR, WAR, EAR 等等。<b>pom.xml</b> 是存放 <b>Maven</b> 設定的地方，例如專案名稱，版本等等。<br /><br /><b>src</b> 資料夾內又有 2 個檔案，一個是 <b>main</b>，一個是 <b>test</b>。<b>main</b> 資料夾用來存放項目的檔案，而 <b>test</b> 是存放測試程式的程式，例如 <b>JUnit</b> 的測試檔案。<br /><br /><b>main</b> 和 <b>test</b> 資料夾都有 <b>java</b> 和 <b>resource</b> 這 2 個資料夾，<b>java</b> 資料夾是存放 <b>Java Class</b> 的地方，Resource 是存放程式需要用到的檔案，例如: 文字檔案，XML 檔案等等。<br /><br />先試試寫一個 <b>Hello World</b> 的程式，在 <b>src/main/java</b> 內新增一個 <b>Class</b>:<br /><pre class="brush: java">package com.ctlok.pro.tutorial.maven.javase;<br /><br />public class Main {<br /><br />    public static void main(String[] args) {<br /><br />        System.out.println("Hello World");<br /><br />    }<br /><br />}<br /></pre><br />因為這個項目包括了 <b>main method</b>，<b>Maven</b> 在預設打包成的 <b>JAR</b> 是不會指定那一個 <b>Class</b> 有 <b>main method</b>，所以打包好的 <b>JAR</b> 不能直接執行。但我們可以靠一些 <b>Maven Plugin</b> 去變更 <b>Maven</b> 預設行為。<br /><br />打開 <b>pom.xml</b>，在編輯器下面會有一些標籤，選擇 <b>Plugin</b> 標籤，然後在 <b>Plugins</b> 這個框架下按下 <b>Add</b> 這個按鈕，然後輸入 <b>maven-jar</b>，程式會搜尋到 2 個 <b>plugins</b>，選擇第一個再按下 <b>OK</b> 就可以了。<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/TJGNdcNFv8I/AAAAAAAAAnY/NzTwLPP2BR0/s1600/maven-jave-se-7.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="300" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/TJGNdcNFv8I/AAAAAAAAAnY/NzTwLPP2BR0/s320/maven-jave-se-7.png" width="320" /></a></div><br /><b>m2eclipse</b> 這個 <b>Plugin</b> 不支援輸入 <b>Maven Plugin</b> 的設定，一定要手動加入才可以，在編輯器下面選擇 <b>pom.xml</b> 標籤，將 <b>maven-jar-plugin</b> 改為:<br /><pre class="brush: xml">&lt;plugin&gt;<br />    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br />    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;<br />    &lt;version&gt;2.3.1&lt;/version&gt;<br />    &lt;configuration&gt;<br />        &lt;archive&gt;<br />            &lt;manifest&gt;<br />                &lt;mainClass&gt;com.ctlok.pro.tutorial.maven.javase.Main&lt;/mainClass&gt;<br />                &lt;packageName&gt;com.ctlok.pro.tutorial.maven.javase&lt;/packageName&gt;<br />            &lt;/manifest&gt;<br />            &lt;manifestEntries&gt;<br />                &lt;mode&gt;development&lt;/mode&gt;<br />                &lt;url&gt;${pom.url}&lt;/url&gt;<br />            &lt;/manifestEntries&gt;<br />        &lt;/archive&gt;<br />    &lt;/configuration&gt;<br />&lt;/plugin&gt;<br /></pre><br />完整的 <b>pom.xml</b>:<br /><pre class="brush: xml">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br />    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br />    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br />    &lt;groupId&gt;com.ctlok.pro.tutorial.maven.javase&lt;/groupId&gt;<br />    &lt;artifactId&gt;javase&lt;/artifactId&gt;<br />    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;<br />    &lt;name&gt;Maven Tutorial&lt;/name&gt;<br />    &lt;description&gt;Maven Tutorial&lt;/description&gt;<br />    &lt;build&gt;<br />        &lt;plugins&gt;<br />            &lt;plugin&gt;<br />                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br />                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;<br />                &lt;version&gt;2.3.1&lt;/version&gt;<br />                &lt;configuration&gt;<br />                    &lt;archive&gt;<br />                        &lt;manifest&gt;<br />                            &lt;mainClass&gt;com.ctlok.pro.tutorial.maven.javase.Main&lt;/mainClass&gt;<br />                            &lt;packageName&gt;com.ctlok.pro.tutorial.maven.javase&lt;/packageName&gt;<br />                        &lt;/manifest&gt;<br />                        &lt;manifestEntries&gt;<br />                            &lt;mode&gt;development&lt;/mode&gt;<br />                            &lt;url&gt;${pom.url}&lt;/url&gt;<br />                        &lt;/manifestEntries&gt;<br />                    &lt;/archive&gt;<br />                &lt;/configuration&gt;<br />            &lt;/plugin&gt;<br />        &lt;/plugins&gt;<br />    &lt;/build&gt;<br />&lt;/project&gt;<br /></pre><br />選取 <b>Project</b>，然後 <b>Run As -> Maven package</b>，將會在 <b>Console</b> 出現以下資訊:<br /><pre class="brush: text">[INFO] Scanning for projects...<br />[INFO]                                                                         <br />[INFO] ------------------------------------------------------------------------<br />[INFO] Building Maven Tutorial 1.0.0-SNAPSHOT<br />[INFO] ------------------------------------------------------------------------<br />[INFO] <br />[INFO] --- maven-resources-plugin:2.4.1:resources (default-resources) @ javase ---<br />[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!<br />[INFO] Copying 0 resource<br />[INFO] <br />[INFO] --- maven-compiler-plugin:2.0.2:compile (default-compile) @ javase ---<br />[INFO] Nothing to compile - all classes are up to date<br />[INFO] <br />[INFO] --- maven-resources-plugin:2.4.1:testResources (default-testResources) @ javase ---<br />[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!<br />[INFO] Copying 0 resource<br />[INFO] <br />[INFO] --- maven-compiler-plugin:2.0.2:testCompile (default-testCompile) @ javase ---<br />[INFO] Nothing to compile - all classes are up to date<br />[INFO] <br />[INFO] --- maven-surefire-plugin:2.4.3:test (default-test) @ javase ---<br />[INFO] Surefire report directory: D:\testing\javase\target\surefire-reports<br /><br />-------------------------------------------------------<br /> T E S T S<br />-------------------------------------------------------<br />There are no tests to run.<br /><br />Results :<br /><br />Tests run: 0, Failures: 0, Errors: 0, Skipped: 0<br /><br />[INFO] <br />[INFO] --- maven-jar-plugin:2.3.1:jar (default-jar) @ javase ---<br />[INFO] Building jar: D:\testing\javase\target\javase-1.0.0-SNAPSHOT.jar<br />[INFO] ------------------------------------------------------------------------<br />[INFO] BUILD SUCCESS<br />[INFO] ------------------------------------------------------------------------<br />[INFO] Total time: 1.500s<br />[INFO] Finished at: Thu Sep 16 03:32:33 GMT 2010<br />[INFO] Final Memory: 2M/4M<br />[INFO] ------------------------------------------------------------------------<br /></pre><br />你會發現在 <b>target</b> 資料夾內出現一個 <b>javase-1.0.0-SNAPSHOT.jar</b>，可以試試用指令去執行這個 <b>JAR</b>:<br /><pre class="brush: bat">C:>java -jar javase-1.0.0-SNAPSHOT.jar<br /></pre><br />出現 <b>Hello World</b> 即代表打包成功。<br /><br />下一篇: <a href="http://pro.ctlok.com/2010/09/eclipse-maven-2-develop-java-se-project_17.html">Eclipse + Maven 2 開發 Java SE 專案 - 2</a><br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Apache-Maven-2-Effective-Implementation/dp/1847194540?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Apache Maven 2 Effective Implementation" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1847194540&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1847194540" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Maven-Definitive-Guide-Sonatype-Company/dp/0596517335?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Maven: The Definitive Guide" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596517335&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596517335" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Maven-Developers-Notebook-Notebooks/dp/0596007507?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Maven: A Developer&#39;s Notebook (Developer&#39;s Notebooks)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596007507&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596007507" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-6274436087479560985?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
