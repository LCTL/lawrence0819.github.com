<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Abstract Factory Pattern | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/abstract-factory-pattern/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2015-12-17T10:59:14+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design Pattern - Abstract Factory]]></title>
    <link href="http://pro.ctlok.com/blog/2012/04/02/design-pattern-abstract-factory.html"/>
    <updated>2012-04-02T21:30:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/04/02/design-pattern-abstract-factory</id>
    <content type="html"><![CDATA[<p>上一篇已經介紹過的 Factory Pattern 可以將建立實例的程式碼抽取出來，
並可以提供絡不同的物件使用。Abstract Factory Pattern 其實和
Factory Pattern 很相似，但 Abstract Factory 比較偏向建立同一系統的物件。</p>

<p>同一系列的意思是彼此的物件有一定的關連，例如: 輪子、引擎、車架、方向盤、儀標板等等。
這些都是組成車子的組件，這些組件亦由可以由不同廠商去開發，Abstract Factory 扮演角色就是廠商。
更改廠商，就可以建立不同樣式的車子。</p>

<p>看看以下例子應該有助你明白這個模式：</p>

<!--more-->


<hr />

<p>公司要開發一款迷宮遊戲，建立迷宮的組件有：『牆壁』、『門』和『道路』。
遊戲在不同的關卡會顯示不同風格的迷宮，首先要將做出組件的介面和建立一個工廠介面。</p>

<p>{% img /downloads/code/design-pattern-abstract-factory/sample1/uml.png %}</p>

<p>組件介面:
{% include_code design-pattern-abstract-factory/sample1/component/Component.java %}
{% include_code design-pattern-abstract-factory/sample1/component/Door.java %}
{% include_code design-pattern-abstract-factory/sample1/component/Wall.java %}
{% include_code design-pattern-abstract-factory/sample1/component/Road.java %}
{% include_code design-pattern-abstract-factory/sample1/component/Labyrinth.java %}</p>

<p>藍色風格的組件:
{% include_code design-pattern-abstract-factory/sample1/component/blue/BlueDoor.java %}
{% include_code design-pattern-abstract-factory/sample1/component/blue/BlueWall.java %}
{% include_code design-pattern-abstract-factory/sample1/component/blue/BlueRoad.java %}</p>

<p>綠色風格的組件:
{% include_code design-pattern-abstract-factory/sample1/component/green/GreenDoor.java %}
{% include_code design-pattern-abstract-factory/sample1/component/green/GreenWall.java %}
{% include_code design-pattern-abstract-factory/sample1/component/green/GreenRoad.java %}</p>

<p>工廠介面:
{% include_code design-pattern-abstract-factory/sample1/factory/LabyrinthComponentFactory.java %}
{% include_code design-pattern-abstract-factory/sample1/factory/BlueStyleLabyrinthComponentFactory.java %}
{% include_code design-pattern-abstract-factory/sample1/factory/GreenStyleLabyrinthComponentFactory.java %}</p>

<p>{% include_code design-pattern-abstract-factory/sample1/Main.java %}</p>

<p>```text 執行結果
Blue Road
Blue Road
Blue Road
Blue Wall
Blue Road
Blue Door
Blue Wall
Blue Road
Blue Road</p>

<h2>Blue Road</h2>

<p>Green Wall
Green Wall
Green Wall
Green Road
Green Wall
Green Wall
Green Wall
Green Road
Green Wall
Green Road
```</p>

<p>在建立 <code>Labyrinth</code> 時，只需將工廠交給 <code>Labyrinth</code> 就可以建立不同風格的迷宮。</p>

<p>要新增更多風格的組件，只需要建立相對應的工廠就可以了，完全不需要改動 <code>Labyrinth.draw</code> 的程式碼。</p>

<p>不過 Abstract Factory 有一個缺點，如果你要新増一個原先不存在的組件，例如加一個『陷阱』，
你便需要更改 <code>LabyrinthFactory</code> 這個介面。</p>

<hr />

<p>以下的圖片是描述 Abstract Factory Pattern 的 Class Diagram。（From Wiki）</p>

<p>{% img http://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Abstract_factory.svg/517px-Abstract_factory.svg.png %}</p>
]]></content>
  </entry>
  
</feed>
