<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node.js | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/node-js/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-04-16T10:00:31+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[介紹一款 CSS 模組化工具 - LESS]]></title>
    <link href="http://pro.ctlok.com/2012/01/css.html"/>
    <updated>2012-01-31T16:38:00+08:00</updated>
    <id>http://pro.ctlok.com/2012/01/css</id>
    <content type="html"><![CDATA[<p><a href="http://1.bp.blogspot.com/-VdakltfXtKs/TyejMYxi6VI/AAAAAAAAA9I/3b5zk3zpi-4/s1600/logo%255B1%255D.png" imageanchor="1" style=""><img border="0" height="81" width="199" src="http://1.bp.blogspot.com/-VdakltfXtKs/TyejMYxi6VI/AAAAAAAAA9I/3b5zk3zpi-4/s400/logo%255B1%255D.png" /></a><br /><br />網站需要一個漂亮的介面來將資訊帶給用戶，開發這個介面除了要使用 <b>HTML Tag</b> 外，亦需要使用 <b>Cascading Style Sheets (CSS)</b> 去令這個介面更美觀。有人說: 你只要複製一次程式碼其實亦是複製了一個 <b>Bug</b>，所以我們在設計程式時也盡量不要將相同的程式碼複製到不同地方，在 <b>Java</b> 可以將一些程式碼包裝成 <b>Object</b> 以便不同地方也使用同一組程式碼，但在 <b>CSS</b> 又怎麼辦? 使用外部的 <b>CSS</b> 檔案其實已經很大程度地減少重複的外觀設置程式碼，但這仍然不足夠。<br /><br />今次介紹的工具能夠在 <b>CSS</b> 設置一些常用參數，外觀設置程式碼的組合，簡單的算法和使用 <b>Javascript</b> 功能等等。這款工具就是 <b>LESS</b> 了。<br /><br />以下例子可以對比普通 <b>CSS</b> 和 <b>LESS CSS</b> 的不同。<br /><br />參數:<br /><br />普通 <b>CSS</b>:<br /><pre class="brush:css">.header{<br />    background-color: #777;<br />    color: #f5f5f5;<br />}<br /><br />a{<br />    color: #777;<br />}<br /><br />p.desc{<br />    border: solid 1px #777;<br />    color: #777;<br />}<br /></pre><br />以上的 <b>CSS</b> 出現了好幾次 <b>#777</b> 這個顏色設置，如果網頁樣式改變了，需要將灰色設置為淺一點的灰色，只好一個一個 <b>#777</b> 找出來加以修改。<br /><br />使用 <b>LESS</b> 可以:<br /><pre class="brush:css">@gray: #777;<br />@smoke-white: #f5f5f5;<br />.header{<br />    background-color: @gray;<br />    color: @smoke-white;<br />}<br /><br />a{<br />    color: @gray;<br />}<br /><br />p.desc{<br />    border: solid 1px @gray;<br />    color: @gray;<br />}<br /></pre><br />這樣只需將 @gray 參數改變就可以一次轉換所有灰色了。<br /><br />除了參數還可以組合外觀設置程式碼:<br /><br />普通 <b>CSS</b>:<br /><pre class="brush:css">.header{<br />    border-radius: 5px;<br />    -moz-border-radius: 5px;<br />    -webkit-border-radius: 5px;<br />}<br /><br />ul.stack li{<br />    border-radius: 3px;<br />    -moz-border-radius: 3px;<br />    -webkit-border-radius: 3px;<br />}<br /></pre><br /><b>LESS CSS</b>:<br /><pre class="brush:css">.border-radius (@radius 5px) {<br />    border-radius: @radius;<br />    -moz-border-radius: @radius;<br />    -webkit-border-radius: @radius;<br />}<br /><br />.header{<br />    .border-radius;<br />}<br /><br />ul.stack li{<br />    .border-radius(3px);<br />}<br /></pre><br />因為不同的瀏覽器設置圓角的程式碼也不同，如果以後又有一款新瀏覽器提供圓角的樣式，就可以加一句到 .border-radius 就完成所有設置，方便得多。<br /><b>LESS</b> 的組合外觀設置程式碼提供了傳入參數和默認參數。<br /><br /><b>LESS</b> 可以令 <b>CSS</b> 程式碼更直觀:<br /><br />普通 <b>CSS</b>:<br /><pre class="brush:css">.header p{<br />    background-color: #777;<br />}<br /><br />.header p span{<br />    font-size: 18px;<br />}<br /><br />.header p span.brand a{<br />    color: #ccc;<br />}<br /><br />.header p span.brand a:hover{<br />    color: #f5f5f5;<br />}<br /></pre><br /><b>LESS CSS</b>:<br /><pre class="brush:css">.header{<br />    p{<br />        background-color: #777;<br /><br />        span{<br />            font-size: 18px;<br /><br />            &amp;.brand{<br />                a{<br />                    color: #ccc;<br /><br />                    &amp;:hover{<br />                        color: #f5f5f5;<br />                    }<br />                }<br />            }<br />        }<br />    }<br />}<br /></pre><br />這樣可以更加清楚知道 <b>.header</b> 內的所有風格。<br /><br />如要使用 <b>LESS</b> 有 <b>2</b> 種方法:<br /><ul><li>使用 <b>less.js</b> 在瀏覽器將 <b>LESS CSS</b> 轉換為普通 <b>CSS</b></li><li>下載 <b>Node.js</b> 然後使用 <b>npm</b> 去下載 <b>LESS</b> 並使用 <b>Command</b> 將 <b>LESS CSS</b> 轉換為普通 <b>CSS</b></li></ul><br />第一個方法在開發環境使用還好，在真實環境建議使用第 2 種方法。<br /><br />我弄了一個 <b>Node.js</b> 的 <b>script</b> 以方便大量轉換 <b>CSS</b>，有興趣可拿去用:<br /><pre class="brush:js">#!/usr/bin/env node<br /><br />var sys = require(&#39;util&#39;)<br />var fs = require(&#39;fs&#39;);<br />var less = require(&#39;less&#39;);<br /><br />var targetDir = &#39;public&#39;;<br />var currentDir = &#39;source&#39;;<br /><br />convertResource(currentDir);<br /><br />function convertResource(dirName){<br />    fs.readdir(dirName, function(err, files){<br />        if (err){<br />            console.log(err);<br />            return;<br />        }<br />        for (var i = 0; i &lt; files.length; i++){<br />            (function(){<br />                var sourceFile = dirName + &quot;/&quot; + files[i];<br />                var targetFile = sourceFile.replace(currentDir, targetDir);<br />                fs.lstat(sourceFile, function(e, stats){<br />                    if (stats.isDirectory()){<br />                        if (!isFileExist(targetFile)){<br />                            fs.mkdirSync(targetFile);<br />                        }<br />                        convertResource(sourceFile);<br />                    }else{<br />                        if (sourceFile.match(/<sup>(.*)(.css|.less)$/i)){&lt;br</sup> />                            complieCss(sourceFile, targetFile.replace(/<sup>(.*)(.css|.less)$/i,</sup> &quot;$1.css&quot;));<br />                        }else{<br />                            var is = fs.createReadStream(sourceFile)<br />                            var os = fs.createWriteStream(targetFile);<br />                            sys.pump(is, os);<br />                        }<br />                    }<br />                });<br />            })();<br />        }<br />    });<br />}<br /><br />function complieCss(sourceFile, targetFile){<br />    fs.readFile(sourceFile, &quot;utf-8&quot;, function(e, data){<br />        new(less.Parser)({<br />            paths: [&quot;.&quot;, sourceFile.substring(0, sourceFile.lastIndexOf(&#39;/&#39;))],<br />            filename: sourceFile<br />        }).parse(data, function (err, tree) {<br />            if (err) {<br />                console.log(err);<br />            } else {<br />                try {<br />                    css = tree.toCSS({<br />                        yuicompress: true<br />                    });<br />                    if (targetFile) {<br />                        if (isFileExist(targetFile)){<br />                            fs.unlinkSync(targetFile);<br />                        }<br />                        var fd = fs.openSync(targetFile, &quot;w&quot;);<br />                        fs.writeSync(fd, css, 0, &quot;utf8&quot;);<br />                    }else{<br />                        sys.print(css);<br />                    }<br />                } catch (e) {<br />                    console.log(&quot;CSS file complie error. Ignore file: &quot; + sourceFile);<br />                }<br />            }<br />        });<br />    });<br />}<br /><br />function isFileExist (path) { <br />    try { <br />        fs.statSync(path); <br />        return true;<br />    } catch (e) { <br />        return false;<br />    } <br />}<br /></pre><br />更多的用法可在 <b>LESS</b> 官網找到:<br />官網: <a href="http://lesscss.org/">http://lesscss.org/</a><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5259934493976644480?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
