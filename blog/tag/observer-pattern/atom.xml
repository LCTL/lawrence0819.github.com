<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Observer Pattern | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/observer-pattern/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2015-12-17T10:59:14+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design Pattern - Observer]]></title>
    <link href="http://pro.ctlok.com/blog/2012/03/29/design-pattern-observer.html"/>
    <updated>2012-03-29T22:08:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/03/29/design-pattern-observer</id>
    <content type="html"><![CDATA[<p>Observer Pattern 有 2 個重要角色「主題」和「觀察者」，觀察者希望主題狀態有變更時會立即被告知。</p>

<p>你可以想像 Blog 上的 Email 訂閱服務（本 Blog 沒有），當你對這個 Blog 有興趣時，
你會用你的 Email 地址去訂閱服務，當有更新時你會立即收到通知，題示你有更新了，請去看看。
當你對 Blog 上千篇一律的內容感到無聊時，你亦可以取消這個訂閱，那以後有更新亦不會再通知你。</p>

<p>看看以下例子應該有助你明白這個模式：</p>

<!--more-->


<hr />

<p>公司要你開發一個即時新聞平台，用戶只需要打開程式就能夠看到即時新聞。</p>

<p>你一開始可能會用 Pull 的方法，每隔一段時間會主動去向主題拿取新的內容：</p>

<p>{% img /downloads/code/design-pattern-observer/sample1/uml.png %}</p>

<p>{% include_code design-pattern-observer/sample1/NewsTopic.java %}
{% include_code design-pattern-observer/sample1/Client.java %}
{% include_code design-pattern-observer/sample1/Main.java %}</p>

<p><code>text 執行結果
Client 109a4c display message: News 0 at time: Fri Mar 30 00:41:23 CST 2012
Client c40c80 display message: News 0 at time: Fri Mar 30 00:41:25 CST 2012
Client c40c80 display message: News 1 at time: Fri Mar 30 00:41:25 CST 2012
Client 109a4c display message: News 2 at time: Fri Mar 30 00:41:26 CST 2012
Client 109a4c display message: News 1 at time: Fri Mar 30 00:41:26 CST 2012
</code></p>

<p>每個 Client 接收到訊息的時間不一。</p>

<hr />

<p>有客戶抱怨，股票新聞不夠實時，害他掉了錢。公司要你改善一下程式，盡量減少延遲。</p>

<p>現在是 Observer Pattern 大派用場的時候，因為一有更新就會主動通知觀察者，大大減低新聞延遲的問題。</p>

<p>你可能會問，使用舊方法但將間隔縮短不就可以了嗎？
這個方法雖然可以解決延遲的問題，但如果客戶多達 10000 人時，每一個也不停重覆去檢查資料是非常浪費系統資源，
CPU 長期高工作量，會拖跨了系統的其他程式。</p>

<p>{% img /downloads/code/design-pattern-observer/sample2/uml.png %}</p>

<p>{% include_code design-pattern-observer/sample2/Subject.java %}
{% include_code design-pattern-observer/sample2/Observer.java %}
{% include_code design-pattern-observer/sample2/NewsTopic.java %}
{% include_code design-pattern-observer/sample2/Client.java %}
{% include_code design-pattern-observer/sample2/Main.java %}</p>

<p><code>text 執行結果
Client 10b30a7 display message: News 0 at time: Fri Mar 30 00:54:03 CST 2012
Client ca0b6 display message: News 0 at time: Fri Mar 30 00:54:03 CST 2012
Client 14318bb display message: News 0 at time: Fri Mar 30 00:54:03 CST 2012
Client 10b30a7 display message: News 1 at time: Fri Mar 30 00:54:07 CST 2012
Client ca0b6 display message: News 1 at time: Fri Mar 30 00:54:07 CST 2012
Client 14318bb display message: News 1 at time: Fri Mar 30 00:54:07 CST 2012
Client 10b30a7 display message: News 2 at time: Fri Mar 30 00:54:09 CST 2012
Client ca0b6 display message: News 2 at time: Fri Mar 30 00:54:09 CST 2012
Client 14318bb display message: News 2 at time: Fri Mar 30 00:54:09 CST 2012
</code></p>

<p>現在每一次發佈訊息時，每一個客戶都同時收到，大大減低了延遲和系統負荷。</p>

<hr />

<p>以下的圖片是描述 Observer Pattern 的 Class Diagram。（From Wiki）</p>

<p>{% img http://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/Observer.svg/500px-Observer.svg.png %}</p>
]]></content>
  </entry>
  
</feed>
