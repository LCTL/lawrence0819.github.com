<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Strategy Pattern | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/strategy-pattern/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2015-12-17T10:59:14+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design Pattern - Strategy]]></title>
    <link href="http://pro.ctlok.com/blog/2012/03/28/design-pattern-strategy-pattern.html"/>
    <updated>2012-03-28T22:34:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/03/28/design-pattern-strategy-pattern</id>
    <content type="html"><![CDATA[<p>近日拿出 Design Pattern 的書重溫，順便和大家分享一下。</p>

<p>Strategy Pattern 主要的目的是將一些有很大機會轉變的行為或演算法封裝起來，並抽出來，
令到在執行期間也可以替換。這樣做的好處是不用變動核心程式碼，而又做到變更行為等等功能。</p>

<p>以下的例子可能令你更明白這個模式的用途。</p>

<!--more-->


<hr />

<p>你的公司要你開發一個遊戲，這個遊戲是一個古代戰爭遊戲，每個人扮演一個特定角色。
公司希望可以隨時增加角色，你一開始的設計可能會這樣:</p>

<p>{% img /downloads/code/design-pattern-strategy/sample1/uml.png %}</p>

<p>{% include_code design-pattern-strategy/sample1/Character.java %}
{% include_code design-pattern-strategy/sample1/Human.java %}
{% include_code design-pattern-strategy/sample1/Dwarve.java %}</p>

<p>這樣的設計原本符合公司規格，隨時可以新增角色，亦利用了 OO 的特性。</p>

<hr />

<p>公司高層認為每個角色的攻擊都一樣，太乏味了，建議你改一改程式去令每一個角色都拿不同武器去攻擊。
你可能會更改程式成為這樣:</p>

<p>{% img /downloads/code/design-pattern-strategy/sample2/uml.png %}</p>

<p>{% include_code design-pattern-strategy/sample2/Character.java %}
{% include_code design-pattern-strategy/sample2/Human.java %}
{% include_code design-pattern-strategy/sample2/Dwarve.java %}</p>

<p>Character 內的 attack() 改為 abstract ，每個角色自己實現自己的攻擊模式。
這樣看好像沒有什麼問題，但如果以後增加角色，而這個角色和現有角色的武器一樣，那不是要將程式碼複製出來？
同樣的程式碼可能會在不同角色內出現，以後維護起來便加倍困難。複製一次程式碼 = 連 Bug 也一起複製了。</p>

<hr />

<p>公司高層又想改一下遊戲，今次改動是可以令角色選擇不同武器。
上次的程式是不容許角色更換武器，因為在 attack() 內限制了角色使用的武器。
今次需要使用 Strategy Pattern 令程式更具彈性:</p>

<p>{% img /downloads/code/design-pattern-strategy/sample3/uml.png %}</p>

<p>{% include_code design-pattern-strategy/sample3/Character.java %}
{% include_code design-pattern-strategy/sample3/Human.java %}
{% include_code design-pattern-strategy/sample3/Dwarve.java %}</p>

<p>{% include_code design-pattern-strategy/sample3/AttackBehavior.java %}
{% include_code design-pattern-strategy/sample3/SwordAttackBehavior.java %}
{% include_code design-pattern-strategy/sample3/AxeAttackBehavior.java %}</p>

<p>{% include_code design-pattern-strategy/sample3/Main.java %}</p>

<p>現在只需要在建立角色時將攻擊行為也一起加到角色中就可以了，而且可以隨時更改攻擊行為。</p>

<hr />

<p>以下的圖片是描述 Strategy Pattern 的 Class Diagram。（From Wiki）</p>

<p>{% img http://upload.wikimedia.org/wikipedia/commons/thumb/0/08/StrategyPatternClassDiagram.svg/400px-StrategyPatternClassDiagram.svg.png %}</p>
]]></content>
  </entry>
  
</feed>
