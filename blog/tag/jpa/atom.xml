<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JPA | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/jpa/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-03-25T14:54:40+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[自訂 EclipseLink Logger]]></title>
    <link href="http://pro.ctlok.com/2011/12/customize-eclipselink-logger.html"/>
    <updated>2011-12-19T16:02:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/12/customize-eclipselink-logger</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"><a href="http://www.eclipse.org/eclipselink/images/logos/eclipselink-logo.png" imageanchor="1" style=""><img border="0" height="71" width="242" src="http://www.eclipse.org/eclipselink/images/logos/eclipselink-logo.png" /></a></div>


<br /><br />預設的 <b>EclipseLink logger</b> 是會將所有訊息都會打印到 <b>System.out</b> 去，但 <b>System.out</b> 的記錄通常很難查找。如果不同的應用程式都在同一台 <b>Server</b> 上運行就更加混亂，不同的應用程式都會向 <b>System.out</b> 送出資料，根本不能拿來分析特定一個應用程式的行為。通常做法是會將不同的應用程式都設定不同的日誌檔案，以便分析。<br /><br />要將 <b>EclipseLink</b> 的日誌寫到自己的日誌檔案是很簡單的，只需 <b>Extend</b> <b>org.eclipse.persistence.logging.AbstractSessionLog</b> 這個 <b>class</b>，並且實現 <b>public void log(SessionLogEntry sessionLogEntry)</b> 就可以了，以下有一個例子是將 <b>EclipseLink</b> 的日誌經由 <b>Slf4j</b> 傳送到自訂的日誌檔案中。<br /><br /><pre class="brush: java">package com.ctlok.pro.log<br /><br />import org.eclipse.persistence.logging.AbstractSessionLog;<br />import org.eclipse.persistence.logging.SessionLogEntry;<br /><br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br /><br />public class MyEclipseLinkLogger extends AbstractSessionLog {<br />    <br />    private static final Logger logger = LoggerFactory.getLogger(MyEclipseLinkLogger.class);<br />    <br />    @Override<br />    public void log(SessionLogEntry sessionLogEntry) {<br />        switch (sessionLogEntry.getLevel()) {<br />        case SEVERE:<br />            logger.error(sessionLogEntry.getMessage());<br />            break;<br />        case WARNING:<br />            logger.warn(sessionLogEntry.getMessage());<br />            break;<br />        case INFO:<br />            logger.info(sessionLogEntry.getMessage());<br />            break;<br />        case FINE:<br />        default:<br />            logger.debug(sessionLogEntry.getMessage());<br />        }<br />    }<br />    <br />}<br /></pre><br />然後在 persistence.xml 的 propertiese 中加上:<br /><pre class="brush:xml">&lt;property name=&quot;eclipselink.logging.logger&quot; value=&quot;com.ctlok.pro.log.MyEclipseLinkLogger &quot;/&gt;<br /></pre><br />這樣就可以令 <b>EclipseLink</b> 使用自訂的 <b>Logger</b> 去打印日誌了。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5255208762444246598?l=lawpronotes.blogspot.com' alt='' /></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[將 Seam 的 Hibernate Persistence Provider 轉為 EclipseLink]]></title>
    <link href="http://pro.ctlok.com/2010/10/seam-eclipselink-persistence-provider.html"/>
    <updated>2010-10-07T11:51:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/10/seam-eclipselink-persistence-provider</id>
    <content type="html"><![CDATA[<p><b>JBoss Seam Framework</b> 預設的 <b>Persistence Provider</b> 是 <b>Hibernate</b>，但 <b>Hibernate</b> 未必能夠滿足不同 <b>Database</b> 的需求，Seam 亦提供了一種方法將 <b>Hibernate</b> 轉為 <b>OpenJPA</b> 或其他 <b>Persistence Provider</b>。<br /><br />如果你需要將 <b>Hibernate</b> 轉為使用 <b>OpenJPA</b> 可參考這篇: <a href="http://seamframework.org/Documentation/UsingOpenJPAAsPersistenceProviderInsteadOfHibernate">http://seamframework.org/Documentation/UsingOpenJPAAsPersistenceProviderInsteadOfHibernate</a><br /><br />以下的是將 <b>Hibernate</b> 轉為使用 <b>EclipseLink</b> 的方法。<br /><br />首先要更改 <b>persistence.xml</b>:<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence"<br /> xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"<br /> xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"<br /> version="1.0"&gt;<br /> &lt;persistence-unit name="ctlok" transaction-type="RESOURCE_LOCAL"&gt;<br />  &lt;provider&gt;org.eclipse.persistence.jpa.PersistenceProvider&lt;/provider&gt;<br />  &lt;non-jta-data-source&gt;jdbc/oracle&lt;/non-jta-data-source&gt;<br />  &lt;class&gt;com.ctlok.pro.entity.User&lt;/class&gt;<br />  &lt;class&gt;com.ctlok.pro.entity.UserInfo&lt;/class&gt;<br />  &lt;exclude-unlisted-classes&gt;false&lt;/exclude-unlisted-classes&gt;<br />  &lt;properties&gt;<br />   &lt;property name="eclipselink.target-server" value="Websphere" /&gt;<br />   &lt;property name="eclipselink.target-database" value="Oracle" /&gt;<br />   &lt;property name="eclipselink.logging.level" value="INFO" /&gt;<br />   &lt;property name="eclipselink.logging.timestamp" value="true" /&gt;<br />   &lt;property name="eclipselink.logging.session" value="true" /&gt;<br />   &lt;property name="eclipselink.logging.thread" value="false" /&gt;<br />   &lt;property name="eclipselink.logging.exceptions" value="true" /&gt;<br />   &lt;property name="eclipselink.cache.type.default" value="NONE" /&gt;<br />  &lt;/properties&gt;<br /> &lt;/persistence-unit&gt;<br />&lt;/persistence&gt;<br /></pre><br /><b>properties</b> 的設定請自行更改。<br /><br />重要的是: <br /><ul><li><b>transaction-type</b> 一定要是 <b>RESOURCE_LOCAL</b></li><li><b>provider</b> 改成是 <b>EclipseLink</b> 的 <b>PersistenceProvider</b></li><li>一定要是 <b>non-jta-data-source</b></li><li>將所有 <b>Entity Class</b> 也加到 <b>persistence.xml</b> 中</li></ul><br />設定好 <b>persistence.xml</b> 後，要設定 <b>components.xml</b>:<br /><br />在 <b>components.xml</b> 加入以下的設定:<br /><pre class="brush: xml">&lt;transaction:entity-transaction<br /> entity-manager=&quot;#{entityManager}&quot; /&gt;<br /><br />&lt;persistence:entity-manager-factory<br /> persistence-unit-name=&quot;ctlok&quot; name=&quot;entityManagerFactory&quot; startup=&quot;false&quot; /&gt;<br /><br />&lt;persistence:managed-persistence-context<br /> name=&quot;entityManager&quot; auto-create=&quot;true&quot; entity-manager-factory=&quot;#{entityManagerFactory}&quot; /&gt;<br /><br />&lt;component class=&quot;org.jboss.seam.persistence.PersistenceProvider&quot;<br /> name=&quot;org.jboss.seam.persistence.persistenceProvider&quot; scope=&quot;stateless&quot; /&gt;<br /></pre><br />請記得要更改 <b>persistence-unit-name</b> 為 <b>persistence.xml</b> 所設定的名稱。<br /><br />這樣就可以將 <b>Hibernate</b> 轉為使用 <b>EclipseLink</b> 了。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/JBoss-Seam-Simplicity-Power-Beyond/dp/0131347969?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="JBoss(R) Seam: Simplicity and Power Beyond Java(TM) EE" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0131347969&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0131347969" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Beginning-trade-JBoss-Experts-Voice/dp/143021922X?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Beginning JSF&amp;trade; 2 APIs and JBoss® Seam (Expert&#39;s Voice in Java)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=143021922X&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=143021922X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Beginning-trade-APIs-JBoss-ebook/dp/B003U89104?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Beginning JSF&amp;trade; 2 APIs and JBoss® Seam" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=B003U89104&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=B003U89104" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-6176392827455301235?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 JPA 自動產生 ID]]></title>
    <link href="http://pro.ctlok.com/2010/04/jpa-id.html"/>
    <updated>2010-04-15T10:41:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/04/jpa-id</id>
    <content type="html"><![CDATA[<p>以 PostgreSQL 為例。<br /><br />首先先在 PostgreSQL 內新增一個 Sequence 和 Table。<br /><br />User ID Sequence:<br /><pre class="brush: sql">CREATE SEQUENCE user_id_seq<br />  INCREMENT 1<br />  MINVALUE 1<br />  MAXVALUE 9223372036854775807<br />  START 1<br />  CACHE 1;<br /></pre><br />User Table:<br /><pre class="brush: sql">CREATE TABLE &quot;user&quot;<br />(<br />  uid integer NOT NULL DEFAULT nextval(&#39;user_id_seq&#39;::regclass),<br />  username character varying(255) NOT NULL,<br />  &quot;password&quot; character varying(255) NOT NULL,<br />  CONSTRAINT user_pk PRIMARY KEY (uid)<br />)<br />WITH (<br />  OIDS=FALSE<br />);<br /></pre><br />然後新增一個 Entity class。<br /><br />User entity:<br /><pre class="brush: java">package com.blogspot.lawpronotes.entity;<br /><br />import java.io.Serializable;<br /><br />import javax.persistence.Basic;<br />import javax.persistence.Column;<br />import javax.persistence.Entity;<br />import javax.persistence.GeneratedValue;<br />import javax.persistence.GenerationType;<br />import javax.persistence.Id;<br />import javax.persistence.SequenceGenerator;<br />import javax.persistence.Table;<br /><br />@Entity<br />@Table(name = &quot;user&quot;, schema = &quot;public&quot;)<br />public class User implements Serializable {<br />    private static final long serialVersionUID = 1L;<br /><br />    @Id<br />    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;USER_UID_GENERATOR&quot;)<br />    @SequenceGenerator(name = &quot;USER_UID_GENERATOR&quot;, sequenceName = &quot;user_id_seq&quot;, allocationSize = 1)<br />    @Column(name = &quot;uid&quot;)<br />    private Integer uid;<br /><br />    @Basic<br />    @Column(name = &quot;username&quot;, nullable = false, unique = true)<br />    private String username;<br /><br />    @Basic<br />    @Column(name = &quot;password&quot;, nullable = false, unique = false)<br />    private String password;<br /><br />    public User() {<br />    }<br /><br />    public Integer getUid() {<br />        return this.uid;<br />    }<br /><br />    public void setUid(Integer uid) {<br />        this.uid = uid;<br />    }<br /><br />    public String getName() {<br />        return this.username;<br />    }<br /><br />    public void setName(String username) {<br />        this.username = username;<br />    }<br /><br />    public String getPassword() {<br />        return this.password;<br />    }<br /><br />    public void setPassword(String password) {<br />        this.password = password;<br />    }<br /><br />}<br /></pre><br />其中的關鍵:<br /><pre class="brush: java">@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;USER_UID_GENERATOR&quot;)<br />@SequenceGenerator(name = &quot;USER_UID_GENERATOR&quot;, sequenceName = &quot;user_id_seq&quot;, allocationSize = 1)<br /></pre><br />GeneratedValue 的 strategy 是 GenerationType.SEQUENCE，即是不斷地加同一個數值，達到一致。而 generator 即是數值產生器的名稱，數值產生器即是 SequenceGenerator，SequenceGenerator 的 sequenceName 要跟資料庫內的 sequence 名稱一樣，因為是靠資料庫內的 sequence 產生數值的， allocationSize 即是每次將數值加多少，因為資料庫內的 sequence 設定了每次加 1 ，allocationSize 也要是 1 才行，系統預設的 allocationSize 是 50。現在應該可以自動產生 ID 了。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Pro-JPA-Mastering-Persistence-Technology/dp/1430219564?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Pro JPA 2: Mastering the Java&amp;trade; Persistence API (Expert&#39;s Voice in Java Technology)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1430219564&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1430219564" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Pro-EJB-Java-Persistence-API/dp/1590596455?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Pro EJB 3: Java Persistence API" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1590596455&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1590596455" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Appendixes/dp/1596821620?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="PostgreSQL 8.4 Official Documentation - Volume V. Internals and Appendixes" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1596821620&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1596821620" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-1752873219027309956?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 JPA 連接 PostgreSQL]]></title>
    <link href="http://pro.ctlok.com/2010/04/jpa-postgresql.html"/>
    <updated>2010-04-09T14:37:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/04/jpa-postgresql</id>
    <content type="html"><![CDATA[<p>首先資料庫內的表格名稱最好為英文小寫，因為 PostgreSQL 會自動將表格名稱轉為小寫。<br />例子:<br /><pre class="brush: sql">INSERT INTO public.User (id, name, password) VALUES (1, 'Lawrence', '123456')<br /></pre><br />會變成:<br /><pre class="brush: sql">INSERT INTO public.user (id, name, password) VALUES (1, 'Lawrence', '123456')<br /></pre><br />這樣便會找不到表格而出錯。<br />以下這種寫法才可以順利找到表格。<br /><pre class="brush: sql">INSERT INTO public.&quot;User&quot; (id, name, password) VALUES (1, 'Lawrence', '123456')<br /></pre><br />需要將 User 用 &quot; 包起來才可以，而 JPA 中插入資料時，程式最終也會將物件變為 SQL 才能將資料加入或取出。JPA 並不會自動將表格名稱用 &quot; 包起來。<br /><br />Entity 例子:<br /><pre class="brush: java">package com.blogspot.lawpronotes.entity;<br /><br />import java.io.Serializable;<br /><br />import javax.persistence.Column;<br />import javax.persistence.Entity;<br />import javax.persistence.Id;<br />import javax.persistence.Table;<br /><br />/<em>*<br /> * The persistent class for the user database table.<br /> * <br /> </em>/<br />@Entity<br />@Table(name = &quot;user&quot;, schema = &quot;public&quot;)<br />public class User implements Serializable {<br />    private static final long serialVersionUID = 1L;<br /><br />    @Id<br />    @Column(name = &quot;id&quot;)<br />    private Integer id;<br /><br />    @Column(name = &quot;name&quot;)<br />    private String name;<br /><br />    @Column(name = &quot;password&quot;)<br />    private String password;<br /><br />    public User() {<br />    }<br /><br />    public Integer getId() {<br />        return this.id;<br />    }<br /><br />    public void setId(Integer id) {<br />        this.id = id;<br />    }<br /><br />    public String getName() {<br />        return this.name;<br />    }<br /><br />    public void setName(String name) {<br />        this.name = name;<br />    }<br /><br />    public String getPassword() {<br />        return this.password;<br />    }<br /><br />    public void setPassword(String password) {<br />        this.password = password;<br />    }<br /><br />}<br /></pre><br />如果表格名稱是大寫又不能改的話，只好將<br /><pre class="brush: java">@Table(name=&quot;user&quot;, schema=&quot;public&quot;)<br /></pre>改為<br /><pre class="brush: java">@Table(name=&quot;&amp;quot;User&amp;quot;&quot;, schema=&quot;public&quot;)<br /></pre><br />Column 名稱也一樣，將<br /><pre class="brush: java">@Column(name = &quot;name&quot;)<br /></pre>改為<br /><pre class="brush: java">@Column(name = &quot;&amp;quot;Name&amp;quot;&quot;)<br /></pre><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Language/dp/1596821582?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="PostgreSQL 8.4 Official Documentation - Volume I. The SQL Language" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1596821582&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1596821582" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Administration/dp/1596821590?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="PostgreSQL 8.4 Official Documentation - Volume II. Server Administration" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1596821590&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1596821590" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Programming/dp/1596821604?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="PostgreSQL 8.4 Official Documentation - Volume III. Server Programming" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1596821604&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1596821604" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-7358375987171526715?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java EE 6 - GlassFish v3 + MySQL 5.1 配合 EJB + JPA + Servlet]]></title>
    <link href="http://pro.ctlok.com/2010/02/java-ee-6-glassfish-v3-mysql-51-ejb-jpa.html"/>
    <updated>2010-02-02T16:23:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/02/java-ee-6-glassfish-v3-mysql-51-ejb-jpa</id>
    <content type="html"><![CDATA[<p>現時的專業系統設計者會主張將系統分為 3 層或 4 層的系統架構<br /><br />3 層的系統架構:<br /><ul><li>客戶層 (Client tier)</li><li>商業邏輯層&nbsp;(Business tier)</li><li>資料層 (Enterprise Information Systems(EIS) tier)</li></ul><div>而 4 層則是在&nbsp;客戶層 (Client tier) 和&nbsp;商業邏輯層&nbsp;(Business tier) 之間加插一個網絡服務層 (Web tier)<br /><br />4 層的系統架構:</div><div><ul><li>客戶層 (Client tier)</li><li>網絡服務層 (Web tier)</li><li>商業邏輯層&nbsp;(Business tier)</li><li>資料層 (Enterprise Information Systems(EIS) tier)</li></ul><div>給大家一張圖片比較好理解<br /><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2aUgRhPYUI/AAAAAAAAAXM/QpLUrGz3Iw4/s1600-h/javaee_ejb_jpa_servlet_1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2aUgRhPYUI/AAAAAAAAAXM/QpLUrGz3Iw4/s320/javaee_ejb_jpa_servlet_1.png" /></a></div><div><br /></div><div>上圖左邊是 3 層架構</div><div>右邊則是 4 層架構</div><div>Web-Based Client 大多數是指瀏覽器&nbsp;</div><div><br /></div><div>其實在上圖的例子不是只有瀏覽器才會使用到網絡服務層 (Web tier)<br />就好像下圖一樣</div><div><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2aUl9H_QdI/AAAAAAAAAXU/0x7W-jEHnqg/s1600-h/javaee_ejb_jpa_servlet_2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2aUl9H_QdI/AAAAAAAAAXU/0x7W-jEHnqg/s320/javaee_ejb_jpa_servlet_2.png" /></a></div><div><br />因為網絡服務層 (Web tier) 包含 Web service<br />Web service 可以經由各種不同的應用程式去使用<br /><br />現在開始試作 4 層的系統架構<br />開發軟件:&nbsp;<a href="http://www.eclipse.org/downloads/">Eclipse IDE for Java EE Developer</a><br />服務器:&nbsp;<a href="https://glassfish.dev.java.net/downloads/v3-final.html">GlassFish v3</a><br />資料庫:&nbsp;<a href="http://dev.mysql.com/downloads/mysql/">MySQL 5.1</a><br /><br />安裝好以上的工具後便開始進行設定<br /><br /><ul><li>Eclipse 整合 GlassFish v3 可參考:&nbsp;<a href="http://lawpronotes.blogspot.com/2010/01/eclipse-glassfish-3.html">http://lawpronotes.blogspot.com/2010/01/eclipse-glassfish-3.html</a></li><li>GlassFish v3 整合 MySQL 5.1 可參考:&nbsp;<a href="http://lawpronotes.blogspot.com/2010/01/glassfish-3-java-ee-server-mysql.html">http://lawpronotes.blogspot.com/2010/01/glassfish-3-java-ee-server-mysql.html</a></li></ul><br />打開&nbsp;MySQL Command Line Client<br />輸入密碼<br />然後輸入以下的 SQL<br /><br /><pre class="brush: sql">CREATE  TABLE IF NOT EXISTS <code>test</code>.<code>User</code> (<br /><br />  <code>UID</code> INT NOT NULL AUTO_INCREMENT ,<br /><br />  <code>name</code> VARCHAR(45) NOT NULL ,<br /><br />  <code>password</code> VARCHAR(45) NOT NULL ,<br /><br />  PRIMARY KEY (<code>UID</code>) )<br /><br />ENGINE = InnoDB<br /><br />DEFAULT CHARACTER SET = utf8;<br /></pre><br /><div class="separator" style="clear: both; text-align: left;"><br /></div><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2abhf7IoKI/AAAAAAAAAXk/aU0UDT5zaRI/s1600-h/javaee_ejb_jpa_servlet_3.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2abhf7IoKI/AAAAAAAAAXk/aU0UDT5zaRI/s320/javaee_ejb_jpa_servlet_3.png" /></a><br /><br /><strong>在安裝 MySQL 後 test 這個 Database 會自動加入</strong><br /><br />在 Eclipse 按 File -&gt; New -&gt; Enterprise Application Project<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2ac-aCJiwI/AAAAAAAAAXs/b_i0QwNKUp4/s1600-h/javaee_ejb_jpa_servlet_4.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2ac-aCJiwI/AAAAAAAAAXs/b_i0QwNKUp4/s320/javaee_ejb_jpa_servlet_4.png" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"></div><ul><li>Project name: TestEAR</li><li>Target runtime: GlassFish v3 Java EE 6</li><li>EAR version: 5.0</li><li>Configuration: Default&nbsp;Configuration&nbsp;for GlassFish v3 Java EE 6</li></ul><br /><div class="separator" style="clear: both; text-align: left;">按下 Finish</div><div class="separator" style="clear: both; text-align: left;"><br /></div><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2adS_YLBlI/AAAAAAAAAX0/tVIbEVoWhK8/s1600-h/javaee_ejb_jpa_servlet_5.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2adS_YLBlI/AAAAAAAAAX0/tVIbEVoWhK8/s320/javaee_ejb_jpa_servlet_5.png" /></a><br /><br />打開 File -&gt; New -&gt; JPA Project<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2afPYFQywI/AAAAAAAAAYE/WyKH9NCQJZU/s1600-h/javaee_ejb_jpa_servlet_7.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2afPYFQywI/AAAAAAAAAYE/WyKH9NCQJZU/s320/javaee_ejb_jpa_servlet_7.png" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"></div><ul><li>Project name: TestJPA</li><li>Configuration: Default&nbsp;Configuration&nbsp;for GlassFish v3 Java EE 6</li><li>EAR membership: Add project to an EAR</li><li>EAR project name: TestEAR</li></ul><br /><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">按下 Finish</div><br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2aeCv7-5eI/AAAAAAAAAX8/EvQpUnjCpf0/s1600-h/javaee_ejb_jpa_servlet_6.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2aeCv7-5eI/AAAAAAAAAX8/EvQpUnjCpf0/s320/javaee_ejb_jpa_servlet_6.png" /></a></div><br />打開 File -&gt; New -&gt; EJB Project<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2afst7K3DI/AAAAAAAAAYM/zmsVfUN68I8/s1600-h/javaee_ejb_jpa_servlet_8.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2afst7K3DI/AAAAAAAAAYM/zmsVfUN68I8/s320/javaee_ejb_jpa_servlet_8.png" /></a></div><br /><ul><li>Project name: TestEJB</li><li>EJB Module version: 3.0 (還沒有 3.1 可供選擇)</li><li>Configuration: Default&nbsp;Configuration&nbsp;for GlassFish v3 Java EE 6</li><li>EAR membership: Add project to an EAR</li><li>EAR project name: TestEAR</li></ul>按下 Next<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2af_AMiuII/AAAAAAAAAYU/jAYJgxUo4cA/s1600-h/javaee_ejb_jpa_servlet_9.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2af_AMiuII/AAAAAAAAAYU/jAYJgxUo4cA/s320/javaee_ejb_jpa_servlet_9.png" /></a></div><br />再按 Next<br /><br />不要選取 Create an EJB client JAR module to hold the client interface and class<br />按下 Finish<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2ahJKTgwwI/AAAAAAAAAYc/AGDUbz78XgE/s1600-h/javaee_ejb_jpa_servlet_10.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2ahJKTgwwI/AAAAAAAAAYc/AGDUbz78XgE/s320/javaee_ejb_jpa_servlet_10.png" /></a></div><br />打開 File -&gt; New -&gt; Dynamic Web Project<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2ahuHDv0GI/AAAAAAAAAYk/kmyGvWzMU90/s1600-h/javaee_ejb_jpa_servlet_11.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2ahuHDv0GI/AAAAAAAAAYk/kmyGvWzMU90/s320/javaee_ejb_jpa_servlet_11.png" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"></div><ul><li>Project name: TestWAR</li><li>Dynamic Web module version: 2.5&nbsp;(還沒有 3.0 可供選擇)</li><li>Configuration: Default&nbsp;Configuration&nbsp;for GlassFish v3 Java EE 6</li><li>EAR membership: Add project to an EAR</li><li>EAR project name: TestEAR</li></ul><div>按下 Finish</div><br /><div class="separator" style="clear: both; text-align: left;"><br /></div><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2ah77u011I/AAAAAAAAAYs/5pq165G5uz8/s1600-h/javaee_ejb_jpa_servlet_12.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2ah77u011I/AAAAAAAAAYs/5pq165G5uz8/s320/javaee_ejb_jpa_servlet_12.png" /></a><br /><br />設換到 JPA 的版面<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2ai9XUJL-I/AAAAAAAAAY0/RB7pKebvAzU/s1600-h/javaee_ejb_jpa_servlet_13.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2ai9XUJL-I/AAAAAAAAAY0/RB7pKebvAzU/s320/javaee_ejb_jpa_servlet_13.png" /></a></div><br />在 Data Source Explorer 的 Database connection 按下滑鼠右鍵<br />按下 New<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2ajx_cJotI/AAAAAAAAAZE/a41QIN-YJyU/s1600-h/javaee_ejb_jpa_servlet_15.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2ajx_cJotI/AAAAAAAAAZE/a41QIN-YJyU/s320/javaee_ejb_jpa_servlet_15.png" /></a></div><br /><br /><ul><li>選擇 MySQL</li><li>Name: Test Connection</li></ul><br />按下 Next<br /><div class="separator" style="clear: both; text-align: left;"><br /></div><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2apUupSJHI/AAAAAAAAAZ8/R6xjHaDecIs/s1600-h/javaee_ejb_jpa_servlet_16.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2apUupSJHI/AAAAAAAAAZ8/R6xjHaDecIs/s320/javaee_ejb_jpa_servlet_16.png" /></a><br /><br />現在是沒有 Driver 可供選擇的<br />按下右邊第二個按鈕<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2akXe5HyII/AAAAAAAAAZM/dHlbR4iPe8o/s1600-h/javaee_ejb_jpa_servlet_17.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2akXe5HyII/AAAAAAAAAZM/dHlbR4iPe8o/s320/javaee_ejb_jpa_servlet_17.png" /></a></div><br />選擇 MySQL 5.1<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2alAT4ZCuI/AAAAAAAAAZU/aqPA_rwLPck/s1600-h/javaee_ejb_jpa_servlet_18.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2alAT4ZCuI/AAAAAAAAAZU/aqPA_rwLPck/s320/javaee_ejb_jpa_servlet_18.png" /></a></div><br />在上方的標籤選擇 Jar List<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2alUAKZzZI/AAAAAAAAAZc/la7eUJFU5a0/s1600-h/javaee_ejb_jpa_servlet_19.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2alUAKZzZI/AAAAAAAAAZc/la7eUJFU5a0/s320/javaee_ejb_jpa_servlet_19.png" /></a></div><br />按下 Edit JAR/Zip... 選擇 MySQL JDBC Driver<br />沒有 Driver 的可在這裡下載:&nbsp;<a href="http://dev.mysql.com/downloads/connector/j/">http://dev.mysql.com/downloads/connector/j/</a><br />按下 OK 回到剛才的頁面<br /><br /><ul><li>Database: test</li><li>URL: jdbc:mysql://localhost:3306/test</li><li>User name: root</li><li>password: (不用教吧)</li></ul><div>確定資料正確後可以按一下 Test Connection 測試一下連接有沒有問題</div><div><br /></div><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2amNw3IK0I/AAAAAAAAAZk/4fkREQalqq0/s1600-h/javaee_ejb_jpa_servlet_20.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2amNw3IK0I/AAAAAAAAAZk/4fkREQalqq0/s320/javaee_ejb_jpa_servlet_20.png" /></a></div><br />正確連接會看見以下畫面<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2anHqNnmNI/AAAAAAAAAZs/7Wmta1xB1GI/s1600-h/javaee_ejb_jpa_servlet_21.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2anHqNnmNI/AAAAAAAAAZs/7Wmta1xB1GI/s320/javaee_ejb_jpa_servlet_21.png" /></a></div><br />按下 Finish 完成<br /><br />在 TestJPA project 新增一個 Entities<br />選取 New -&gt;&nbsp;Entities From Table<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2aoNPIxuzI/AAAAAAAAAZ0/nUvU4iNjevU/s1600-h/javaee_ejb_jpa_servlet_22.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2aoNPIxuzI/AAAAAAAAAZ0/nUvU4iNjevU/s320/javaee_ejb_jpa_servlet_22.png" /></a></div><br /><br /><ul><li>Connection: Test Connection</li><li>Schema: test</li><li>Table: user</li></ul><div>按下 Next</div><div><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2apoE1F2iI/AAAAAAAAAaE/_cpJu24UwoY/s1600-h/javaee_ejb_jpa_servlet_24.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2apoE1F2iI/AAAAAAAAAaE/_cpJu24UwoY/s320/javaee_ejb_jpa_servlet_24.png" /></a></div><div><br /></div><div>再按下 Next</div><div><ul><li><s>Key generator: auto</s></li><li>Collection properties type: java.util.List</li><li>Package:&nbsp;com.blogspot.lawpronotes.jpa</li></ul><div>按下 Finish</div></div><div><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2aqasnkZ2I/AAAAAAAAAaM/RZ75QA31gxw/s1600-h/javaee_ejb_jpa_servlet_25.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2aqasnkZ2I/AAAAAAAAAaM/RZ75QA31gxw/s320/javaee_ejb_jpa_servlet_25.png" /></a></div><div><br /></div><div>在 src 的 資料夾會出現 User.java</div><div><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2arawiJTuI/AAAAAAAAAaU/nZa78cCwdno/s1600-h/javaee_ejb_jpa_servlet_26.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2arawiJTuI/AAAAAAAAAaU/nZa78cCwdno/s320/javaee_ejb_jpa_servlet_26.png" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">原始碼如下</div><pre class="brush: java">package com.blogspot.lawpronotes.jpa;<br /><br />import java.io.Serializable;<br />import javax.persistence.<em>;<br /><br />/**<br /> * The persistent class for the user database table.<br /> * <br /> </em>/<br />@Entity<br />@Table(name = "user")<br />@NamedQueries( { @NamedQuery(name = "User.findAll", query = "SELECT u FROM User u") })<br />public class User implements Serializable {<br />    private static final long serialVersionUID = 1L;<br /><br />    @Id<br />    @Column(name = "UID")<br />    private int uid;<br /><br />    private String name;<br /><br />    private String password;<br /><br />    public User() {<br />    }<br /><br />    public int getUid() {<br />        return this.uid;<br />    }<br /><br />    public void setUid(int uid) {<br />        this.uid = uid;<br />    }<br /><br />    public String getName() {<br />        return this.name;<br />    }<br /><br />    public void setName(String name) {<br />        this.name = name;<br />    }<br /><br />    public String getPassword() {<br />        return this.password;<br />    }<br /><br />    public void setPassword(String password) {<br />        this.password = password;<br />    }<br /><br />}<br /></pre><br />現在設定 EJB<br />到 TestEJB -&gt; Properties<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2eO_EPt59I/AAAAAAAAAac/YMaNZz6y_W4/s1600-h/javaee_ejb_jpa_servlet_27.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2eO_EPt59I/AAAAAAAAAac/YMaNZz6y_W4/s320/javaee_ejb_jpa_servlet_27.png" /></a></div><br />找尋 Java EE Module Dependencies<br />將 TestJPA 打勾起來<br />按下 OK<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2ePP17_UGI/AAAAAAAAAak/9nHxZH6voMQ/s1600-h/javaee_ejb_jpa_servlet_28.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2ePP17_UGI/AAAAAAAAAak/9nHxZH6voMQ/s320/javaee_ejb_jpa_servlet_28.png" /></a></div><br />在 TestEJB 新增一個 Session Bean (EJB 3.x)<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2ePv5remuI/AAAAAAAAAas/51EhjecWwRQ/s1600-h/javaee_ejb_jpa_servlet_29.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2ePv5remuI/AAAAAAAAAas/51EhjecWwRQ/s320/javaee_ejb_jpa_servlet_29.png" /></a></div><ul><li>Java package:&nbsp;com.blogspot.lawpronotes.ejb</li><li>Class name: UserController</li><li>Status type: Stateless</li><li>不要將 Remote 打勾 (在同一個 JVM 環境下不需要用到 Remote)</li><li>將 Local 打勾並輸入:&nbsp;com.blogspot.lawpronotes.ejb.UserControllerLocal</li></ul><div>按下 Next</div><br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2eQZ7sPguI/AAAAAAAAAa0/qJbtwpI7kSc/s1600-h/javaee_ejb_jpa_servlet_30.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_fDN8R2Wgbcs/S2eQZ7sPguI/AAAAAAAAAa0/qJbtwpI7kSc/s320/javaee_ejb_jpa_servlet_30.png" /></a></div><ul><li>Bean name: UserController</li><li>Mapped name: ejb/UserController</li><li>Transaction type: Container</li></ul><div>按下 Finish</div><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2eRuxhV8qI/AAAAAAAAAa8/0Ag4YSf76yM/s1600-h/javaee_ejb_jpa_servlet_31.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2eRuxhV8qI/AAAAAAAAAa8/0Ag4YSf76yM/s320/javaee_ejb_jpa_servlet_31.png" /></a></div><br />在 TestEJB project 內會多出 2 個 file<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2eSUjsfKYI/AAAAAAAAAbE/eir0cPE1SMQ/s1600-h/javaee_ejb_jpa_servlet_32.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2eSUjsfKYI/AAAAAAAAAbE/eir0cPE1SMQ/s320/javaee_ejb_jpa_servlet_32.png" /></a></div><br />將 UserControllerLocal.java 換成以下程式碼<br /><pre class="brush: java">package com.blogspot.lawpronotes.ejb;<br /><br />import javax.ejb.Local;<br /><br />@Local<br />public interface UserControllerLocal {<br />    public void addUser(String userName, String password) throws Exception;<br /><br />    public java.util.List&lt;com.blogspot.lawpronotes.jpa.User&gt; getAllUser()<br />            throws Exception;<br />}<br /><br /></pre><br />再將 UserController.java 換成以下程式碼<br /><pre class="brush: java">package com.blogspot.lawpronotes.ejb;<br /><br />import java.util.List;<br /><br />import javax.ejb.Stateless;<br />import javax.persistence.EntityManager;<br />import javax.persistence.PersistenceContext;<br />import javax.persistence.Query;<br /><br />import com.blogspot.lawpronotes.jpa.User;<br /><br />/<strong><br /> * Session Bean implementation class UserController<br /> */<br />@Stateless(mappedName = "ejb/UserController")<br />public class UserController implements UserControllerLocal {<br /><br />    @PersistenceContext<br />    private EntityManager entityManager;<br /><br />    /</strong><br />     * Default constructor.<br />     <em>/<br />    public UserController() {<br />        // TODO Auto-generated constructor stub<br />    }<br /><br />    @Override<br />    public void addUser(String userName, String password) throws Exception {<br />        // TODO Auto-generated method stub<br />        User user = new User();<br />        user.setName(userName);<br />        user.setPassword(password);<br />        entityManager.persist(user);<br />        entityManager.flush();<br />    }<br /><br />    @SuppressWarnings("unchecked")<br />    @Override<br />    public List&lt;User&gt; getAllUser() throws Exception {<br />        // TODO Auto-generated method stub<br />        List&lt;User&gt; userList = null;<br />        Query query = entityManager.createNamedQuery("User.findAll");<br />        userList = (List&lt;User&gt;) query.getResultList();<br />        return userList;<br />    }<br />}<br /></pre><br />在 TestEJB -&gt; ejbModule -&gt; META-INF 新增一個 XML 檔案<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fTXE10JiI/AAAAAAAAAbM/erUvQuCmK0M/s1600-h/javaee_ejb_jpa_servlet_33.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fTXE10JiI/AAAAAAAAAbM/erUvQuCmK0M/s320/javaee_ejb_jpa_servlet_33.png" /></a></div><br />File name:&nbsp;persistence.xml<br />按下 Finish<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fTqbRrECI/AAAAAAAAAbU/jSDFVmLE8pk/s1600-h/javaee_ejb_jpa_servlet_34.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fTqbRrECI/AAAAAAAAAbU/jSDFVmLE8pk/s320/javaee_ejb_jpa_servlet_34.png" /></a></div><br />貼上以下內容<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;persistence version="1.0"<br />    xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"<br />    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"&gt;<br />    &lt;persistence-unit name="TestJPA"&gt;<br />        &lt;jta-data-source&gt;jdbc/test&lt;/jta-data-source&gt;<br />        &lt;class&gt;com.blogspot.lawpronotes.jpa.User&lt;/class&gt;<br />    &lt;/persistence-unit&gt;<br />&lt;/persistence&gt;<br /></pre><br />其中的 jta-data-source 一定要跟 GlassFish JDBC Resources 的 JNDI name 要一致<br /><pre class="brush: xml">&lt;jta-data-source&gt;jdbc/test&lt;/jta-data-source&gt;<br /></pre><br /><div class="separator" style="clear: both; text-align: left;">進入 TestWAR -&gt; Properties</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fXrTWsEqI/AAAAAAAAAbs/J3JoWvWyT3Y/s1600-h/javaee_ejb_jpa_servlet_37.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fXrTWsEqI/AAAAAAAAAbs/J3JoWvWyT3Y/s320/javaee_ejb_jpa_servlet_37.png" /></a></div><br /><br /><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">找尋 Java EE Module Dependencies</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">將 TestJPA 和 TestEJB 打勾起來</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">按下 OK</div><br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fX9VNH5cI/AAAAAAAAAb0/MvMhMazRHg8/s1600-h/javaee_ejb_jpa_servlet_38.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fX9VNH5cI/AAAAAAAAAb0/MvMhMazRHg8/s320/javaee_ejb_jpa_servlet_38.png" /></a></div><br />在 TestWAR 新增一個 Servlet<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fVe-MooZI/AAAAAAAAAbc/OtzNxlv-yDM/s1600-h/javaee_ejb_jpa_servlet_35.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fVe-MooZI/AAAAAAAAAbc/OtzNxlv-yDM/s320/javaee_ejb_jpa_servlet_35.png" /></a></div><br /><br /><ul><li>Java package:&nbsp;com.blogspot.lawpronotes.servlet</li><li>Class name: IndexServlet</li></ul><div>按下 Finish</div><br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fV3k0Zi4I/AAAAAAAAAbk/rI-SdDGvPFE/s1600-h/javaee_ejb_jpa_servlet_36.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fV3k0Zi4I/AAAAAAAAAbk/rI-SdDGvPFE/s320/javaee_ejb_jpa_servlet_36.png" /></a></div><br />將 IndexServlet.java 換成以下內容<br /><pre class="brush: java">package com.blogspot.lawpronotes.servlet;<br /><br />import java.io.IOException;<br />import java.util.List;<br /><br />import javax.ejb.EJB;<br />import javax.servlet.RequestDispatcher;<br />import javax.servlet.ServletException;<br />import javax.servlet.annotation.WebServlet;<br />import javax.servlet.http.HttpServlet;<br />import javax.servlet.http.HttpServletRequest;<br />import javax.servlet.http.HttpServletResponse;<br /><br />import com.blogspot.lawpronotes.ejb.UserControllerLocal;<br />import com.blogspot.lawpronotes.jpa.User;<br /><br />/**<br /> * Servlet implementation class IndexServlet<br /> </em>/<br />@WebServlet(name = "Index", urlPatterns = { "/index" })<br />public class IndexServlet extends HttpServlet {<br />    private static final long serialVersionUID = 1L;<br /><br />    @EJB<br />    private UserControllerLocal userController;<br /><br />    /<strong><br />     * @see HttpServlet#HttpServlet()<br />     */<br />    public IndexServlet() {<br />        super();<br />        // TODO Auto-generated constructor stub<br />    }<br /><br />    /</strong><br />     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse<br />     *      response)<br />     <em>/<br />    protected void doGet(HttpServletRequest request,<br />            HttpServletResponse response) throws ServletException, IOException {<br />        // TODO Auto-generated method stub<br />        try {<br />            List&lt;User&gt; userList = userController.getAllUser();<br />            request.setAttribute("userList", userList);<br />            RequestDispatcher dispatcher = request<br />                    .getRequestDispatcher("/WEB-INF/pages/index.jsp");<br />            dispatcher.forward(request, response);<br />        } catch (Exception ex) {<br />            ex.printStackTrace();<br />        }<br />    }<br /><br />    /**<br />     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse<br />     *      response)<br />     </em>/<br />    protected void doPost(HttpServletRequest request,<br />            HttpServletResponse response) throws ServletException, IOException {<br />        // TODO Auto-generated method stub<br />        try {<br />            String userName = request.getParameter("userName");<br />            String password = request.getParameter("password");<br />            userController.addUser(userName, password);<br />            List&lt;User&gt; userList = userController.getAllUser();<br />            request.setAttribute("userList", userList);<br />            RequestDispatcher dispatcher = request<br />                    .getRequestDispatcher("/WEB-INF/pages/index.jsp");<br />            dispatcher.forward(request, response);<br />        } catch (Exception ex) {<br />            ex.printStackTrace();<br />        }<br />    }<br />}<br /></pre><br />將 TestWAR -&gt; Web Content 的 index.jsp 移除掉<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fYT1AORjI/AAAAAAAAAb8/u4p5Q2hVBDw/s1600-h/javaee_ejb_jpa_servlet_39.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fYT1AORjI/AAAAAAAAAb8/u4p5Q2hVBDw/s320/javaee_ejb_jpa_servlet_39.png" /></a></div><br />在 TestWAR -&gt;&nbsp;Web Content -&gt; WEB-INF 新增一個資料夾<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fZBoK_V7I/AAAAAAAAAcE/a2_NkozwqEU/s1600-h/javaee_ejb_jpa_servlet_40.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fZBoK_V7I/AAAAAAAAAcE/a2_NkozwqEU/s320/javaee_ejb_jpa_servlet_40.png" /></a></div><br />Folder name: pages<br />按下 Finish<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fZSpaHTaI/AAAAAAAAAcM/I--2ptAi9HI/s1600-h/javaee_ejb_jpa_servlet_41.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fZSpaHTaI/AAAAAAAAAcM/I--2ptAi9HI/s320/javaee_ejb_jpa_servlet_41.png" /></a></div><br />在 pages 資料夾新增一個 JSP<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fZyjh3b-I/AAAAAAAAAcU/9q9_YiHMQxA/s1600-h/javaee_ejb_jpa_servlet_42.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fZyjh3b-I/AAAAAAAAAcU/9q9_YiHMQxA/s320/javaee_ejb_jpa_servlet_42.png" /></a></div><br />File name: index.jsp<br />按下 Finish<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fa8S9aYpI/AAAAAAAAAcc/GFAf5ykdB2w/s1600-h/javaee_ejb_jpa_servlet_43.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fa8S9aYpI/AAAAAAAAAcc/GFAf5ykdB2w/s320/javaee_ejb_jpa_servlet_43.png" /></a></div><br />貼上以下程式碼<br /><pre class="brush: html">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"<br />    pageEncoding="UTF-8" isELIgnored="false" %&gt;<br />&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;<br />&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;<br />&lt;html&gt;<br />&lt;head&gt;<br />&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;<br />&lt;title&gt;Sample&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br /> &lt;c:if test="${userList.size() &gt; 0}"&gt;<br />  &lt;table&gt;<br />   &lt;thead&gt;<br />    &lt;tr&gt;<br />     &lt;td&gt;User Name&lt;/td&gt;<br />     &lt;td&gt;Password&lt;/td&gt;<br />    &lt;/tr&gt;<br />   &lt;/thead&gt;<br />   &lt;tbody&gt;<br />    &lt;c:forEach var="user" items="${userList}"&gt;<br />     &lt;tr&gt;<br />      &lt;td&gt;${user.getName()}&lt;/td&gt;<br />      &lt;td&gt;${user.getPassword()}&lt;/td&gt;<br />     &lt;/tr&gt;<br />    &lt;/c:forEach&gt;<br />   &lt;/tbody&gt;<br />  &lt;/table&gt;<br /> &lt;/c:if&gt;<br /> &lt;form method="post"&gt;<br />  &lt;label&gt;User Name:&lt;/label&gt;&lt;input type="text" name="userName"/&gt;&lt;br/&gt;<br />  &lt;label&gt;Password:&lt;/label&gt;&lt;input type="password" name="password"/&gt;&lt;br/&gt;<br />  &lt;input type="submit"/&gt;<br /> &lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;<br /></pre><br />最後要修改一下 web.xml<br />到 TestWAR -&gt; Web Content -&gt; WEB-INF -&gt; web.xml<br />貼上以下內容<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5"&gt;<br />  &lt;display-name&gt;TestWAR&lt;/display-name&gt;<br />  &lt;welcome-file-list&gt;<br />    &lt;welcome-file&gt;index&lt;/welcome-file&gt;<br />  &lt;/welcome-file-list&gt;<br />&lt;/web-app&gt;<br /></pre><br />現在完成了!<br />立即去測試一下<br />到 TestEAR -&gt; Run As - Run on Server<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fbozjdBHI/AAAAAAAAAck/-qGAmjSuL38/s1600-h/javaee_ejb_jpa_servlet_44.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fbozjdBHI/AAAAAAAAAck/-qGAmjSuL38/s320/javaee_ejb_jpa_servlet_44.png" /></a></div><br />選擇 GlassFish v3 Java EE 6 at localhost<br />按下 Finish<br />Eclipse 便會將整個 Project 打包放到 GlassFish Server 上<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fb5meD4AI/AAAAAAAAAcs/-SOodQ2FNQs/s1600-h/javaee_ejb_jpa_servlet_45.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2fb5meD4AI/AAAAAAAAAcs/-SOodQ2FNQs/s320/javaee_ejb_jpa_servlet_45.png" /></a></div><br />在瀏覽器輸入網址:&nbsp;<a href="http://localhost:8080/TestWAR/">http://localhost:8080/TestWAR/</a><br />將會看見以下畫面<br />其實這是一個加入 User 的表格 (好像太陽春了點....)<br /><br /><div class="separator" style="clear: both; text-align: left;"><a href="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fdzGIsEAI/AAAAAAAAAc0/bzKzJLg51qk/s1600-h/javaee_ejb_jpa_servlet_46.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/_fDN8R2Wgbcs/S2fdzGIsEAI/AAAAAAAAAc0/bzKzJLg51qk/s320/javaee_ejb_jpa_servlet_46.png" /></a></div><br /><ul><li>User Name: Lawrence</li><li>Password: 123456</li></ul><div>按下提交</div><div><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2feSX6c8fI/AAAAAAAAAc8/wYyYP4QI_C8/s1600-h/javaee_ejb_jpa_servlet_47.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/_fDN8R2Wgbcs/S2feSX6c8fI/AAAAAAAAAc8/wYyYP4QI_C8/s320/javaee_ejb_jpa_servlet_47.png" /></a></div><div><br /></div><div>結果會顯示如以下畫面</div><div><br /></div><div class="separator" style="clear: both; text-align: left;"><a href="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fee6Agp8I/AAAAAAAAAdE/W6sbseKZSDc/s1600-h/javaee_ejb_jpa_servlet_48.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/_fDN8R2Wgbcs/S2fee6Agp8I/AAAAAAAAAdE/W6sbseKZSDc/s320/javaee_ejb_jpa_servlet_48.png" /></a></div><div><br /></div><div>現在講解一下流程:</div><div><ol><li>按下提交</li><li>瀏覽器將表格內容送回 IndexServlet</li><li>IndexServlet 接收內容後將 userName 和 password 送到 EJB Session bean - UserController 的 addUser function</li><li>UserController&nbsp;利用&nbsp;EntityManager 將 userName 和 password 加入到 user table 內</li><li>IndexServlet&nbsp;將所有 user 找出來</li><li>IndexServlet 將 user list 送到 index.jsp 顯示</li></ol><div>大概就是這樣<br /><br />完整範例:&nbsp;<a href="http://sites.google.com/site/lawrencespace/lawpronotes/download/EJB_JPA_Servlet.zip">EJB_JPA_Servlet.zip</a></div><div><br /></div><div>相關書籍:&nbsp;<a href="http://www.amazon.com/Beginning-Java-trade-Platform-GlassFish/dp/1430219548?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Beginning Java™ EE 6 Platform with GlassFish™ 3: From Novice to Professional" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1430219548&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1430219548" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Pro-JPA-Mastering-Persistence-Technology/dp/1430219564?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Pro JPA 2: Mastering the Java™ Persistence API (Expert's Voice in Java Technology)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1430219564&amp;tag=program06-20" /></a><a href="http://www.amazon.com/EJB-3-Action-Debu-Panda/dp/1933988347?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="EJB 3 in Action" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1933988347&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1933988347" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1430219564" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /></div></div></div></div><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-4305019519713509058?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
