<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JPA | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/jpa/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-11-12T10:33:44+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring 整合 JPA]]></title>
    <link href="http://pro.ctlok.com/blog/2012/07/18/spring-integrate-jpa.html"/>
    <updated>2012-07-18T12:16:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/07/18/spring-integrate-jpa</id>
    <content type="html"><![CDATA[<p>很久沒寫文章，隨意找些東西來記錄一下。</p>

<p>Spring 整合 JPA 是很簡單的，只需在 XML 檔案設定數個 Bean 就可以:</p>

<p>先設定好 persistence.xml:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (persistence.xml)</span> <a href='/downloads/code/spring-integrate-jpa/persistence.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;persistence</span> <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/persistence&quot;</span>
</span><span class='line'>    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd&quot;</span>
</span><span class='line'>    <span class="na">version=</span><span class="s">&quot;2.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;persistence-unit</span> <span class="na">name=</span><span class="s">&quot;defaultDS&quot;</span> <span class="na">transaction-type=</span><span class="s">&quot;RESOURCE_LOCAL&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;provider&gt;</span>org.hibernate.ejb.HibernatePersistence<span class="nt">&lt;/provider&gt;</span>
</span><span class='line'>        <span class="nt">&lt;non-jta-data-source&gt;</span>jdbc/ctlok<span class="nt">&lt;/non-jta-data-source&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;class&gt;</span>com.ctlok.pro.entity.User<span class="nt">&lt;/class&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hibernate.dialect&quot;</span> <span class="na">value=</span><span class="s">&quot;org.hibernate.dialect.MySQL5Dialect&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/persistence-unit&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/persistence&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!--more-->


<p>在 Spring config 加上以下設定
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (application-context.xml)</span> <a href='/downloads/code/spring-integrate-jpa/application-context.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xmlns:context=</span><span class="s">&quot;http://www.springframework.org/schema/context&quot;</span>
</span><span class='line'>    <span class="na">xmlns:aop=</span><span class="s">&quot;http://www.springframework.org/schema/aop&quot;</span> <span class="na">xmlns:zksp=</span><span class="s">&quot;http://www.zkoss.org/2008/zkspring/core&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tx=</span><span class="s">&quot;http://www.springframework.org/schema/tx&quot;</span>
</span><span class='line'>    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/aop </span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/context</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/context/spring-context-3.0.xsd</span>
</span><span class='line'><span class="s">           http://www.zkoss.org/2008/zkspring/core http://www.zkoss.org/2008/zkspring/core/zkspring-core.xsd</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;context:annotation-config</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tx:annotation-driven</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.LocalEntityManagerFactoryBean&quot;</span> <span class="na">id=</span><span class="s">&quot;entityManagerFactory&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;persistenceUnitName&quot;</span> <span class="na">value=</span><span class="s">&quot;defaultDS&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;</span> <span class="na">id=</span><span class="s">&quot;transactionManager&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;entityManagerFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;entityManagerFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>這樣就可以在 Repoitory bean 內使用 @PersistenceContext 注入 Entity Manager 了:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (UserDao.java)</span> <a href='/downloads/code/spring-integrate-jpa/UserDao.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ctlok</span><span class="o">.</span><span class="na">pro</span><span class="o">.</span><span class="na">dao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.EntityManager</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.PersistenceContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PersistenceContext</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">EntityManager</span> <span class="n">em</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">findAll</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Entity</span><span class="o">&gt;)</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">&quot;SELECT e FROM User e&quot;</span><span class="o">,</span> <span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">getResultList</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>並可以在 Service bean 使用 @Transactional 令 Spring 自動管理 Transaction:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (UserService.java)</span> <a href='/downloads/code/spring-integrate-jpa/UserService.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ctlok</span><span class="o">.</span><span class="na">pro</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.Transactional</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Service</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Transactional</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createUser</span><span class="o">(){</span>
</span><span class='line'>        <span class="c1">//..........</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自訂 EclipseLink Logger]]></title>
    <link href="http://pro.ctlok.com/2011/12/customize-eclipselink-logger.html"/>
    <updated>2011-12-19T16:02:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/12/customize-eclipselink-logger</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"><a href="http://www.eclipse.org/eclipselink/images/logos/eclipselink-logo.png" imageanchor="1" style=""><img border="0" height="71" width="242" src="http://www.eclipse.org/eclipselink/images/logos/eclipselink-logo.png" /></a></div>


<br /><br />預設的 <b>EclipseLink logger</b> 是會將所有訊息都會打印到 <b>System.out</b> 去，但 <b>System.out</b> 的記錄通常很難查找。如果不同的應用程式都在同一台 <b>Server</b> 上運行就更加混亂，不同的應用程式都會向 <b>System.out</b> 送出資料，根本不能拿來分析特定一個應用程式的行為。通常做法是會將不同的應用程式都設定不同的日誌檔案，以便分析。<br /><br />要將 <b>EclipseLink</b> 的日誌寫到自己的日誌檔案是很簡單的，只需 <b>Extend</b> <b>org.eclipse.persistence.logging.AbstractSessionLog</b> 這個 <b>class</b>，並且實現 <b>public void log(SessionLogEntry sessionLogEntry)</b> 就可以了，以下有一個例子是將 <b>EclipseLink</b> 的日誌經由 <b>Slf4j</b> 傳送到自訂的日誌檔案中。<br /><br /><pre class="brush: java">package com.ctlok.pro.log<br /><br />import org.eclipse.persistence.logging.AbstractSessionLog;<br />import org.eclipse.persistence.logging.SessionLogEntry;<br /><br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br /><br />public class MyEclipseLinkLogger extends AbstractSessionLog {<br />    <br />    private static final Logger logger = LoggerFactory.getLogger(MyEclipseLinkLogger.class);<br />    <br />    @Override<br />    public void log(SessionLogEntry sessionLogEntry) {<br />        switch (sessionLogEntry.getLevel()) {<br />        case SEVERE:<br />            logger.error(sessionLogEntry.getMessage());<br />            break;<br />        case WARNING:<br />            logger.warn(sessionLogEntry.getMessage());<br />            break;<br />        case INFO:<br />            logger.info(sessionLogEntry.getMessage());<br />            break;<br />        case FINE:<br />        default:<br />            logger.debug(sessionLogEntry.getMessage());<br />        }<br />    }<br />    <br />}<br /></pre><br />然後在 persistence.xml 的 propertiese 中加上:<br /><pre class="brush:xml">&lt;property name=&quot;eclipselink.logging.logger&quot; value=&quot;com.ctlok.pro.log.MyEclipseLinkLogger &quot;/&gt;<br /></pre><br />這樣就可以令 <b>EclipseLink</b> 使用自訂的 <b>Logger</b> 去打印日誌了。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5255208762444246598?l=lawpronotes.blogspot.com' alt='' /></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[將 Seam 的 Hibernate Persistence Provider 轉為 EclipseLink]]></title>
    <link href="http://pro.ctlok.com/2010/10/seam-eclipselink-persistence-provider.html"/>
    <updated>2010-10-07T11:51:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/10/seam-eclipselink-persistence-provider</id>
    <content type="html"><![CDATA[<p><b>JBoss Seam Framework</b> 預設的 <b>Persistence Provider</b> 是 <b>Hibernate</b>，但 <b>Hibernate</b> 未必能夠滿足不同 <b>Database</b> 的需求，Seam 亦提供了一種方法將 <b>Hibernate</b> 轉為 <b>OpenJPA</b> 或其他 <b>Persistence Provider</b>。<br /><br />如果你需要將 <b>Hibernate</b> 轉為使用 <b>OpenJPA</b> 可參考這篇: <a href="http://seamframework.org/Documentation/UsingOpenJPAAsPersistenceProviderInsteadOfHibernate">http://seamframework.org/Documentation/UsingOpenJPAAsPersistenceProviderInsteadOfHibernate</a><br /><br />以下的是將 <b>Hibernate</b> 轉為使用 <b>EclipseLink</b> 的方法。<br /><br />首先要更改 <b>persistence.xml</b>:<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence"<br /> xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"<br /> xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"<br /> version="1.0"&gt;<br /> &lt;persistence-unit name="ctlok" transaction-type="RESOURCE_LOCAL"&gt;<br />  &lt;provider&gt;org.eclipse.persistence.jpa.PersistenceProvider&lt;/provider&gt;<br />  &lt;non-jta-data-source&gt;jdbc/oracle&lt;/non-jta-data-source&gt;<br />  &lt;class&gt;com.ctlok.pro.entity.User&lt;/class&gt;<br />  &lt;class&gt;com.ctlok.pro.entity.UserInfo&lt;/class&gt;<br />  &lt;exclude-unlisted-classes&gt;false&lt;/exclude-unlisted-classes&gt;<br />  &lt;properties&gt;<br />   &lt;property name="eclipselink.target-server" value="Websphere" /&gt;<br />   &lt;property name="eclipselink.target-database" value="Oracle" /&gt;<br />   &lt;property name="eclipselink.logging.level" value="INFO" /&gt;<br />   &lt;property name="eclipselink.logging.timestamp" value="true" /&gt;<br />   &lt;property name="eclipselink.logging.session" value="true" /&gt;<br />   &lt;property name="eclipselink.logging.thread" value="false" /&gt;<br />   &lt;property name="eclipselink.logging.exceptions" value="true" /&gt;<br />   &lt;property name="eclipselink.cache.type.default" value="NONE" /&gt;<br />  &lt;/properties&gt;<br /> &lt;/persistence-unit&gt;<br />&lt;/persistence&gt;<br /></pre><br /><b>properties</b> 的設定請自行更改。<br /><br />重要的是: <br /><ul><li><b>transaction-type</b> 一定要是 <b>RESOURCE_LOCAL</b></li><li><b>provider</b> 改成是 <b>EclipseLink</b> 的 <b>PersistenceProvider</b></li><li>一定要是 <b>non-jta-data-source</b></li><li>將所有 <b>Entity Class</b> 也加到 <b>persistence.xml</b> 中</li></ul><br />設定好 <b>persistence.xml</b> 後，要設定 <b>components.xml</b>:<br /><br />在 <b>components.xml</b> 加入以下的設定:<br /><pre class="brush: xml">&lt;transaction:entity-transaction<br /> entity-manager=&quot;#{entityManager}&quot; /&gt;<br /><br />&lt;persistence:entity-manager-factory<br /> persistence-unit-name=&quot;ctlok&quot; name=&quot;entityManagerFactory&quot; startup=&quot;false&quot; /&gt;<br /><br />&lt;persistence:managed-persistence-context<br /> name=&quot;entityManager&quot; auto-create=&quot;true&quot; entity-manager-factory=&quot;#{entityManagerFactory}&quot; /&gt;<br /><br />&lt;component class=&quot;org.jboss.seam.persistence.PersistenceProvider&quot;<br /> name=&quot;org.jboss.seam.persistence.persistenceProvider&quot; scope=&quot;stateless&quot; /&gt;<br /></pre><br />請記得要更改 <b>persistence-unit-name</b> 為 <b>persistence.xml</b> 所設定的名稱。<br /><br />這樣就可以將 <b>Hibernate</b> 轉為使用 <b>EclipseLink</b> 了。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/JBoss-Seam-Simplicity-Power-Beyond/dp/0131347969?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="JBoss(R) Seam: Simplicity and Power Beyond Java(TM) EE" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0131347969&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0131347969" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Beginning-trade-JBoss-Experts-Voice/dp/143021922X?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Beginning JSF&amp;trade; 2 APIs and JBoss® Seam (Expert&#39;s Voice in Java)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=143021922X&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=143021922X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Beginning-trade-APIs-JBoss-ebook/dp/B003U89104?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Beginning JSF&amp;trade; 2 APIs and JBoss® Seam" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=B003U89104&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=B003U89104" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-6176392827455301235?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 JPA 自動產生 ID]]></title>
    <link href="http://pro.ctlok.com/2010/04/jpa-id.html"/>
    <updated>2010-04-15T10:41:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/04/jpa-id</id>
    <content type="html"><![CDATA[<p>以 PostgreSQL 為例。<br /><br />首先先在 PostgreSQL 內新增一個 Sequence 和 Table。<br /><br />User ID Sequence:<br /><pre class="brush: sql">CREATE SEQUENCE user_id_seq<br />  INCREMENT 1<br />  MINVALUE 1<br />  MAXVALUE 9223372036854775807<br />  START 1<br />  CACHE 1;<br /></pre><br />User Table:<br /><pre class="brush: sql">CREATE TABLE &quot;user&quot;<br />(<br />  uid integer NOT NULL DEFAULT nextval(&#39;user_id_seq&#39;::regclass),<br />  username character varying(255) NOT NULL,<br />  &quot;password&quot; character varying(255) NOT NULL,<br />  CONSTRAINT user_pk PRIMARY KEY (uid)<br />)<br />WITH (<br />  OIDS=FALSE<br />);<br /></pre><br />然後新增一個 Entity class。<br /><br />User entity:<br /><pre class="brush: java">package com.blogspot.lawpronotes.entity;<br /><br />import java.io.Serializable;<br /><br />import javax.persistence.Basic;<br />import javax.persistence.Column;<br />import javax.persistence.Entity;<br />import javax.persistence.GeneratedValue;<br />import javax.persistence.GenerationType;<br />import javax.persistence.Id;<br />import javax.persistence.SequenceGenerator;<br />import javax.persistence.Table;<br /><br />@Entity<br />@Table(name = &quot;user&quot;, schema = &quot;public&quot;)<br />public class User implements Serializable {<br />    private static final long serialVersionUID = 1L;<br /><br />    @Id<br />    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;USER_UID_GENERATOR&quot;)<br />    @SequenceGenerator(name = &quot;USER_UID_GENERATOR&quot;, sequenceName = &quot;user_id_seq&quot;, allocationSize = 1)<br />    @Column(name = &quot;uid&quot;)<br />    private Integer uid;<br /><br />    @Basic<br />    @Column(name = &quot;username&quot;, nullable = false, unique = true)<br />    private String username;<br /><br />    @Basic<br />    @Column(name = &quot;password&quot;, nullable = false, unique = false)<br />    private String password;<br /><br />    public User() {<br />    }<br /><br />    public Integer getUid() {<br />        return this.uid;<br />    }<br /><br />    public void setUid(Integer uid) {<br />        this.uid = uid;<br />    }<br /><br />    public String getName() {<br />        return this.username;<br />    }<br /><br />    public void setName(String username) {<br />        this.username = username;<br />    }<br /><br />    public String getPassword() {<br />        return this.password;<br />    }<br /><br />    public void setPassword(String password) {<br />        this.password = password;<br />    }<br /><br />}<br /></pre><br />其中的關鍵:<br /><pre class="brush: java">@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;USER_UID_GENERATOR&quot;)<br />@SequenceGenerator(name = &quot;USER_UID_GENERATOR&quot;, sequenceName = &quot;user_id_seq&quot;, allocationSize = 1)<br /></pre><br />GeneratedValue 的 strategy 是 GenerationType.SEQUENCE，即是不斷地加同一個數值，達到一致。而 generator 即是數值產生器的名稱，數值產生器即是 SequenceGenerator，SequenceGenerator 的 sequenceName 要跟資料庫內的 sequence 名稱一樣，因為是靠資料庫內的 sequence 產生數值的， allocationSize 即是每次將數值加多少，因為資料庫內的 sequence 設定了每次加 1 ，allocationSize 也要是 1 才行，系統預設的 allocationSize 是 50。現在應該可以自動產生 ID 了。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Pro-JPA-Mastering-Persistence-Technology/dp/1430219564?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Pro JPA 2: Mastering the Java&amp;trade; Persistence API (Expert&#39;s Voice in Java Technology)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1430219564&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1430219564" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Pro-EJB-Java-Persistence-API/dp/1590596455?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Pro EJB 3: Java Persistence API" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1590596455&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1590596455" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Appendixes/dp/1596821620?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="PostgreSQL 8.4 Official Documentation - Volume V. Internals and Appendixes" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1596821620&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1596821620" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-1752873219027309956?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 JPA 連接 PostgreSQL]]></title>
    <link href="http://pro.ctlok.com/2010/04/jpa-postgresql.html"/>
    <updated>2010-04-09T14:37:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/04/jpa-postgresql</id>
    <content type="html"><![CDATA[<p>首先資料庫內的表格名稱最好為英文小寫，因為 PostgreSQL 會自動將表格名稱轉為小寫。<br />例子:<br /><pre class="brush: sql">INSERT INTO public.User (id, name, password) VALUES (1, 'Lawrence', '123456')<br /></pre><br />會變成:<br /><pre class="brush: sql">INSERT INTO public.user (id, name, password) VALUES (1, 'Lawrence', '123456')<br /></pre><br />這樣便會找不到表格而出錯。<br />以下這種寫法才可以順利找到表格。<br /><pre class="brush: sql">INSERT INTO public.&quot;User&quot; (id, name, password) VALUES (1, 'Lawrence', '123456')<br /></pre><br />需要將 User 用 &quot; 包起來才可以，而 JPA 中插入資料時，程式最終也會將物件變為 SQL 才能將資料加入或取出。JPA 並不會自動將表格名稱用 &quot; 包起來。<br /><br />Entity 例子:<br /><pre class="brush: java">package com.blogspot.lawpronotes.entity;<br /><br />import java.io.Serializable;<br /><br />import javax.persistence.Column;<br />import javax.persistence.Entity;<br />import javax.persistence.Id;<br />import javax.persistence.Table;<br /><br />/<em>*<br /> * The persistent class for the user database table.<br /> * <br /> </em>/<br />@Entity<br />@Table(name = &quot;user&quot;, schema = &quot;public&quot;)<br />public class User implements Serializable {<br />    private static final long serialVersionUID = 1L;<br /><br />    @Id<br />    @Column(name = &quot;id&quot;)<br />    private Integer id;<br /><br />    @Column(name = &quot;name&quot;)<br />    private String name;<br /><br />    @Column(name = &quot;password&quot;)<br />    private String password;<br /><br />    public User() {<br />    }<br /><br />    public Integer getId() {<br />        return this.id;<br />    }<br /><br />    public void setId(Integer id) {<br />        this.id = id;<br />    }<br /><br />    public String getName() {<br />        return this.name;<br />    }<br /><br />    public void setName(String name) {<br />        this.name = name;<br />    }<br /><br />    public String getPassword() {<br />        return this.password;<br />    }<br /><br />    public void setPassword(String password) {<br />        this.password = password;<br />    }<br /><br />}<br /></pre><br />如果表格名稱是大寫又不能改的話，只好將<br /><pre class="brush: java">@Table(name=&quot;user&quot;, schema=&quot;public&quot;)<br /></pre>改為<br /><pre class="brush: java">@Table(name=&quot;&amp;quot;User&amp;quot;&quot;, schema=&quot;public&quot;)<br /></pre><br />Column 名稱也一樣，將<br /><pre class="brush: java">@Column(name = &quot;name&quot;)<br /></pre>改為<br /><pre class="brush: java">@Column(name = &quot;&amp;quot;Name&amp;quot;&quot;)<br /></pre><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Language/dp/1596821582?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="PostgreSQL 8.4 Official Documentation - Volume I. The SQL Language" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1596821582&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1596821582" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Administration/dp/1596821590?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="PostgreSQL 8.4 Official Documentation - Volume II. Server Administration" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1596821590&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1596821590" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/PostgreSQL-8-4-Official-Documentation-Programming/dp/1596821604?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="PostgreSQL 8.4 Official Documentation - Volume III. Server Programming" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1596821604&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1596821604" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-7358375987171526715?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
