<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/java/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-04-03T14:56:13+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maven Setup Jetty Development Server]]></title>
    <link href="http://pro.ctlok.com/blog/2012/03/30/maven-setup-jetty-dev-server.html"/>
    <updated>2012-03-30T14:38:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/03/30/maven-setup-jetty-dev-server</id>
    <content type="html"><![CDATA[<p>在 Maven 使用 Jetty 作為 Web Server 是非常簡單，在 <code>pom.xml</code> 加入以下設定:</p>

<p>``` xml
<plugin></p>

<pre><code>&lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
&lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
&lt;version&gt;6.1.26&lt;/version&gt;
&lt;configuration&gt;
    &lt;stopPort&gt;9966&lt;/stopPort&gt;
    &lt;stopKey&gt;stop&lt;/stopKey&gt;
&lt;/configuration&gt;
</code></pre>

<p></plugin>
```</p>

<p>以後只需要輸入 <code>mvn jetty:run</code> 就會啟動 Jetty Web Server，輸入 <code>mvn jetty:stop</code> 則關閉，
非常方便。啟動後打開 <code>http://localhost:8080</code> 就可以用了。</p>

<hr />

<p>如果要在 Unit Test 測試 URL 或版面的 HTML 是否正確，可以參考以下的 <code>pom.xml</code> 設定:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (pom.xml)</span> <a href='/downloads/code/maven-setup-jetty-dev-server/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'><span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>pro.ctlok.com<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jetty<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.0.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>jetty<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url&gt;</span>http://maven.apache.org<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.5<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>javax.servlet.jsp<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>jsp-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>4.10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;build&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>2.0.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;source&gt;</span>1.5<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;target&gt;</span>1.5<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-surefire-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>2.12<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.mortbay.jetty<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-jetty-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>6.1.26<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;stopPort&gt;</span>9966<span class="nt">&lt;/stopPort&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;stopKey&gt;</span>stop<span class="nt">&lt;/stopKey&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                    <span class="c">&lt;!-- Before test class execute, start Jetty web server first --&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;id&gt;</span>start-jetty<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;phase&gt;</span>test-compile<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;goal&gt;</span>run<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;scanIntervalSeconds&gt;</span>0<span class="nt">&lt;/scanIntervalSeconds&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;daemon&gt;</span>true<span class="nt">&lt;/daemon&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>                    <span class="c">&lt;!-- After test, stop Jetty web server --&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;id&gt;</span>stop-jetty<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;phase&gt;</span>test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;goal&gt;</span>stop<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/build&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>以上設定可以在測試前啟動 Jetty Web Server，測試完畢就會自動關閉。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (HelloServlet.java)</span> <a href='/downloads/code/maven-setup-jetty-dev-server/HelloServlet.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">pro</span><span class="o">.</span><span class="na">ctlok</span><span class="o">.</span><span class="na">com</span><span class="o">.</span><span class="na">jetty</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">6496751289098922589L</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="nd">@Override</span>
</span><span class='line'>	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span>
</span><span class='line'>			<span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (UrlTest.java)</span> <a href='/downloads/code/maven-setup-jetty-dev-server/UrlTest.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">pro</span><span class="o">.</span><span class="na">ctlok</span><span class="o">.</span><span class="na">com</span><span class="o">.</span><span class="na">jetty</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.HttpURLConnection</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UrlTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="nd">@Test</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://localhost:8080/jetty/index&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="n">HttpURLConnection</span> <span class="n">conn</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpURLConnection</span><span class="o">)</span> <span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">assert</span> <span class="n">conn</span><span class="o">.</span><span class="na">getResponseCode</span><span class="o">()</span> <span class="o">==</span> <span class="mi">200</span><span class="o">;</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">BufferedReader</span> <span class="n">rd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">conn</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">try</span><span class="o">{</span>
</span><span class='line'>			<span class="k">assert</span> <span class="n">rd</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">rd</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (web.xml)</span> <a href='/downloads/code/maven-setup-jetty-dev-server/web.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;web-app</span> <span class="na">version=</span><span class="s">&quot;2.5&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee&quot;</span>
</span><span class='line'><span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'><span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;display-name&gt;</span>jetty<span class="nt">&lt;/display-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;session-config&gt;</span>
</span><span class='line'>        <span class="nt">&lt;session-timeout&gt;</span>30<span class="nt">&lt;/session-timeout&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/session-config&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>        <span class="nt">&lt;display-name&gt;</span>IndexServlet<span class="nt">&lt;/display-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>IndexServlet<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-class&gt;</span>pro.ctlok.com.jetty.HelloServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>IndexServlet<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url-pattern&gt;</span>/index<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;welcome-file-list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;welcome-file&gt;</span>index<span class="nt">&lt;/welcome-file&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/welcome-file-list&gt;</span>
</span><span class='line'><span class="nt">&lt;/web-app&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Google Closure Compiler 在執行期間壓縮 Javascript]]></title>
    <link href="http://pro.ctlok.com/2011/10/closure-compiler-run-time-compress.html"/>
    <updated>2011-10-21T14:16:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/10/closure-compiler-run-time-compress</id>
    <content type="html"><![CDATA[<p>趁有空又寫寫文章，今次介紹的是 <b>Google Closure Compiler</b>，其實之前已經介紹過一次: <a href="http://pro.ctlok.com/2010/01/javascript_22.html">線上 <b>Javascript</b> 工具</a>，這個工具可以將 <b>Javascript</b> 的大小大幅降低。<br /><br />使用線上工具去壓縮有一個缺點就是要將 <b>Javascript</b> 檔案儲存成 <b>2</b> 份，1 份是原始檔案，另 1 份是經壓縮內容的 <b>Javascript</b>，因為不可能更改經壓縮過的內容，每一次更改檔案就需要更改原始檔案，然後利用 <b>Google Closure Compiler</b> 線上工具再壓縮一次，再更新壓縮內容，而且經壓縮的 <b>Javascript</b> 在瀏覽器 <b>debug</b> 亦比較困難。雖然你可以在 <b>HTML</b> 將引入的 <b>Javascript</b> 檔案改為未經壓縮然後 <b>debug</b>，但萬一忘記改回就麻煩了。<br /><br />幸好 <b>Google Closure Compiler</b> 有提供到 <b>Java</b> 使用的 <b>API</b> 來達到執行期間 <b>(Run Time)</b> 將 <b>Javascript</b> 壓縮。<br /><br />首先到 <b>Google Code</b> 下載: <a href="http://code.google.com/p/closure-compiler/downloads/list">Google Closure Compiler</a><br /><br />可用以下其中一個方法去壓縮:<br /><pre class="brush: java">protected String compress(InputStream inputStream) throws IOException{<br />    Compiler compiler = new Compiler();<br />    <br />    CompilerOptions options = new CompilerOptions();<br />    CompilationLevel.SIMPLE_OPTIMIZATIONS<br />            .setOptionsForCompilationLevel(options);<br />    <br />    JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot; &quot;);<br />    JSSourceFile input = JSSourceFile.fromInputStream(&quot;origin.js&quot;, inputStream);<br />    compiler.compile(extern, input, options);<br />    <br />    return compiler.toSource();<br />}<br /><br />protected String compress(String str) throws IOException{<br />    Compiler compiler = new Compiler();<br />    <br />    CompilerOptions options = new CompilerOptions();<br />    CompilationLevel.SIMPLE_OPTIMIZATIONS<br />            .setOptionsForCompilationLevel(options);<br />    <br />    JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot; &quot;);<br />    JSSourceFile input = JSSourceFile.fromCode(&quot;origin.js&quot;, str);<br />    compiler.compile(extern, input, options);<br />    <br />    return compiler.toSource();<br />}<br /></pre><br />其中 CompilationLevel 分別有 3 個選項:<br /><ul><li>CompilationLevel.WHITESPACE_ONLY</li><li>CompilationLevel.SIMPLE_OPTIMIZATIONS</li><li>CompilationLevel.ADVANCED_OPTIMIZATIONS</li></ul><br /><b>WHITESPACE_ONLY</b> 只會移除 <b>Javascript</b> 的空白。<br /><br /><b>SIMPLE_OPTIMIZATIONS</b> 是最常用的一種，移除 <b>Javascript</b> 的空白，而且將一些 <b>Local Variable</b> 或 <b>Local Function</b> 名稱改變，並將一些沒有用到的 <b>Variable</b> 移除，大幅提高 <b>Javascript</b> 的壓縮率。<br /><br /><b>ADVANCED_OPTIMIZATIONS</b> 是最高壓縮率的模式，將所有 <b>Variable</b> 或 <b>Function</b> 的名稱改變，有使用 <b>Javascript Framework</b> 不建議使用這個選項。<br /><br />在真實環境中我們可以加入一個 <b>Filter</b> 去將 <b>Javascript</b> 壓縮:<br /><pre class="brush: js">package com.ctlok.pro.filter;<br /><br />import java.io.IOException;<br />import java.io.InputStream;<br />import java.util.HashMap;<br />import java.util.Map;<br />import java.util.logging.Level;<br /><br />import javax.servlet.Filter;<br />import javax.servlet.FilterChain;<br />import javax.servlet.FilterConfig;<br />import javax.servlet.ServletException;<br />import javax.servlet.ServletRequest;<br />import javax.servlet.ServletResponse;<br />import javax.servlet.http.HttpServletRequest;<br />import javax.servlet.http.HttpServletResponse;<br /><br />import com.google.javascript.jscomp.CompilationLevel;<br />import com.google.javascript.jscomp.Compiler;<br />import com.google.javascript.jscomp.CompilerOptions;<br />import com.google.javascript.jscomp.JSSourceFile;<br />import com.google.javascript.jscomp.WarningLevel;<br /><br />public class ClosureCompilerFilter implements Filter {<br /><br />    //for cache<br />    private final Map&lt;String, String&gt; compressedJs = new HashMap&lt;String, String&gt;();<br />    private FilterConfig filterConfig;<br />    <br />    public void init(FilterConfig filterConfig) throws ServletException {<br />        this.filterConfig = filterConfig;<br />        <br />        //Turn off the compiler log<br />        Compiler.setLoggingLevel(Level.OFF);<br />    }<br /><br />    public void destroy() {<br /><br />    }<br /><br />    public void doFilter(ServletRequest request, ServletResponse response,<br />            FilterChain chain) throws IOException, ServletException {<br />        <br />        HttpServletRequest req = (HttpServletRequest) request;<br />        HttpServletResponse resp = (HttpServletResponse) response;<br />        <br />        String uri = req.getRequestURI();<br />        <br />        //Prevent compress the compressed Javascript, such as jquery.min.js, mootools.min.js, etc.<br />        if (!uri.matches(&quot;.<em>\.min\.js$&quot;)){<br />            String js = null;<br />            <br />            if (compressedJs.containsKey(uri)){<br />                //get from cache<br />                js = compressedJs.get(uri);<br />            }else{<br />                String contextPath = req.getContextPath();<br />                String jsPath = uri.substring(contextPath.length());<br />                <br />                //get javascript file as stream<br />                //getResourceAsStream cannot include context path<br />                InputStream inputStream = filterConfig.getServletContext().getResourceAsStream(jsPath);<br />                js = compress(inputStream);<br />                <br />                //put to cache<br />                compressedJs.put(uri, js);<br />            }<br />            <br />            resp.getWriter().write(js);<br />            return;<br />        }<br />        <br />        chain.doFilter(request, response);<br />    }<br />    <br />    protected String compress(InputStream inputStream) throws IOException{<br />        Compiler compiler = new Compiler();<br />        <br />        CompilerOptions options = new CompilerOptions();<br />        CompilationLevel.SIMPLE_OPTIMIZATIONS<br />                .setOptionsForCompilationLevel(options);<br />        WarningLevel.QUIET.setOptionsForWarningLevel(options);<br />        <br />        JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot;&quot;);<br />        JSSourceFile input = JSSourceFile.fromInputStream(&quot;origin.js&quot;, inputStream);<br />        compiler.compile(extern, input, options);<br /><br />        return compiler.toSource();<br />    }<br /><br />}<br /></pre><br />在 web.xml 加上:<br /><pre class="brush: xml">&lt;filter&gt;<br />    &lt;display-name&gt;ClosureCompilerFilter&lt;/display-name&gt;<br />    &lt;filter-name&gt;ClosureCompilerFilter&lt;/filter-name&gt;<br />    &lt;filter-class&gt;com.ctlok.pro.filter.ClosureCompilerFilter&lt;/filter-class&gt;<br />&lt;/filter&gt;<br />&lt;filter-mapping&gt;<br />    &lt;filter-name&gt;ClosureCompilerFilter&lt;/filter-name&gt;<br />    &lt;url-pattern&gt;</em>.js&lt;/url-pattern&gt;<br />&lt;/filter-mapping&gt;<br /></pre><br />這樣就可以令到 <b>.js</b> 結尾的 <b>Javascript</b> 檔案經壓縮再傳出去，又不會將 <b>.min.js</b> 已經壓縮過的 <b>Javascript</b> 又再壓縮一次。<br />經過壓縮後會儲存在 <b>Map</b> 內，畢竟壓縮的時間也不短。<br /><br />例如我有一個 /js/myjs.js 的檔案:<br /><pre class="brush: js">function ctlok() {<br />    var self = this;<br />    var $ = jQuery;<br /><br />     this.publicFunction = function() {<br />           localFunction();<br />      };<br /><br />     var localFunction = function() {<br />          var aaaaa = &#39;aaaaa&#39;;<br />          $(&#39;:input&#39;).val(aaaaa);<br />     };<br />}<br /></pre><br />經壓縮後變成:<br /><pre class="brush: js">function ctlok(){var a=jQuery;this.publicFunction=function(){a(&quot;:input&quot;).val(&quot;aaaaa&quot;)}};<br /></pre><br />範例下載:: <a href="https://sites.google.com/site/lawrencespace/lawpronotes/download/Google-Closure-Compiler.zip">Google-Closure-Compiler.zip</a><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-3261921414800777822?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guice + Jersey 打造 RESTful 應用程式]]></title>
    <link href="http://pro.ctlok.com/2011/09/guice-jersey-restful-application.html"/>
    <updated>2011-09-08T14:46:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/09/guice-jersey-restful-application</id>
    <content type="html"><![CDATA[<p>以前我喜歡使用 <b>Spring + Spring Web MVC</b> 來打造 <b>RESTful</b> 應用程式，但 <b>Spring</b> 的起動有點慢，如果放上 <b>Google App Engine</b> 上經常令用戶等待很久才載入到頁面。<br /><br />今次選用了 <b>Guice + Jersey</b> 的組合。<b>Guice</b> 是一個輕量級的容器，設定上比起 <b>Spring</b> 更簡單，起動或注入速度亦比 <b>Spring</b> 快。而 <b>Jersey</b> 則是一個為 <b>RESTful web service</b> 而設的一個 <b>Framework</b>。<br /><br /><b>Gucie</b> 官方網址: <a href="http://code.google.com/p/google-guice/">http://code.google.com/p/google-guice/</a><br /><b>Jersey</b> 官方網址: <a href="http://jersey.java.net/">http://jersey.java.net/</a><br /><br />因為手上的電腦沒有安裝 <b>Application Server</b>，只好拿 <b>GAE</b> 的 <b>Development Server</b> 來測試。<br /><br />首先下載 <b>Guice</b> : <a href="http://code.google.com/p/google-guice/downloads/detail?name=guice-3.0.zip&can=2&q=">http://code.google.com/p/google-guice/downloads/detail?name=guice-3.0.zip&amp;can=2&amp;q=</a> (現時為止最新版本為 3.0)<br /><br />打開後將 <b>aopalliance.jar, guice-3.0.jar, guice-servlet-3.0.jar</b> 和 <b>javax.inject.jar</b> 加到 <b>WEB-INF/lib</b> 中並加到 <b>Class path</b>。<br /><br />然後下載 <b>Jersey</b> 所需的 <b>Jar</b> (現時為止最新版本為 1.9):<br /><ol><li><a href="https://maven.java.net/service/local/artifact/maven/redirect?r=releases&g=com.sun.jersey&a=jersey-server&v=1.9&e=jar">jersey-server.jar</a></li><li><a href="https://maven.java.net/service/local/artifact/maven/redirect?r=releases&g=com.sun.jersey&a=jersey-core&v=1.9&e=jar">jersey-core.jar</a></li><li><a href="http://repo1.maven.org/maven2/asm/asm/3.1/asm-3.1.jar">asm.jar</a></li><li><a href="http://download.java.net/maven/2/com/sun/jersey/contribs/jersey-guice/1.9-SNAPSHOT/jersey-guice-1.9-SNAPSHOT.jar">jersey-guice-1.9-SNAPSHOT.jar</a></li></ol><br />將以上的檔案一樣是放到 WEB-INF/lib 並加到 <b>Class path</b>。<br /><br />首先建立一個 <b>class</b>，每一次連接 <b>http://www.xyzdomainname.com</b> 都會顯示 <b>I am Index page</b>:<br /><pre class="brush: java">package com.ctlok.pro.controller;<br /><br />import javax.ws.rs.GET;<br />import javax.ws.rs.Path;<br />import javax.ws.rs.Produces;<br />import javax.ws.rs.core.MediaType;<br /><br />@Path(&quot;/&quot;)<br />public class CommonController {<br /><br />    @GET<br />    @Produces(MediaType.TEXT_PLAIN)<br />    public String index(){<br />        return &quot;I am Index page&quot;;<br />    }<br />    <br />}<br /></pre><br /><b>@Path</b> 是設定這個 <b>class</b> 會處理的 <b>URL</b>，可以放在 <b>Class</b> 或 <b>Method</b>。而 <b>Jersey</b> 會搜尋出在 <b>Class</b> 上有 <b>@Path</b> 的類別然後處理。<br /><b>@GET</b> 是設定這個 <b>Method</b> 處理那一種請求，一共有 5 種方式: <b>GET, POST, HEAD, PUT, DELETE</b>。<br /><b>@Produces</b> 則是回傳資料的類型，可以是 Text, XML, JSON, HTML 等等。<br /><br />然後再去建立一個 <b>Guice</b> 的 <b>Module class</b> 並設定 <b>Jersey</b>:<br /><pre class="brush:java">package com.ctlok.pro;<br /><br />import java.util.HashMap;<br />import java.util.Map;<br /><br />import com.ctlok.pro.controller.CommonController;<br />import com.google.inject.servlet.RequestScoped;<br />import com.google.inject.servlet.ServletModule;<br />import com.sun.jersey.guice.spi.container.servlet.GuiceContainer;<br /><br />public class WebModule extends ServletModule {<br /><br />    @Override<br />    protected void configureServlets(){<br />        bind(CommonController.class).in(RequestScoped.class);<br />        <br />        Map&lt;String, String&gt; parameters = new HashMap&lt;String, String&gt;(); <br />        parameters.put(&quot;com.sun.jersey.config.property.packages&quot;, &quot;com.ctlok.pro.controller&quot;);<br />        serve(&quot;/<em>&quot;).with(GuiceContainer.class, parameters);<br />    }<br />    <br />}<br /></pre><br />然後設定 <b>Guice</b> 起動時的注入器:<br /><pre class="brush: java">package com.ctlok.pro;<br /><br />import com.google.inject.Guice;<br />import com.google.inject.Injector;<br />import com.google.inject.servlet.GuiceServletContextListener;<br /><br />public class AppConfig extends GuiceServletContextListener{<br /><br />    @Override<br />    protected Injector getInjector() {<br />        return Guice.createInjector(new WebModule());<br />    }<br /><br />}<br /></pre><br />在 web.xml 設定好 <b>Guice Filter</b>和 <b>Listener</b>:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br />xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;<br />xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;<br />xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee<br />http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; version=&quot;2.5&quot;&gt;<br /> &lt;listener&gt;<br />  &lt;listener-class&gt;com.ctlok.pro.AppConfig&lt;/listener-class&gt;<br /> &lt;/listener&gt;<br /> &lt;filter&gt;<br />  &lt;filter-name&gt;guiceFilter&lt;/filter-name&gt;<br />  &lt;filter-class&gt;com.google.inject.servlet.GuiceFilter&lt;/filter-class&gt;<br /> &lt;/filter&gt;<br /> &lt;filter-mapping&gt;<br />  &lt;filter-name&gt;guiceFilter&lt;/filter-name&gt;<br />  &lt;url-pattern&gt;/</em>&lt;/url-pattern&gt;<br /> &lt;/filter-mapping&gt;<br />&lt;/web-app&gt;<br /></pre><br />打開 http://localhost:8888 後即可看到 "I am Index page".<br /><br />如要增加 URL，可以在 CommonController 加入:<br /><pre class="brush: java">@GET<br />@Path(&quot;user/{userId}/{userName}&quot;)<br />@Produces(MediaType.TEXT_PLAIN)<br />public String getUser(@PathParam(&quot;userId&quot;) String userId, @PathParam(&quot;userName&quot;) String userName){<br />    return &quot;User ID: &quot; + userId + &quot;, user name: &quot; + userName;<br />}<br /></pre><br />你可能有點疑問，<b>@Path</b> 在 Class 已經設家了，現在又有一個 <b>@Path</b> 在 <b>method</b> 上，那 Jersey 會怎麼決定。<br />其實 <b>Jersey</b> 會將 <b>class</b> 的 <b>@Path value</b> 加上 method 的 <b>@Path value</b>，即是 "/" + "user/{userId}/{userName}"。<br /><br />打開 http://localhost:8888/user/123/lawrence 顯示:User ID: 123, user name: lawrence<br /><br />其實 <b>Jersey</b> 的 <b>Method</b> 不一定返回 <b>String</b> 可以是一個 <b>Object</b> 或 <b>Jersey</b> 定義 的 <b>Response</b>。以下例字示範如何顯示一個 <b>JSP</b> 頁面，並由 <b>Controller</b> 將 <b>Model</b> 傳給 <b>View (JSP)</b>:<br /><br />先在 WEB-INF 新增一個 <b>views</b> 資料夾並新增一個 <b>example.jsp</b>，<b>JSP</b> 內容如下:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;<br />&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;<br />&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;<br />&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;<br /> &lt;head&gt;<br />  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;<br />  &lt;title&gt;Guice + Jersey + JSP&lt;/title&gt;<br /> &lt;/head&gt;<br /> &lt;body&gt;<br />  &lt;c:out value=&quot;${it.msg}&quot; /&gt;<br /> &lt;/body&gt;<br />&lt;/html&gt;<br /></pre><br />在 <b>Controller</b> 內也增加一個 <b>Method</b>:<br /><pre class="brush: java">@GET<br />@Path(&quot;jsp&quot;)<br />@Produces(MediaType.TEXT_HTML)<br />public Response getJsp(){<br />    Map&lt;String, Object&gt; model = new HashMap&lt;String, Object&gt;();<br />    model.put(&quot;msg&quot;, &quot;Hello World!&quot;);<br />    return Response.ok(new Viewable(&quot;/WEB-INF/views/example.jsp&quot;, model)).build();<br />}<br /></pre><br />打開 http://localhost:8888/jsp 顯示: Hello World!<br /><br />完整的 CommonController:<br /><pre class="brush: java">package com.ctlok.pro.controller;<br /><br />import java.util.HashMap;<br />import java.util.Map;<br /><br />import javax.ws.rs.GET;<br />import javax.ws.rs.Path;<br />import javax.ws.rs.PathParam;<br />import javax.ws.rs.Produces;<br />import javax.ws.rs.core.MediaType;<br />import javax.ws.rs.core.Response;<br /><br />import com.sun.jersey.api.view.Viewable;<br /><br />@Path(&quot;/&quot;)<br />public class CommonController {<br /><br />    @GET<br />    @Produces(MediaType.TEXT_PLAIN)<br />    public String index() {<br />        return &quot;I am Index page&quot;;<br />    }<br /><br />    @GET<br />    @Path(&quot;user/{userId}/{userName}&quot;)<br />    @Produces(MediaType.TEXT_PLAIN)<br />    public String getUser(@PathParam(&quot;userId&quot;) String userId,<br />            @PathParam(&quot;userName&quot;) String userName) {<br />        return &quot;User ID: &quot; + userId + &quot;, user name: &quot; + userName;<br />    }<br /><br />    @GET<br />    @Path(&quot;jsp&quot;)<br />    @Produces(MediaType.TEXT_HTML)<br />    public Response getJsp() {<br />        Map&lt;String, Object&gt; model = new HashMap&lt;String, Object&gt;();<br />        model.put(&quot;msg&quot;, &quot;Hello World!&quot;);<br />        return Response.ok(new Viewable(&quot;/WEB-INF/views/example.jsp&quot;, model))<br />                .build();<br />    }<br /><br />}<br /></pre><br />範例: <a href="https://sites.google.com/site/lawrencespace/lawpronotes/download/Guice-Jersey.zip?attredirects=0&d=1">Guice-Jersey.zip</a><br />密碼: <b>pro.ctlok.com</b>  相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Dependency-Injection-Dhanji-R-Prasanna/dp/193398855X?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Dependency Injection" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=193398855X&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=193398855X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Google-Guice-Lightweight-Dependency-ebook/dp/B001BYBU80?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Google Guice: Agile Lightweight Dependency Injection Framework" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=B001BYBU80&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=B001BYBU80" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/RESTful-Java-Jax-RS-Animal-Guide/dp/0596158041?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="RESTful Java with Jax-RS (Animal Guide)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596158041&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596158041" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-4420115334139656989?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSF + RichFaces 做成 Session Memory Leak]]></title>
    <link href="http://pro.ctlok.com/2011/06/jsf-richfaces-session-memory-leak.html"/>
    <updated>2011-06-24T11:34:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/06/jsf-richfaces-session-memory-leak</id>
    <content type="html"><![CDATA[<p>在公司有個項目是使用 <b>JSF</b> 作為 <b>View</b>，感覺十分差。<b>JSF</b> 給我的感覺: 運行慢，吃資源，限制又多。實在不太喜歡 <b>JSF</b>。<br /><br />在進行 <b>Street Test</b> 時，發覺 <b>Server</b> 上的 <b>Memory</b> 用得異常地多。經調查後發現 <b>RichFaces</b> 其中一個 <b>Object - AjaxStateHolder</b> 佔用大量 <b>Memory</b>。如果是使用 <b>3.2.0.SR1</b> 之前的版本更加嚴重，<b>Session</b> 隨時佔用 <b>1 Gigabytes</b> 的 <b>Memory</b>。<br /><br />解決方法就是在 <b>web.xml</b> 加入以下設定:<br /><pre class="brush: xml">&lt;context-param&gt;<br />    &lt;param-name&gt;com.sun.faces.numberOfViewsInSession&lt;/param-name&gt;<br />    &lt;param-value&gt;1&lt;/param-value&gt;<br />&lt;/context-param&gt;<br /><br />&lt;context-param&gt;<br />    &lt;param-name&gt;com.sun.faces.numberOfLogicalViews&lt;/param-name&gt;<br />    &lt;param-value&gt;1&lt;/param-value&gt;<br />&lt;/context-param&gt;<br /></pre><br />因為每運行一次 <b>JSF</b> 的 <b>View</b> 時都會將這個 <b>View</b> 放到 <b>Session</b> 內，而且同一個 <b>View</b> 亦會再儲存多一次在 <b>Session</b>，因為這些 <b>Session</b> 仍然在使用中，<b>JVM GC</b> 無法將不用的 <b>View</b> 回收，做成 <b>Memory</b> 使用量不斷增加。<br /><br />限制 <b>View</b> 數量後就可以解決這個問題。<br /><br />RichFaces bug: <a href="https://issues.jboss.org/browse/RF-3878">https://issues.jboss.org/browse/RF-3878</a><br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Core-JavaServer-Faces-David-Geary/dp/0137012896?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Core JavaServer Faces (3rd Edition)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0137012896&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0137012896" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/JavaServer-Faces-2-0-Complete-Reference/dp/0071625097?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="JavaServer Faces 2.0, The Complete Reference" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0071625097&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0071625097" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Beginning-JSP-JSF-Tomcat-Development/dp/1590599047?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Beginning JSP, JSF and Tomcat Web Development: From Novice to Professional" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1590599047&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1590599047" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-1311980917431620043?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 使用 Top Down 和 JAX-WS 來部署 Web Service Provider]]></title>
    <link href="http://pro.ctlok.com/2011/06/top-down-jax-ws-web-service-provider.html"/>
    <updated>2011-06-23T17:38:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/06/top-down-jax-ws-web-service-provider</id>
    <content type="html"><![CDATA[<p>上一篇已經介紹過使用 <b>Bottom Up</b> 的方法來開發 <b>Web Service</b>: <a href="http://pro.ctlok.com/2011/06/java-bottom-up-jax-ws-web-service.html">Java 使用 Bottom Up 和 JAX-WS 來部署 Web Service</a>。今次當然是使用 <b>Top Down</b> 的方法，個人認為 <b>Top Down</b> 其實比 <b>Bottom Up</b> 方法更好，原因是自動產生出來的 <b>XML Schema</b> 和 <b>WSDL</b> 不太好。雖然是方便，但有很多細節地方不能自己操作到，所以我是比較喜歡 <b>Top Down</b> 的。<br /><br /><div style="clear: both;"></div><br />使用 <b>Top Down</b> 一定要懂 <b>XML Schema</b> 和 <b>Web Services Description Language</b>。<br /><br /><b>XML Schema</b>: <a href="http://www.w3schools.com/schema/default.asp">http://www.w3schools.com/schema/default.asp</a><br /><b>Web Services Description Language</b>: <a href="http://www.w3schools.com/WSDL/default.asp">http://www.w3schools.com/WSDL/default.asp</a><br /><br />這次的 <b>Web Service</b> 功能是客戶端 (<b>Web service client</b>) 送出一個 Employee Id list 到 服務器端 (<b>Web service provider</b>)。<br /><br />首先建立一個 <b>WAR project</b>，然後在 <b>web root</b> 目錄 加入 <b>company.xsd</b> 和 <b>company.wsdl</b>。<br /><br />以下是 <b>company.xsd</b>:<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"<br />    targetNamespace="http://pro.ctlok.com/company" xmlns:tns="http://pro.ctlok.com/company"<br />    elementFormDefault="qualified"&gt;<br /><br />    &lt;xs:simpleType name="EmployeeId"&gt;<br />        &lt;xs:restriction base="xs:string"&gt;<br />            &lt;xs:length value="7" /&gt;<br />            &lt;xs:pattern value="E[0-9]{7}" /&gt;<br />        &lt;/xs:restriction&gt;<br />    &lt;/xs:simpleType&gt;<br /><br />    &lt;xs:simpleType name="EmployeeTitle"&gt;<br />        &lt;xs:restriction base="xs:string"&gt;<br />            &lt;xs:enumeration value="CEO" /&gt;<br />            &lt;xs:enumeration value="Manger" /&gt;<br />            &lt;xs:enumeration value="Supervisor" /&gt;<br />            &lt;xs:enumeration value="Clerk" /&gt;<br />        &lt;/xs:restriction&gt;<br />    &lt;/xs:simpleType&gt;<br /><br />    &lt;xs:complexType name="EmployeeInfo"&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name="eid" type="tns:EmployeeId"<br />                minOccurs="0" nillable="false" /&gt;<br />            &lt;xs:element name="firstName" type="xs:string"<br />                minOccurs="0" nillable="false" /&gt;<br />            &lt;xs:element name="lastName" type="xs:string"<br />                minOccurs="0" nillable="false" /&gt;<br />            &lt;xs:element name="age" type="xs:unsignedShort"<br />                minOccurs="0" nillable="false" /&gt;<br />            &lt;xs:element name="title" type="tns:EmployeeTitle"<br />                minOccurs="0" nillable="false" /&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:complexType name="EmployeeInfoWrapper"&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name="employeeInfo" type="tns:EmployeeInfo"<br />                minOccurs="0" maxOccurs="unbounded" nillable="false" /&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:complexType name="EmployeeIdWrapper"&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name="eid" type="tns:EmployeeId"<br />                minOccurs="0" maxOccurs="unbounded" nillable="false" /&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:element name="EmployeeIdList" type="tns:EmployeeIdWrapper" /&gt;<br />    &lt;xs:element name="EmployeeInfoList" type="tns:EmployeeInfoWrapper" /&gt;<br /><br />&lt;/xs:schema&gt;<br /></pre><br />以下則是 <b>company.wsdl</b>:<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;wsdl:definitions name="Company" targetNamespace="http://pro.ctlok.com/company"<br />    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://pro.ctlok.com/company"<br />    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;<br />    <br />    &lt;wsdl:types&gt;<br />        &lt;xsd:schema&gt;<br />            &lt;xsd:import namespace="http://pro.ctlok.com/company"<br />                schemaLocation="company.xsd" /&gt;<br />        &lt;/xsd:schema&gt;<br />    &lt;/wsdl:types&gt;<br />    <br />    &lt;wsdl:message name="employeeLookupRequest"&gt;<br />        &lt;wsdl:part element="tns:EmployeeIdList" name="employeeIdList" /&gt;<br />    &lt;/wsdl:message&gt;<br />    <br />    &lt;wsdl:message name="employeeLookupResponse"&gt;<br />        &lt;wsdl:part element="tns:EmployeeInfoList" name="employeeInfoList" /&gt;<br />    &lt;/wsdl:message&gt;<br />    <br />    &lt;wsdl:portType name="employeeLookupService"&gt;<br />        &lt;wsdl:operation name="employeeLookup"&gt;<br />            &lt;wsdl:input message="tns:employeeLookupRequest" /&gt;<br />            &lt;wsdl:output message="tns:employeeLookupResponse" /&gt;<br />        &lt;/wsdl:operation&gt;<br />    &lt;/wsdl:portType&gt;<br />    <br />    &lt;wsdl:binding name="employeeLookupBinding" type="tns:employeeLookupService"&gt;<br />        &lt;soap:binding style="document"<br />            transport="http://schemas.xmlsoap.org/soap/http" /&gt;<br />        &lt;wsdl:operation name="employeeLookup"&gt;<br />            &lt;soap:operation<br />                soapAction="http://pro.ctlok.com/company/employeeLookup" /&gt;<br />            &lt;wsdl:input&gt;<br />                &lt;soap:body use="literal" /&gt;<br />            &lt;/wsdl:input&gt;<br />            &lt;wsdl:output&gt;<br />                &lt;soap:body use="literal" /&gt;<br />            &lt;/wsdl:output&gt;<br />        &lt;/wsdl:operation&gt;<br />    &lt;/wsdl:binding&gt;<br />    <br />    &lt;wsdl:service name="employeeLookupService"&gt;<br />        &lt;wsdl:port binding="tns:employeeLookupBinding" name="employeeLookupPort"&gt;<br />            &lt;soap:address location="http://localhost:9080/WebService" /&gt;<br />        &lt;/wsdl:port&gt;<br />    &lt;/wsdl:service&gt;<br />    <br />&lt;/wsdl:definitions&gt;<br /></pre><br />現在完成了 <b>Web Service</b> 的介面了，但要將 <b>Web Service</b> 的 <b>Object</b> 轉為 <b>Java Class</b> 才可以。幸好有工具可以替我們完成這項工作，不用一個一個手動建立。使用 <b>JAXB compiler</b> 幫我們將 <b>WSDL</b> 內用到的 <b>Object</b> 轉為 <b>Java Class</b>。在 <b>Windows</b> 打開 <b>CMD</b> 輸入以下指令:<br /><pre class="brush: bat">xjc -wsdl company.wsdl -p com.ctlok.pro.ws.model<br /></pre><br /><strong><em> 如果你不能執行 <b>xjc</b>，請查看 <b>System Path</b> 有沒有加入 <b>%JAVA_HOME%/bin</b> 。 </em></strong><br /><br /><ul><li><b>-wsdl</b> 是 <b>wsdl</b> 檔案存放的位置</li><li><b>-p</b> 是產生出來的 <b>Java class</b> 所在 <b>package</b></li></ul><br />想知更多指令可參考: <a href="http://download.oracle.com/docs/cd/E17802_01/webservices/webservices/docs/1.6/tutorial/doc/JAXBUsing2.html">JAXB Using</a><br /><br />執行指令後會看到有 6 個 .java 檔案，分別是:<br /><ol><li>EmployeeIdWrapper</li><li>EmployeeInfo</li><li>EmployeeInfoWrapper</li><li>EmployeeTitle</li><li>ObjectFactory</li><li>package-info</li></ol><br /><b>EmployeeIdWrapper:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import java.util.ArrayList;<br />import java.util.List;<br />import javax.xml.bind.annotation.XmlAccessType;<br />import javax.xml.bind.annotation.XmlAccessorType;<br />import javax.xml.bind.annotation.XmlType;<br /><br /><br />/<strong><br /> * &lt;p&gt;Java class for EmployeeIdWrapper complex type.<br /> * <br /> * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.<br /> * <br /> * &lt;pre&gt;<br /> * &amp;lt;complexType name="EmployeeIdWrapper"&gt;<br /> *   &amp;lt;complexContent&gt;<br /> *     &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;<br /> *       &amp;lt;sequence&gt;<br /> *         &amp;lt;element name="eid" type="{http://pro.ctlok.com/company}EmployeeId" maxOccurs="unbounded" minOccurs="0"/&gt;<br /> *       &amp;lt;/sequence&gt;<br /> *     &amp;lt;/restriction&gt;<br /> *   &amp;lt;/complexContent&gt;<br /> * &amp;lt;/complexType&gt;<br /> * &lt;/pre&gt;<br /> * <br /> * <br /> */<br />@XmlAccessorType(XmlAccessType.FIELD)<br />@XmlType(name = "EmployeeIdWrapper", propOrder = {<br />    "eid"<br />})<br />public class EmployeeIdWrapper {<br /><br />    protected List&lt;String&gt; eid;<br /><br />    /</strong><br />     * Gets the value of the eid property.<br />     * <br />     * &lt;p&gt;<br />     * This accessor method returns a reference to the live list,<br />     * not a snapshot. Therefore any modification you make to the<br />     * returned list will be present inside the JAXB object.<br />     * This is why there is not a &lt;CODE&gt;set&lt;/CODE&gt; method for the eid property.<br />     * <br />     * &lt;p&gt;<br />     * For example, to add a new item, do as follows:<br />     * &lt;pre&gt;<br />     *    getEid().add(newItem);<br />     * &lt;/pre&gt;<br />     * <br />     * <br />     * &lt;p&gt;<br />     * Objects of the following type(s) are allowed in the list<br />     * {@link String }<br />     * <br />     * <br />     <em>/<br />    public List&lt;String&gt; getEid() {<br />        if (eid == null) {<br />            eid = new ArrayList&lt;String&gt;();<br />        }<br />        return this.eid;<br />    }<br /><br />}<br /></pre><br /><b>EmployeeInfo:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import javax.xml.bind.annotation.XmlAccessType;<br />import javax.xml.bind.annotation.XmlAccessorType;<br />import javax.xml.bind.annotation.XmlSchemaType;<br />import javax.xml.bind.annotation.XmlType;<br /><br /><br />/**<br /> * &lt;p&gt;Java class for EmployeeInfo complex type.<br /> * <br /> * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.<br /> * <br /> * &lt;pre&gt;<br /> * &amp;lt;complexType name="EmployeeInfo"&gt;<br /> *   &amp;lt;complexContent&gt;<br /> *     &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;<br /> *       &amp;lt;sequence&gt;<br /> *         &amp;lt;element name="eid" type="{http://pro.ctlok.com/company}EmployeeId" minOccurs="0"/&gt;<br /> *         &amp;lt;element name="firstName" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;<br /> *         &amp;lt;element name="lastName" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;<br /> *         &amp;lt;element name="age" type="{http://www.w3.org/2001/XMLSchema}unsignedShort" minOccurs="0"/&gt;<br /> *         &amp;lt;element name="title" type="{http://pro.ctlok.com/company}EmployeeTitle" minOccurs="0"/&gt;<br /> *       &amp;lt;/sequence&gt;<br /> *     &amp;lt;/restriction&gt;<br /> *   &amp;lt;/complexContent&gt;<br /> * &amp;lt;/complexType&gt;<br /> * &lt;/pre&gt;<br /> * <br /> * <br /> </em>/<br />@XmlAccessorType(XmlAccessType.FIELD)<br />@XmlType(name = "EmployeeInfo", propOrder = {<br />    "eid",<br />    "firstName",<br />    "lastName",<br />    "age",<br />    "title"<br />})<br />public class EmployeeInfo {<br /><br />    protected String eid;<br />    protected String firstName;<br />    protected String lastName;<br />    @XmlSchemaType(name = "unsignedShort")<br />    protected Integer age;<br />    protected EmployeeTitle title;<br /><br />    /<strong><br />     * Gets the value of the eid property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link String }<br />     *     <br />     */<br />    public String getEid() {<br />        return eid;<br />    }<br /><br />    /</strong><br />     * Sets the value of the eid property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link String }<br />     *     <br />     <em>/<br />    public void setEid(String value) {<br />        this.eid = value;<br />    }<br /><br />    /**<br />     * Gets the value of the firstName property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link String }<br />     *     <br />     </em>/<br />    public String getFirstName() {<br />        return firstName;<br />    }<br /><br />    /<strong><br />     * Sets the value of the firstName property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link String }<br />     *     <br />     */<br />    public void setFirstName(String value) {<br />        this.firstName = value;<br />    }<br /><br />    /</strong><br />     * Gets the value of the lastName property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link String }<br />     *     <br />     <em>/<br />    public String getLastName() {<br />        return lastName;<br />    }<br /><br />    /**<br />     * Sets the value of the lastName property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link String }<br />     *     <br />     </em>/<br />    public void setLastName(String value) {<br />        this.lastName = value;<br />    }<br /><br />    /<strong><br />     * Gets the value of the age property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link Integer }<br />     *     <br />     */<br />    public Integer getAge() {<br />        return age;<br />    }<br /><br />    /</strong><br />     * Sets the value of the age property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link Integer }<br />     *     <br />     <em>/<br />    public void setAge(Integer value) {<br />        this.age = value;<br />    }<br /><br />    /**<br />     * Gets the value of the title property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link EmployeeTitle }<br />     *     <br />     </em>/<br />    public EmployeeTitle getTitle() {<br />        return title;<br />    }<br /><br />    /<strong><br />     * Sets the value of the title property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link EmployeeTitle }<br />     *     <br />     */<br />    public void setTitle(EmployeeTitle value) {<br />        this.title = value;<br />    }<br /><br />}<br /></pre><br /><b>EmployeeInfoWrapper:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import java.util.ArrayList;<br />import java.util.List;<br />import javax.xml.bind.annotation.XmlAccessType;<br />import javax.xml.bind.annotation.XmlAccessorType;<br />import javax.xml.bind.annotation.XmlType;<br /><br /><br />/</strong><br /> * &lt;p&gt;Java class for EmployeeInfoWrapper complex type.<br /> * <br /> * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.<br /> * <br /> * &lt;pre&gt;<br /> * &amp;lt;complexType name="EmployeeInfoWrapper"&gt;<br /> *   &amp;lt;complexContent&gt;<br /> *     &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;<br /> *       &amp;lt;sequence&gt;<br /> *         &amp;lt;element name="employeeInfo" type="{http://pro.ctlok.com/company}EmployeeInfo" maxOccurs="unbounded" minOccurs="0"/&gt;<br /> *       &amp;lt;/sequence&gt;<br /> *     &amp;lt;/restriction&gt;<br /> *   &amp;lt;/complexContent&gt;<br /> * &amp;lt;/complexType&gt;<br /> * &lt;/pre&gt;<br /> * <br /> * <br /> <em>/<br />@XmlAccessorType(XmlAccessType.FIELD)<br />@XmlType(name = "EmployeeInfoWrapper", propOrder = {<br />    "employeeInfo"<br />})<br />public class EmployeeInfoWrapper {<br /><br />    protected List&lt;EmployeeInfo&gt; employeeInfo;<br /><br />    /**<br />     * Gets the value of the employeeInfo property.<br />     * <br />     * &lt;p&gt;<br />     * This accessor method returns a reference to the live list,<br />     * not a snapshot. Therefore any modification you make to the<br />     * returned list will be present inside the JAXB object.<br />     * This is why there is not a &lt;CODE&gt;set&lt;/CODE&gt; method for the employeeInfo property.<br />     * <br />     * &lt;p&gt;<br />     * For example, to add a new item, do as follows:<br />     * &lt;pre&gt;<br />     *    getEmployeeInfo().add(newItem);<br />     * &lt;/pre&gt;<br />     * <br />     * <br />     * &lt;p&gt;<br />     * Objects of the following type(s) are allowed in the list<br />     * {@link EmployeeInfo }<br />     * <br />     * <br />     </em>/<br />    public List&lt;EmployeeInfo&gt; getEmployeeInfo() {<br />        if (employeeInfo == null) {<br />            employeeInfo = new ArrayList&lt;EmployeeInfo&gt;();<br />        }<br />        return this.employeeInfo;<br />    }<br /><br />}<br /></pre><br /><b>EmployeeTitle:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import javax.xml.bind.annotation.XmlEnum;<br />import javax.xml.bind.annotation.XmlEnumValue;<br />import javax.xml.bind.annotation.XmlType;<br /><br /><br />/<strong><br /> * &lt;p&gt;Java class for EmployeeTitle.<br /> * <br /> * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.<br /> * &lt;p&gt;<br /> * &lt;pre&gt;<br /> * &amp;lt;simpleType name="EmployeeTitle"&gt;<br /> *   &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;<br /> *     &amp;lt;enumeration value="CEO"/&gt;<br /> *     &amp;lt;enumeration value="Manger"/&gt;<br /> *     &amp;lt;enumeration value="Supervisor"/&gt;<br /> *     &amp;lt;enumeration value="Clerk"/&gt;<br /> *   &amp;lt;/restriction&gt;<br /> * &amp;lt;/simpleType&gt;<br /> * &lt;/pre&gt;<br /> * <br /> */<br />@XmlType(name = "EmployeeTitle")<br />@XmlEnum<br />public enum EmployeeTitle {<br /><br />    CEO("CEO"),<br />    @XmlEnumValue("Manger")<br />    MANGER("Manger"),<br />    @XmlEnumValue("Supervisor")<br />    SUPERVISOR("Supervisor"),<br />    @XmlEnumValue("Clerk")<br />    CLERK("Clerk");<br />    private final String value;<br /><br />    EmployeeTitle(String v) {<br />        value = v;<br />    }<br /><br />    public String value() {<br />        return value;<br />    }<br /><br />    public static EmployeeTitle fromValue(String v) {<br />        for (EmployeeTitle c: EmployeeTitle.values()) {<br />            if (c.value.equals(v)) {<br />                return c;<br />            }<br />        }<br />        throw new IllegalArgumentException(v);<br />    }<br /><br />}<br /></pre><br /><b>ObjectFactory:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import javax.xml.bind.JAXBElement;<br />import javax.xml.bind.annotation.XmlElementDecl;<br />import javax.xml.bind.annotation.XmlRegistry;<br />import javax.xml.namespace.QName;<br /><br /><br />/</strong><br /> * This object contains factory methods for each <br /> * Java content interface and Java element interface <br /> * generated in the com.ctlok.pro.ws.model package. <br /> * &lt;p&gt;An ObjectFactory allows you to programatically <br /> * construct new instances of the Java representation <br /> * for XML content. The Java representation of XML <br /> * content can consist of schema derived interfaces <br /> * and classes representing the binding of schema <br /> * type definitions, element declarations and model <br /> * groups.  Factory methods for each of these are <br /> * provided in this class.<br /> * <br /> <em>/<br />@XmlRegistry<br />public class ObjectFactory {<br /><br />    private final static QName <em>EmployeeIdList_QNAME = new QName("http://pro.ctlok.com/company", "EmployeeIdList");<br />    private final static QName </em>EmployeeInfoList_QNAME = new QName("http://pro.ctlok.com/company", "EmployeeInfoList");<br /><br />    /**<br />     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.ctlok.pro.ws.model<br />     * <br />     </em>/<br />    public ObjectFactory() {<br />    }<br /><br />    /<strong><br />     * Create an instance of {@link EmployeeIdWrapper }<br />     * <br />     */<br />    public EmployeeIdWrapper createEmployeeIdWrapper() {<br />        return new EmployeeIdWrapper();<br />    }<br /><br />    /</strong><br />     * Create an instance of {@link EmployeeInfoWrapper }<br />     * <br />     <em>/<br />    public EmployeeInfoWrapper createEmployeeInfoWrapper() {<br />        return new EmployeeInfoWrapper();<br />    }<br /><br />    /**<br />     * Create an instance of {@link EmployeeInfo }<br />     * <br />     </em>/<br />    public EmployeeInfo createEmployeeInfo() {<br />        return new EmployeeInfo();<br />    }<br /><br />    /<strong><br />     * Create an instance of {@link JAXBElement }{@code &lt;}{@link EmployeeIdWrapper }{@code &gt;}}<br />     * <br />     */<br />    @XmlElementDecl(namespace = "http://pro.ctlok.com/company", name = "EmployeeIdList")<br />    public JAXBElement&lt;EmployeeIdWrapper&gt; createEmployeeIdList(EmployeeIdWrapper value) {<br />        return new JAXBElement&lt;EmployeeIdWrapper&gt;(_EmployeeIdList_QNAME, EmployeeIdWrapper.class, null, value);<br />    }<br /><br />    /</strong><br />     * Create an instance of {@link JAXBElement }{@code &lt;}{@link EmployeeInfoWrapper }{@code &gt;}}<br />     * <br />     */<br />    @XmlElementDecl(namespace = "http://pro.ctlok.com/company", name = "EmployeeInfoList")<br />    public JAXBElement&lt;EmployeeInfoWrapper&gt; createEmployeeInfoList(EmployeeInfoWrapper value) {<br />        return new JAXBElement&lt;EmployeeInfoWrapper&gt;(_EmployeeInfoList_QNAME, EmployeeInfoWrapper.class, null, value);<br />    }<br /><br />}<br /></pre><br /><b>package-info:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br />@javax.xml.bind.annotation.XmlSchema(namespace = "http://pro.ctlok.com/company", elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED)<br />package com.ctlok.pro.ws.model;<br /></pre><br />將這些 <b>Java Class</b> 複製到 <b>WAR project</b> 內。<br /><br />再建立一個 <b>Java Class - EmployeeLookupService:</b><br /><pre class="brush: java">package com.ctlok.pro.ws;<br /><br />import java.util.HashMap;<br />import java.util.Map;<br /><br />import javax.jws.WebMethod;<br />import javax.jws.WebParam;<br />import javax.jws.WebResult;<br />import javax.jws.WebService;<br />import javax.jws.soap.SOAPBinding;<br />import javax.xml.bind.annotation.XmlSeeAlso;<br /><br />import com.ctlok.pro.ws.model.EmployeeIdWrapper;<br />import com.ctlok.pro.ws.model.EmployeeInfo;<br />import com.ctlok.pro.ws.model.EmployeeInfoWrapper;<br />import com.ctlok.pro.ws.model.EmployeeTitle;<br />import com.ctlok.pro.ws.model.ObjectFactory;<br /><br />@WebService(<br />        name = "employeeLookupService", <br />        serviceName = "employeeLookupService", <br />        portName = "employeeLookupPort", <br />        targetNamespace= "http://pro.ctlok.com/company",<br />        wsdlLocation = "company.wsdl")<br />@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)<br />@XmlSeeAlso({ObjectFactory.class})<br />public class EmployeeLookupService {<br />    <br />    private Map&lt;String, EmployeeInfo&gt; infoMap;<br />    <br />    public EmployeeLookupService(){<br />        infoMap = new HashMap&lt;String, EmployeeInfo&gt;();<br />        <br />        EmployeeInfo info1 = new EmployeeInfo();<br />        info1.setEid("E1000000");<br />        info1.setFirstName("Lawrence");<br />        info1.setLastName("Cheung");<br />        info1.setAge(24);<br />        info1.setTitle(EmployeeTitle.CEO);<br />        <br />        EmployeeInfo info2 = new EmployeeInfo();<br />        info2.setEid("E1524125");<br />        info2.setFirstName("Tom");<br />        info2.setLastName("Wong");<br />        info2.setAge(22);<br />        info2.setTitle(EmployeeTitle.CLERK);<br />        <br />        EmployeeInfo info3 = new EmployeeInfo();<br />        info3.setEid("E7452145");<br />        info3.setFirstName("John");<br />        info3.setLastName("Lee");<br />        info3.setAge(29);<br />        info3.setTitle(EmployeeTitle.MANGER);<br />        <br />        EmployeeInfo info4 = new EmployeeInfo();<br />        info4.setEid("E6523547");<br />        info4.setFirstName("Katty");<br />        info4.setLastName("Choi");<br />        info4.setAge(24);<br />        info4.setTitle(EmployeeTitle.SUPERVISOR);<br />        <br />        <br />        infoMap.put(info1.getEid(), info1);<br />        infoMap.put(info2.getEid(), info2);<br />        infoMap.put(info3.getEid(), info3);<br />        infoMap.put(info4.getEid(), info4);<br />    }<br /><br />    @WebMethod(operationName="employeeLookup")<br />    @WebResult(name = "EmployeeInfoList", partName = "employeeInfoList")<br />    public EmployeeInfoWrapper employeeLookup(<br />            @WebParam(name = "EmployeeIdList", partName = "employeeIdList") <br />            EmployeeIdWrapper employeeIdWrapper){<br />        <br />        EmployeeInfoWrapper employeeInfoWrapper = new EmployeeInfoWrapper();<br />        <br />        for (String eid: employeeIdWrapper.getEid()){<br />            EmployeeInfo info = infoMap.get(eid);<br />            <br />            if (info == null)<br />                info = new EmployeeInfo();<br />            <br />            employeeInfoWrapper.getEmployeeInfo().add(info);<br />        }<br />        <br />        return employeeInfoWrapper;<br />        <br />    }<br /><br />}<br /></pre><br />完成了 <b>Web Service Provider</b>。<br /><br /><pre class="brush: java">@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)<br /></pre><br />以上這句注解很重要，預設是 <b>WRAPPED</b>，即是 <b>JAX-WS</b> 會替你自動包裝好 <b>List Object</b>，但我們在 <b>XML Schema</b> 已經設定了 <b>Wrapper</b>，所以不用設定為 <b>WRAPPED</b>。<br /><br />-------------- 分隔線 --------------<br /><br /><pre class="brush: java">@XmlSeeAlso({ObjectFactory.class})<br /></pre><br />以上的注解則是確保 <b>JAXB</b> 正常運作，由 <b>XML</b> 轉為 <b>Object</b> 或 <b>Object</b> 轉為 <b>XML</b>。<br /><br />-------------- 分隔線 --------------<br /><br /><pre class="brush: java">@WebResult(name = "EmployeeInfoList", partName = "employeeInfoList")<br /></pre><br />以上的注解對應 <b>WSDL</b> 內的:<br /><br /><pre class="brush: xml">&lt;wsdl:message name="employeeLookupRequest"&gt;<br />    &lt;wsdl:part element="tns:EmployeeIdList" name="employeeIdList" /&gt;<br />&lt;/wsdl:message&gt;<br /></pre><br />-------------- 分隔線 --------------<br /><br /><pre class="brush: java">@WebResult(name = "EmployeeInfoList", partName = "employeeInfoList")<br /></pre><br />以上的注解則對應 <b>WSDL</b> 內的:<br /><br /><pre class="brush: xml">&lt;wsdl:message name="employeeLookupResponse"&gt;<br />    &lt;wsdl:part element="tns:EmployeeInfoList" name="employeeInfoList" /&gt;<br />&lt;/wsdl:message&gt;<br /></pre><br /><br />現在將 <b>WAR project</b> 放上 <b>Application Server</b> 並運行 <b>http://localhost/employeeLookupService?wsdl</b>。如果發現找不到 <b>wsdl</b> 檔案即是 <b>wsdl</b> 放的位置不正確。<br /><br />成功找到後可以使用 soapUI 去測試一下，傳送以下 <b>SOAP XML</b> 到 <b>Server</b>:<br /><pre class="brush: xml">&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:com="http://pro.ctlok.com/company"&gt;<br />   &lt;soapenv:Header/&gt;<br />   &lt;soapenv:Body&gt;<br />      &lt;com:EmployeeIdList&gt;<br />         &lt;!--Zero or more repetitions:--&gt;<br />         &lt;com:eid&gt;E1000000&lt;/com:eid&gt;<br />         &lt;com:eid&gt;E1524125&lt;/com:eid&gt;<br />      &lt;/com:EmployeeIdList&gt;<br />   &lt;/soapenv:Body&gt;<br />&lt;/soapenv:Envelope&gt;<br /></pre><br /><b>Server</b> 回傳以下 <b>XML</b> 即代表成功設定:<br /><pre class="brush: xml">&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;<br />   &lt;soapenv:Body&gt;<br />      &lt;EmployeeInfoList xmlns="http://pro.ctlok.com/company"&gt;<br />         &lt;employeeInfo&gt;<br />            &lt;eid&gt;E1000000&lt;/eid&gt;<br />            &lt;firstName&gt;Lawrence&lt;/firstName&gt;<br />            &lt;lastName&gt;Cheung&lt;/lastName&gt;<br />            &lt;age&gt;24&lt;/age&gt;<br />            &lt;title&gt;CEO&lt;/title&gt;<br />         &lt;/employeeInfo&gt;<br />         &lt;employeeInfo&gt;<br />            &lt;eid&gt;E1524125&lt;/eid&gt;<br />            &lt;firstName&gt;Tom&lt;/firstName&gt;<br />            &lt;lastName&gt;Wong&lt;/lastName&gt;<br />            &lt;age&gt;22&lt;/age&gt;<br />            &lt;title&gt;Clerk&lt;/title&gt;<br />         &lt;/employeeInfo&gt;<br />      &lt;/EmployeeInfoList&gt;<br />   &lt;/soapenv:Body&gt;<br />&lt;/soapenv:Envelope&gt;<br /></pre><br />有時間再講解一下 <b>Java Web Service Client</b> 如何設定。<br /><br />相閞書籍: <a href="http://www.amazon.com/Java-Web-Services-Up-Running/dp/059652112X?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Java Web Services: Up and Running" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=059652112X&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=059652112X" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Java-Soa-Cookbook-Eben-Hewitt/dp/0596520727?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Java Soa Cookbook" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0596520727&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596520727" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Java-Web-Services-Running-ebook/dp/B0026OR35I?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Java Web Services: Up and Running" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=B0026OR35I&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=B0026OR35I" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-8108643057802063028?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
