<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: LINQ | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/linq/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2015-12-17T10:59:14+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LINQ 配合 Regular Expression]]></title>
    <link href="http://pro.ctlok.com/2010/01/linq-regular-expression.html"/>
    <updated>2010-01-18T15:03:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/01/linq-regular-expression</id>
    <content type="html"><![CDATA[<p>LINQ 是 Microsoft .Net 的產物<br />擁有靈活的搜尋功能<br />如果將 LINQ&nbsp;配合 Regular Expression<br />更加方便和更有彈性<br /><br />以下的例子:<br /><br /><pre class="brush: csharp">using System;<br />using System.Collections.Generic;<br />using System.Linq;<br />using System.Text;<br />using System.Text.RegularExpressions;<br /><br />namespace LINQTest<br />{<br />    class Program<br />    {<br />        static void Main(string[] args)<br />        {<br />            string[] name = <br />            { "Ann", "Addison", "Peter", "John", <br />              "Lawrence", "Mary", "Barclay", "Buckley", <br />              "Dawn", "Leslie", "Queenie", "Palma",<br />              "Fatima", "Unaiza", "Karida", "Zarifa"<br />            };<br />            Regex pattern = new Regex("<sup>[laz]\w*[ea]$",</sup> RegexOptions.IgnoreCase);<br />            IEnumerable&lt;string&gt; nameList = name.Where(n =&gt; pattern.IsMatch(n));<br />            foreach (string filteredName in nameList)<br />                Console.WriteLine(filteredName);<br />            Console.ReadLine();<br />        }<br />    }<br />}<br /></pre><br />例如我想將 l, a, z 開頭和 e, a 結尾的名稱找出來<br />先設定好 Regular Expression Pattern<br /><br /><pre class="brush: csharp">new Regex("<sup>[laz]\w*[ea]$",</sup> RegexOptions.IgnoreCase);<br /></pre><br />RegexOptions.IgnoreCase 作用是不理英文字母是大寫還是小寫<br /><br /><pre class="brush: csharp">IEnumerable&lt;string&gt; nameList = name.Where(n =&gt; pattern.IsMatch(n));<br /></pre><br />如果條件附合便將 name 放到 nameList 內<br /><br />例子的執行結果是<br />Lawrence<br />Leslie<br />Zarifa<br /><br />相關書籍: <a href="http://www.amazon.com/Pro-LINQ-Language-Integrated-Windows-Net/dp/1590597893?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Pro LINQ: Language Integrated Query in C# 2008 (Windows.Net)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1590597893&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1590597893" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/LINQ-Unleashed-C-Paul-Kimmel/dp/0672329832?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="LINQ Unleashed: for C#" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0672329832&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0672329832" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Programming-Microsoft%C2%AE-PRO-Developer-Paolo-Pialorsi/dp/0735624003?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Programming Microsoft® LINQ (PRO-Developer)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0735624003&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0735624003" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-4669875155411328952?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adjacency Matrix Network and List of Link Network]]></title>
    <link href="http://pro.ctlok.com/2010/01/adjacency-matrix-network-and-list-of.html"/>
    <updated>2010-01-09T19:09:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/01/adjacency-matrix-network-and-list-of</id>
    <content type="html"><![CDATA[<p><span style="font-size: small;"><span class="Apple-style-span" style="color: red;"><b>這只是大學的習作</b></span></span><br /><span style="font-size: small;"><br /></span><br /><span style="font-size: small;">在大學習作中需要制作一個&nbsp;Adjacency Matrix Network 和 List of Link Network 的 Class</span><br /><span style="font-size: small;">大致功能:&nbsp;</span><br /><ul><li>查詢有多少 Path 連進選取的 Node</li><li>查詢有多少 Path 由選取的 Node 出發</li><li>查詢一個 Node 能否到達另一個&nbsp;Node</li><li>Path 的總和</li><li>2 種 Network 互相轉換</li></ul><br /><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">做此習作感受到了 Microsoft .NET 內的 LINQ 的強大<br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">只需短短一行的程式碼便可以做出了複雜的查詢<br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">實在是非常方便<br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><br /><span style="font-size: small;">原始碼如下:</span><br /><span style="font-size: small;"><br /></span><br /><span style="font-size: small;">Network Class</span><br /><pre class="brush: csharp">using System;<br />using System.Collections.Generic;<br />using System.Text;<br /><br />namespace NetworkLibrary<br />{<br />    public abstract class Network<br />    {<br />        protected int <em>Size;<br /><br />        //Size is read only<br />        public int Size<br />        {<br />            get { return </em>Size; }<br />        }<br /><br />        public abstract int NumberOfLinks();<br /><br />        public abstract int OutDegree(int nodeNumber);<br /><br />        public abstract int InDegree(int nodeNumber);<br /><br />        public abstract List&lt;int&gt; ReachableFrom(int nodeNumber);<br />    }<br />}<br /></pre><span style="font-size: small;">Adjacency Matrix Network Class</span><br /><pre class="brush: csharp">using System;<br />using System.Collections.Generic;<br />using System.Linq;<br />using System.Text;<br /><br />namespace NetworkLibrary<br />{<br />    public class AM_Network : Network<br />    {<br />        private int[][] <em>NodeMatrix;<br /><br />        public int[][] NodeMatrix<br />        {<br />            get { return </em>NodeMatrix; }<br />        }<br /><br />        public AM_Network(int numberOfNode, int[,] nodeMap)<br />        {<br />            /<strong><br />             * Error checking<br />             * No node exception<br />             * Null argument exception<br />             * Martrix not correct exception<br />             */<br /><br />            if (numberOfNode &lt; 1)<br />                throw new NumberOfNodeLessThenOneException("Number Of Node Less Then One");<br />            else if (nodeMap == null)<br />                throw new ArgumentNullException("Node Map is null");<br />            else if (numberOfNode * numberOfNode != nodeMap.Length)<br />                throw new NumberOfNodeNotEqualMatrixHeightException("Number of Node or Matrix Height Not Correct");<br />            else if (!nodeMap.IsFixedSize)<br />                throw new MatrixNotCorrectException("Matrix Width Not Correct");<br /><br />            //Store to local variable<br />            base.<em>Size = numberOfNode;<br /><br />            //Convert 2D array to jagged array<br />            </em>NodeMatrix = new int[numberOfNode][];<br />            for (int i = 0; i &lt; numberOfNode; i++)<br />            { <br />                <em>NodeMatrix[i] = new int[numberOfNode];<br />                for (int ii = 0; ii &lt; numberOfNode; ii++)<br />                    </em>NodeMatrix[i][ii] = nodeMap[i, ii];<br />            }<br /><br />        }<br /><br />        public LL_Network To_LL()<br />        {<br />            /</strong><br />             * Create a list store a Link information<br />             * Search matrix information<br />             * if matrix value greater then zero<br />             * should be create a array to store node data<br />             <em>/<br /><br />            List&lt;int[]&gt; linkList = new List&lt;int[]&gt;();<br />            for (int i = 0; i &lt; <em>NodeMatrix.Length; i++)<br />            {<br />                for (int ii = 0; ii &lt; </em>NodeMatrix[i].Length; ii++)<br />                {<br />                    if (<em>NodeMatrix[i][ii] &gt; 0)<br />                        linkList.Add(new int[] { i, ii, </em>NodeMatrix[i][ii] });<br />                }<br />            }<br />            return new LL_Network(base._Size, linkList.ToArray());<br />        }<br /><br />        public override string ToString()<br />        {<br />            /**<br />             * retrun network type<br />             * network size and total link<br />             </em>/<br /><br />            string info = "Network Type: Adjacency Matrix\n";<br />            info += "Network Size: " + base.<em>Size + "\n";<br />            info += "Number Of Link: " + NumberOfLinks() + "\n";<br />            return info;<br />        }<br /><br />        public override int NumberOfLinks()<br />        {<br />            //Return network total link<br />            return </em>NodeMatrix.Sum(row =&gt; row.Count(column =&gt; column &gt; 0));<br />        }<br /><br />        public override int OutDegree(int nodeNumber)<br />        {<br />            /<strong><br />             * Error checking<br />             * Negative node number exception<br />             * Node not found exception<br />             * return number of link in this node point to other node<br />             */<br />            if (nodeNumber &lt; 0)<br />                throw new NegativeNodeNumberException("Node Number Cannot be a Negative Number");<br />            else if (nodeNumber &gt; base.<em>Size - 1)<br />                throw new NonExistentNodeException("Node not found");<br />            return </em>NodeMatrix[nodeNumber].Count(column =&gt; column &gt; 0);<br />        }<br /><br />        public override int InDegree(int nodeNumber)<br />        {<br />            /</strong><br />             * Error checking<br />             * Negative node number exception<br />             * Node not found exception<br />             * return number of link in this node is other node point to this node<br />             <em>/<br />            if (nodeNumber &lt; 0)<br />                throw new NegativeNodeNumberException("Node Number Cannot be a Negative Number");<br />            else if (nodeNumber &gt; base.<em>Size - 1)<br />                throw new NonExistentNodeException("Node not found");<br />            return </em>NodeMatrix.Count(row =&gt; row[nodeNumber] &gt; 0);<br />        }<br /><br />        public override List&lt;int&gt; ReachableFrom(int nodeNumber)<br />        {<br />            /**<br />             * Error checking<br />             * Negative node number exception<br />             * Node not found exception<br />             </em>/<br />            if (nodeNumber &lt; 0)<br />                throw new NegativeNodeNumberException("Node Number Cannot be a Negative Number");<br />            else if (nodeNumber &gt; base.<em>Size - 1)<br />                throw new NonExistentNodeException("Node not found");<br /><br />            /<strong><br />             * Create 2 list to store node<br />             * reachableList is a final result list<br />             * Store node into nonCheckNodeList when this node was checked.<br />             * Prevent repeat to check<br />             */<br />            List&lt;int&gt; reachableList = new List&lt;int&gt;();<br />            List&lt;int&gt; nonCheckNodeList = new List&lt;int&gt;();<br />            bool update;<br /><br />            //Source node must be add to reachableList<br />            reachableList.Add(nodeNumber);<br /><br />            do<br />            {<br />                /</strong><br />                 * Initial the update to false<br />                 * because we will check the node is it repeat.<br />                 * <br />                 * Create a checkNodeList<br />                 * checkNodeList only store a will check node<br />                 * It filter the nonCheckNodeList node<br />                 * <br />                 * Loop the checkNodeList<br />                 <em>/<br />                update = false;<br />                List&lt;int&gt; checkNodeList = reachableList.Except(nonCheckNodeList).ToList();<br />                for (int i = 0; i &lt; checkNodeList.Count; i++)<br />                {<br />                    /**<br />                     * Add current node to nonCheckNodeList<br />                     * because current node was checked.<br />                     * <br />                     * Define the List and check this node can reach to which node<br />                     </em>/<br />                    nonCheckNodeList.Add(reachableList[i]);<br />                    IEnumerable&lt;int&gt; result = </em>NodeMatrix[checkNodeList[i]]<br />                        .Select((column, index) =&gt; new { column, index })<br />                        .Where(obj =&gt; obj.column &gt; 0)<br />                        .Select(obj =&gt; obj.index);<br /><br />                    foreach (int temp in result)<br />                    {<br />                        /<strong><br />                         * Check node is it repeat<br />                         * if not repeat is should be store in reachableList<br />                         * and update set to true<br />                         * because this node was store into the reachableList<br />                         */<br />                        if (!reachableList.Exists(node =&gt; node == temp))<br />                        {<br />                            update = true;<br />                            reachableList.Add(temp);<br />                        }<br />                    }<br />                }<br />            } while (update);<br /><br />            /</strong><br />             * Sorting the list <br />             * and return the result<br />             <em>/<br />            reachableList.Sort();<br />            return reachableList;<br />        }<br />    }<br />}<br /></pre>List of Link Network Class<br /><pre class="brush:csharp">using System.Collections.Generic;<br />using System.Linq;<br />using System.Text;<br /><br />namespace NetworkLibrary<br />{<br />    public class LL_Network : Network<br />    {<br />        private NetworkLibrary.Link[] <em>NodeLinks;<br /><br />        public NetworkLibrary.Link[] NodeLinks<br />        {<br />            get { return </em>NodeLinks; }<br />        }<br /><br />        public LL_Network(int numberOfNode, int[][] nodeMap)<br />        {<br />            /**<br />             * Error checking<br />             * No node exception<br />             * Null argument exception<br />             * Too many exception<br />             </em>/<br /><br />            if (numberOfNode &lt; 1)<br />                throw new NumberOfNodeLessThenOneException("Number Of Node Less Then One");<br />            else if (nodeMap == null)<br />                throw new ArgumentNullException("Node Map is null");<br />            else if (numberOfNode * numberOfNode &lt; nodeMap.Length)<br />                throw new TooManyLinkException("Too Many Link");<br /><br />            //Store to local variable<br />            base.<em>Size = numberOfNode;<br />            </em>NodeLinks = new Link[nodeMap.Length];<br />            <br />            //Create Link from array<br />            for (int i = 0; i &lt; nodeMap.Length; i++)<br />            {<br />                if (nodeMap[i].Length != 3)<br />                    throw new LinkNumberOfArgumentException("Link Must have 3 Argument");<br />                <em>NodeLinks[i] = new Link(nodeMap[i][0], nodeMap[i][1], nodeMap[i][2]);<br />            }<br />        }<br /><br />        public AM_Network To_AM()<br />        {<br />            /<em>*<br />             * Create a 2D array<br />             * Assign a link value into array<br />             </em>/<br /><br />            int[,] amStructure = new int[base.</em>Size, base.<em>Size];<br />            for (int i = 0; i &lt; base.</em>Size; i++)<br />            {<br />                for (int ii = 0; ii &lt; base.<em>Size; ii++)<br />                {<br />                    IEnumerable&lt;Link&gt; result = </em>NodeLinks.Where(n =&gt; n.Node == i &amp;&amp; n.DestinationNode == ii);<br />                    amStructure[i,ii] = (result.Count() &gt; 0) ? result.First().Weight : 0;<br />                }<br />            }<br />            return new AM_Network(base.<em>Size, amStructure);<br />        }<br /><br />        public override string ToString()<br />        {<br />            /<em>*<br />             * retrun network type<br />             * network size and total link<br />             </em>/<br />            string info = "Network Type: List-of-Links\n";<br />            info += "Network Size: " + base.</em>Size + "\n";<br />            info += "Number Of Link: " + NumberOfLinks() + "\n";<br />            return info;<br />        }<br /><br />        public override int NumberOfLinks()<br />        {<br />            //Return network total link<br />            return <em>NodeLinks.Length;<br />        }<br /><br />        public override int OutDegree(int nodeNumber)<br />        {<br />            /<em>*<br />             * Error checking<br />             * Negative node number exception<br />             * Node not found exception<br />             * return number of link in this node point to other node<br />             </em>/<br />            if (nodeNumber &lt; 0)<br />                throw new NegativeNodeNumberException("Node Number Cannot be a Negative Number");<br />            else if (!</em>NodeLinks.ToList().Exists(link =&gt; link.Node == nodeNumber))<br />                throw new NonExistentNodeException("Node not found");<br />            return <em>NodeLinks.Count(link =&gt; link.Node == nodeNumber);<br />        }<br /><br />        public override int InDegree(int nodeNumber)<br />        {<br />            /<em>*<br />             * Error checking<br />             * Negative node number exception<br />             * Node not found exception<br />             * return number of link in this node is other node point to this node<br />             </em>/<br />            if (nodeNumber &lt; 0)<br />                throw new NegativeNodeNumberException("Node Number Cannot be a Negative Number");<br />            else if (!</em>NodeLinks.ToList().Exists(link =&gt; link.Node == nodeNumber))<br />                throw new NonExistentNodeException("Node not found");<br />            return <em>NodeLinks.Count(link =&gt; link.DestinationNode == nodeNumber);<br />        }<br /><br />        public override List&lt;int&gt; ReachableFrom(int nodeNumber)<br />        {<br />            /<em>*<br />             * Error checking<br />             * Negative node number exception<br />             * Node not found exception<br />             </em>/<br /><br />            if (nodeNumber &lt; 0)<br />                throw new NegativeNodeNumberException("Node Number Cannot be a Negative Number");<br />            else if (!</em>NodeLinks.ToList().Exists(link =&gt; link.Node == nodeNumber))<br />                throw new NonExistentNodeException("Node not found");<br /><br />            /<strong><br />             * Create 2 list to store node<br />             * reachableList is a final result list<br />             * Store node into nonCheckNodeList when this node was checked.<br />             * Prevent repeat to check<br />             */<br /><br />            List&lt;int&gt; reachableList = new List&lt;int&gt;();<br />            List&lt;int&gt; nonCheckNodeList = new List&lt;int&gt;();<br />            bool update;<br /><br />            //Source node must be add to reachableList<br />            reachableList.Add(nodeNumber);<br /><br />            do<br />            {<br />                /</strong><br />                 * Initial the update to false<br />                 * because we will check the node is it repeat.<br />                 * <br />                 * Create a checkNodeList<br />                 * checkNodeList only store a will check node<br />                 * It filter the nonCheckNodeList node<br />                 * <br />                 * Loop the checkNodeList<br />                 <em>/<br /><br />                update = false;<br />                List&lt;int&gt; checkNodeList = reachableList.Except(nonCheckNodeList).ToList();<br />                for (int i = 0; i &lt; checkNodeList.Count; i++)<br />                {<br />                    /**<br />                     * Add current node to nonCheckNodeList<br />                     * because current node was checked.<br />                     * <br />                     * Define the List and check this node can reach to which node<br />                     </em>/<br />                    nonCheckNodeList.Add(reachableList[i]);<br />                    IEnumerable&lt;Link&gt; result = <em>NodeLinks.Where(link =&gt; link.Node == checkNodeList[i]);<br />                    foreach (Link temp in result)<br />                    {<br />                        /<strong><br />                         * Check node is it repeat<br />                         * if not repeat is should be store in reachableList<br />                         * and update set to true<br />                         * because this node was store into the reachableList<br />                         */<br />                        if (!reachableList.Exists(node =&gt; node == temp.DestinationNode))<br />                        {<br />                            update = true;<br />                            reachableList.Add(temp.DestinationNode);<br />                        }<br />                    }<br />                }<br />            } while (update);<br /><br />            /</strong><br />             * Sorting the list <br />             * and return the result<br />             */<br />            reachableList.Sort();<br />            return reachableList;<br />        }<br />    }<br />}<br /></pre>Link Class<br /><pre class="brush: csharp">using System;<br />using System.Collections.Generic;<br />using System.Text;<br /><br />namespace NetworkLibrary<br />{<br />    public struct Link<br />    {<br />        /**<br />         * </em>Node store a current Node<br />         * <em>DestinationNode store a next Node<br />         * </em>Weight store a link weight<br />         */<br />        private int <em>Node;<br />        private int </em>DestinationNode;<br />        private int <em>Weight;<br />        <br />        public int Node<br />        {<br />            get { return </em>Node; }<br />            set { <em>Node = value; }<br />        }<br />        <br /><br />        public int DestinationNode<br />        {<br />            get { return </em>DestinationNode; }<br />            set { <em>DestinationNode = value; }<br />        }<br />        <br /><br />        public int Weight<br />        {<br />            get { return </em>Weight; }<br />            set { <em>Weight = value; }<br />        }<br /><br />        //Constructor<br />        public Link(int node, int destinationNode, int weight)<br />        {<br />            </em>Node = node;<br />            <em>DestinationNode = destinationNode;<br />            </em>Weight = weight;<br />        }<br />    }<br />}<br /></pre><br /><br /><span style="font-size: small;">相關書籍:&nbsp;<a href="http://www.amazon.com/Head-First-C-Andrew-Stellman/dp/0596514824?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Head First C#" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0596514824&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596514824" style="border: none !important; margin: 0px !important;" width="1" /><a href="http://www.amazon.com/Microsoft-Visual-C-2008-Step/dp/0735624305?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Microsoft Visual C# 2008 Step by Step" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0735624305&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0735624305" style="border: none !important; margin: 0px !important;" width="1" /><a href="http://www.amazon.com/Illustrated-2008-Windows-Net-Daniel-Solis/dp/1590599543?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Illustrated C# 2008 (Windows.Net)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1590599543&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1590599543" style="border: none !important; margin: 0px !important;" width="1" /></span><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5892868758636521479?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
