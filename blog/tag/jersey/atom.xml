<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jersey | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/jersey/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-04-03T10:20:27+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Guice + Jersey 打造 RESTful 應用程式]]></title>
    <link href="http://pro.ctlok.com/2011/09/guice-jersey-restful-application.html"/>
    <updated>2011-09-08T14:46:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/09/guice-jersey-restful-application</id>
    <content type="html"><![CDATA[<p>以前我喜歡使用 <b>Spring + Spring Web MVC</b> 來打造 <b>RESTful</b> 應用程式，但 <b>Spring</b> 的起動有點慢，如果放上 <b>Google App Engine</b> 上經常令用戶等待很久才載入到頁面。<br /><br />今次選用了 <b>Guice + Jersey</b> 的組合。<b>Guice</b> 是一個輕量級的容器，設定上比起 <b>Spring</b> 更簡單，起動或注入速度亦比 <b>Spring</b> 快。而 <b>Jersey</b> 則是一個為 <b>RESTful web service</b> 而設的一個 <b>Framework</b>。<br /><br /><b>Gucie</b> 官方網址: <a href="http://code.google.com/p/google-guice/">http://code.google.com/p/google-guice/</a><br /><b>Jersey</b> 官方網址: <a href="http://jersey.java.net/">http://jersey.java.net/</a><br /><br />因為手上的電腦沒有安裝 <b>Application Server</b>，只好拿 <b>GAE</b> 的 <b>Development Server</b> 來測試。<br /><br />首先下載 <b>Guice</b> : <a href="http://code.google.com/p/google-guice/downloads/detail?name=guice-3.0.zip&can=2&q=">http://code.google.com/p/google-guice/downloads/detail?name=guice-3.0.zip&amp;can=2&amp;q=</a> (現時為止最新版本為 3.0)<br /><br />打開後將 <b>aopalliance.jar, guice-3.0.jar, guice-servlet-3.0.jar</b> 和 <b>javax.inject.jar</b> 加到 <b>WEB-INF/lib</b> 中並加到 <b>Class path</b>。<br /><br />然後下載 <b>Jersey</b> 所需的 <b>Jar</b> (現時為止最新版本為 1.9):<br /><ol><li><a href="https://maven.java.net/service/local/artifact/maven/redirect?r=releases&g=com.sun.jersey&a=jersey-server&v=1.9&e=jar">jersey-server.jar</a></li><li><a href="https://maven.java.net/service/local/artifact/maven/redirect?r=releases&g=com.sun.jersey&a=jersey-core&v=1.9&e=jar">jersey-core.jar</a></li><li><a href="http://repo1.maven.org/maven2/asm/asm/3.1/asm-3.1.jar">asm.jar</a></li><li><a href="http://download.java.net/maven/2/com/sun/jersey/contribs/jersey-guice/1.9-SNAPSHOT/jersey-guice-1.9-SNAPSHOT.jar">jersey-guice-1.9-SNAPSHOT.jar</a></li></ol><br />將以上的檔案一樣是放到 WEB-INF/lib 並加到 <b>Class path</b>。<br /><br />首先建立一個 <b>class</b>，每一次連接 <b>http://www.xyzdomainname.com</b> 都會顯示 <b>I am Index page</b>:<br /><pre class="brush: java">package com.ctlok.pro.controller;<br /><br />import javax.ws.rs.GET;<br />import javax.ws.rs.Path;<br />import javax.ws.rs.Produces;<br />import javax.ws.rs.core.MediaType;<br /><br />@Path(&quot;/&quot;)<br />public class CommonController {<br /><br />    @GET<br />    @Produces(MediaType.TEXT_PLAIN)<br />    public String index(){<br />        return &quot;I am Index page&quot;;<br />    }<br />    <br />}<br /></pre><br /><b>@Path</b> 是設定這個 <b>class</b> 會處理的 <b>URL</b>，可以放在 <b>Class</b> 或 <b>Method</b>。而 <b>Jersey</b> 會搜尋出在 <b>Class</b> 上有 <b>@Path</b> 的類別然後處理。<br /><b>@GET</b> 是設定這個 <b>Method</b> 處理那一種請求，一共有 5 種方式: <b>GET, POST, HEAD, PUT, DELETE</b>。<br /><b>@Produces</b> 則是回傳資料的類型，可以是 Text, XML, JSON, HTML 等等。<br /><br />然後再去建立一個 <b>Guice</b> 的 <b>Module class</b> 並設定 <b>Jersey</b>:<br /><pre class="brush:java">package com.ctlok.pro;<br /><br />import java.util.HashMap;<br />import java.util.Map;<br /><br />import com.ctlok.pro.controller.CommonController;<br />import com.google.inject.servlet.RequestScoped;<br />import com.google.inject.servlet.ServletModule;<br />import com.sun.jersey.guice.spi.container.servlet.GuiceContainer;<br /><br />public class WebModule extends ServletModule {<br /><br />    @Override<br />    protected void configureServlets(){<br />        bind(CommonController.class).in(RequestScoped.class);<br />        <br />        Map&lt;String, String&gt; parameters = new HashMap&lt;String, String&gt;(); <br />        parameters.put(&quot;com.sun.jersey.config.property.packages&quot;, &quot;com.ctlok.pro.controller&quot;);<br />        serve(&quot;/<em>&quot;).with(GuiceContainer.class, parameters);<br />    }<br />    <br />}<br /></pre><br />然後設定 <b>Guice</b> 起動時的注入器:<br /><pre class="brush: java">package com.ctlok.pro;<br /><br />import com.google.inject.Guice;<br />import com.google.inject.Injector;<br />import com.google.inject.servlet.GuiceServletContextListener;<br /><br />public class AppConfig extends GuiceServletContextListener{<br /><br />    @Override<br />    protected Injector getInjector() {<br />        return Guice.createInjector(new WebModule());<br />    }<br /><br />}<br /></pre><br />在 web.xml 設定好 <b>Guice Filter</b>和 <b>Listener</b>:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br />xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;<br />xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;<br />xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee<br />http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; version=&quot;2.5&quot;&gt;<br /> &lt;listener&gt;<br />  &lt;listener-class&gt;com.ctlok.pro.AppConfig&lt;/listener-class&gt;<br /> &lt;/listener&gt;<br /> &lt;filter&gt;<br />  &lt;filter-name&gt;guiceFilter&lt;/filter-name&gt;<br />  &lt;filter-class&gt;com.google.inject.servlet.GuiceFilter&lt;/filter-class&gt;<br /> &lt;/filter&gt;<br /> &lt;filter-mapping&gt;<br />  &lt;filter-name&gt;guiceFilter&lt;/filter-name&gt;<br />  &lt;url-pattern&gt;/</em>&lt;/url-pattern&gt;<br /> &lt;/filter-mapping&gt;<br />&lt;/web-app&gt;<br /></pre><br />打開 http://localhost:8888 後即可看到 "I am Index page".<br /><br />如要增加 URL，可以在 CommonController 加入:<br /><pre class="brush: java">@GET<br />@Path(&quot;user/{userId}/{userName}&quot;)<br />@Produces(MediaType.TEXT_PLAIN)<br />public String getUser(@PathParam(&quot;userId&quot;) String userId, @PathParam(&quot;userName&quot;) String userName){<br />    return &quot;User ID: &quot; + userId + &quot;, user name: &quot; + userName;<br />}<br /></pre><br />你可能有點疑問，<b>@Path</b> 在 Class 已經設家了，現在又有一個 <b>@Path</b> 在 <b>method</b> 上，那 Jersey 會怎麼決定。<br />其實 <b>Jersey</b> 會將 <b>class</b> 的 <b>@Path value</b> 加上 method 的 <b>@Path value</b>，即是 "/" + "user/{userId}/{userName}"。<br /><br />打開 http://localhost:8888/user/123/lawrence 顯示:User ID: 123, user name: lawrence<br /><br />其實 <b>Jersey</b> 的 <b>Method</b> 不一定返回 <b>String</b> 可以是一個 <b>Object</b> 或 <b>Jersey</b> 定義 的 <b>Response</b>。以下例字示範如何顯示一個 <b>JSP</b> 頁面，並由 <b>Controller</b> 將 <b>Model</b> 傳給 <b>View (JSP)</b>:<br /><br />先在 WEB-INF 新增一個 <b>views</b> 資料夾並新增一個 <b>example.jsp</b>，<b>JSP</b> 內容如下:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;<br />&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;<br />&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;<br />&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;<br /> &lt;head&gt;<br />  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;<br />  &lt;title&gt;Guice + Jersey + JSP&lt;/title&gt;<br /> &lt;/head&gt;<br /> &lt;body&gt;<br />  &lt;c:out value=&quot;${it.msg}&quot; /&gt;<br /> &lt;/body&gt;<br />&lt;/html&gt;<br /></pre><br />在 <b>Controller</b> 內也增加一個 <b>Method</b>:<br /><pre class="brush: java">@GET<br />@Path(&quot;jsp&quot;)<br />@Produces(MediaType.TEXT_HTML)<br />public Response getJsp(){<br />    Map&lt;String, Object&gt; model = new HashMap&lt;String, Object&gt;();<br />    model.put(&quot;msg&quot;, &quot;Hello World!&quot;);<br />    return Response.ok(new Viewable(&quot;/WEB-INF/views/example.jsp&quot;, model)).build();<br />}<br /></pre><br />打開 http://localhost:8888/jsp 顯示: Hello World!<br /><br />完整的 CommonController:<br /><pre class="brush: java">package com.ctlok.pro.controller;<br /><br />import java.util.HashMap;<br />import java.util.Map;<br /><br />import javax.ws.rs.GET;<br />import javax.ws.rs.Path;<br />import javax.ws.rs.PathParam;<br />import javax.ws.rs.Produces;<br />import javax.ws.rs.core.MediaType;<br />import javax.ws.rs.core.Response;<br /><br />import com.sun.jersey.api.view.Viewable;<br /><br />@Path(&quot;/&quot;)<br />public class CommonController {<br /><br />    @GET<br />    @Produces(MediaType.TEXT_PLAIN)<br />    public String index() {<br />        return &quot;I am Index page&quot;;<br />    }<br /><br />    @GET<br />    @Path(&quot;user/{userId}/{userName}&quot;)<br />    @Produces(MediaType.TEXT_PLAIN)<br />    public String getUser(@PathParam(&quot;userId&quot;) String userId,<br />            @PathParam(&quot;userName&quot;) String userName) {<br />        return &quot;User ID: &quot; + userId + &quot;, user name: &quot; + userName;<br />    }<br /><br />    @GET<br />    @Path(&quot;jsp&quot;)<br />    @Produces(MediaType.TEXT_HTML)<br />    public Response getJsp() {<br />        Map&lt;String, Object&gt; model = new HashMap&lt;String, Object&gt;();<br />        model.put(&quot;msg&quot;, &quot;Hello World!&quot;);<br />        return Response.ok(new Viewable(&quot;/WEB-INF/views/example.jsp&quot;, model))<br />                .build();<br />    }<br /><br />}<br /></pre><br />範例: <a href="https://sites.google.com/site/lawrencespace/lawpronotes/download/Guice-Jersey.zip?attredirects=0&d=1">Guice-Jersey.zip</a><br />密碼: <b>pro.ctlok.com</b>  相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Dependency-Injection-Dhanji-R-Prasanna/dp/193398855X?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Dependency Injection" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=193398855X&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=193398855X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Google-Guice-Lightweight-Dependency-ebook/dp/B001BYBU80?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Google Guice: Agile Lightweight Dependency Injection Framework" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=B001BYBU80&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=B001BYBU80" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/RESTful-Java-Jax-RS-Animal-Guide/dp/0596158041?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="RESTful Java with Jax-RS (Animal Guide)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596158041&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596158041" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-4420115334139656989?l=lawpronotes.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
