<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design Pattern | Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/blog/tag/design-pattern/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2015-12-17T10:59:14+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design Pattern - Decorator]]></title>
    <link href="http://pro.ctlok.com/blog/2012/04/11/design-pattern-decorator.html"/>
    <updated>2012-04-11T15:29:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/04/11/design-pattern-decorator</id>
    <content type="html"><![CDATA[<p>Decorator Pattern 可以令到不用改動原本物件的程式碼，而又可以擴充一些功能在這個物件上，
就好像 Plugin 一樣。你可以想像一下，WordPress 的 Plugin 並不需要改動核心的程式，
但又可以増加一些功能。
Java 上的 InputStream 一樣採用這種模式去實現。</p>

<p>看看以下例子應該有助你明白這個模式:</p>

<!--more-->


<hr />

<p>公司要你開發一個手機用戶計費系統，因應用戶使用時間而去收費，
使用時間愈多折扣亦愈多。而用戶亦有分普通用戶或 VIP 用戶，
VIP 用戶亦有更多折扣。</p>

<p>一開始你可能會設計成這樣:</p>

<p>{% include_code design-pattern-decorator/sample1/User.java %}
{% include_code design-pattern-decorator/sample1/MobilePayment.java %}
{% include_code design-pattern-decorator/sample1/Main.java %}</p>

<p><code>text 執行結果
Lawrence usage: 10000 minute, charge: 8640.0
Tony usage: 4000 minute, charge: 4320.0
</code></p>

<p>你可以看見所有計費的程式碼也在 <code>MobilePayment.charge</code> 內，如果再要增加計費條件
就要修改這個地方的程式碼。</p>

<hr />

<p>現在公司又要增加一些收費條件，因為提供額外的服務給公司客戶，需要收取額外 10% 服務費。
如果你只改動 <code>MobilePayment.charge</code> 內的程式碼，那愈來愈多條件時就難以維護，
現在我們使用 Decorator Pattern 去解決這些問題，收費條件亦可以隨時抽換。</p>

<p>{% img /downloads/code/design-pattern-decorator/sample2/uml.png %}</p>

<p>{% include_code design-pattern-decorator/sample2/User.java %}
{% include_code design-pattern-decorator/sample2/Payment.java %}
{% include_code design-pattern-decorator/sample2/BasicMobilePayment.java %}
{% include_code design-pattern-decorator/sample2/AdditionalPayment.java %}
{% include_code design-pattern-decorator/sample2/UsageAmountPayment.java %}
{% include_code design-pattern-decorator/sample2/VIPPayment.java %}
{% include_code design-pattern-decorator/sample2/CompanyPayment.java %}
{% include_code design-pattern-decorator/sample2/Main.java %}</p>

<p><code>text 執行結果
Lawrence usage: 10000 minute, charge: 8640.0
Tony usage: 4000 minute, charge: 4320.0
ABC Company usage: 10000 minute, charge: 10560.0
</code></p>

<p>這樣就可以隨時新增條件或移除條件而又不會影響到核心的程式碼。</p>

<hr />

<p>以下的圖片是描述 Singleton Pattern 的 Class Diagram。（From Wiki）</p>

<p>{% img http://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Decorator_UML_class_diagram.svg/400px-Decorator_UML_class_diagram.svg.png %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Pattern - Singleton]]></title>
    <link href="http://pro.ctlok.com/blog/2012/04/04/design-pattern-singleton.html"/>
    <updated>2012-04-04T10:50:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/04/04/design-pattern-singleton</id>
    <content type="html"><![CDATA[<p>Singleton Pattern 幫助你創造出唯一一個實例，保證任何物件要使用這個物件時，也是使用相同的實例。
那唯一一個實例有什麼用呢? 可減少系統負擔，不用建立多個實例，尤其是建立實例是需要複雜的計算，
在情況許可下使用 Singleton Pattern 是有助提高系統效能。
或在某些情況下例如 Cache 和 Pool 這些要共用物件的設計，大多數是只有一個實例存在於應用程式。</p>

<p>看看以下例子應該有助你明白這個模式：</p>

<!--more-->


<hr />

<p>公司要你開發一個 Cache 服務，以供應用程式其他服務使用。
一開始你可能設計成這樣:</p>

<p>{% include_code design-pattern-singleton/sample1/Cache.java %}</p>

<p>這個看似沒有什麼問題，但其他物件可以使用 <code>new Cache()</code> 來建立實例，為了解決這個問題，
更改一下 <code>Constructor</code>:</p>

<p>{% include_code design-pattern-singleton/sample2/Cache.java %}</p>

<p>Constructor 改為 <code>private</code> 就沒有其他物件建立到 Cache 實例，
這樣就可以避免了其他物件可以使用 <code>new Cache()</code> 來建立實例這個問題。</p>

<p>亦可以將 Class 改成 <code>abstract</code> 來解決這個問題。</p>

<p>{% include_code design-pattern-singleton/sample3/Cache.java %}</p>

<hr />

<p>有測試人員測試出建立 <code>java.util.HashMap</code> 是要複雜的計算，又使用了大量的記憶體(假設)，
而 Cache 這個物件又不是必須的，希望你可以改為使用到 Cache 時才建立相對應的物件 (Lazy Initialization)，
以節省記憶體和 CPU 使用量。</p>

<p>{% include_code design-pattern-singleton/sample4/Cache.java %}</p>

<p>你可能會奇怪，在 InstanceHolder 內不是有一句 <code>private static final Cache instance = new Cache();</code> 嗎。
那裡有 Lazy Initialization? 其實在 JVM 載入 Cache.class 時會檢查有那些 static field 需要初始化，
但這個過程並不包括 static class 亦即是 InstanceHolder。InstanceHolder 只會在執行 <code>Cache.getInstance()</code> 時
被 JVM 載入，JVM 載入 InstanceHolder.class 時亦會檢查有那些 static field 需要初始化，
那時就會將 InstanceHolder.instance 初始化。</p>

<p>更詳細說明可以參考 Wiki: <a href="http://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom">http://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom</a></p>

<hr />

<p>公司又下了一個要求，在正確環境中會使用到 <code>java.util.TreeMap</code>實現的 Cache，
而在測試環境中使用 <code>java.util.HashMap</code> 就可以了。</p>

<p>{% include_code design-pattern-singleton/sample5/Cache.java %}
{% include_code design-pattern-singleton/sample5/HashMapCache.java %}
{% include_code design-pattern-singleton/sample5/TreeMapCache.java %}
{% include_code design-pattern-singleton/sample5/Main.java %}</p>

<p><code>text 執行結果
TreeMapCache@4e82701e
true
Object
</code></p>

<p>暫時只想到這個解決方法，如果你有更好的方法請告訴我。</p>

<hr />

<p>以下的圖片是描述 Singleton Pattern 的 Class Diagram。（From Wiki）</p>

<p>{% img http://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Singleton_UML_class_diagram.svg/250px-Singleton_UML_class_diagram.svg.png %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Pattern - Abstract Factory]]></title>
    <link href="http://pro.ctlok.com/blog/2012/04/02/design-pattern-abstract-factory.html"/>
    <updated>2012-04-02T21:30:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/04/02/design-pattern-abstract-factory</id>
    <content type="html"><![CDATA[<p>上一篇已經介紹過的 Factory Pattern 可以將建立實例的程式碼抽取出來，
並可以提供絡不同的物件使用。Abstract Factory Pattern 其實和
Factory Pattern 很相似，但 Abstract Factory 比較偏向建立同一系統的物件。</p>

<p>同一系列的意思是彼此的物件有一定的關連，例如: 輪子、引擎、車架、方向盤、儀標板等等。
這些都是組成車子的組件，這些組件亦由可以由不同廠商去開發，Abstract Factory 扮演角色就是廠商。
更改廠商，就可以建立不同樣式的車子。</p>

<p>看看以下例子應該有助你明白這個模式：</p>

<!--more-->


<hr />

<p>公司要開發一款迷宮遊戲，建立迷宮的組件有：『牆壁』、『門』和『道路』。
遊戲在不同的關卡會顯示不同風格的迷宮，首先要將做出組件的介面和建立一個工廠介面。</p>

<p>{% img /downloads/code/design-pattern-abstract-factory/sample1/uml.png %}</p>

<p>組件介面:
{% include_code design-pattern-abstract-factory/sample1/component/Component.java %}
{% include_code design-pattern-abstract-factory/sample1/component/Door.java %}
{% include_code design-pattern-abstract-factory/sample1/component/Wall.java %}
{% include_code design-pattern-abstract-factory/sample1/component/Road.java %}
{% include_code design-pattern-abstract-factory/sample1/component/Labyrinth.java %}</p>

<p>藍色風格的組件:
{% include_code design-pattern-abstract-factory/sample1/component/blue/BlueDoor.java %}
{% include_code design-pattern-abstract-factory/sample1/component/blue/BlueWall.java %}
{% include_code design-pattern-abstract-factory/sample1/component/blue/BlueRoad.java %}</p>

<p>綠色風格的組件:
{% include_code design-pattern-abstract-factory/sample1/component/green/GreenDoor.java %}
{% include_code design-pattern-abstract-factory/sample1/component/green/GreenWall.java %}
{% include_code design-pattern-abstract-factory/sample1/component/green/GreenRoad.java %}</p>

<p>工廠介面:
{% include_code design-pattern-abstract-factory/sample1/factory/LabyrinthComponentFactory.java %}
{% include_code design-pattern-abstract-factory/sample1/factory/BlueStyleLabyrinthComponentFactory.java %}
{% include_code design-pattern-abstract-factory/sample1/factory/GreenStyleLabyrinthComponentFactory.java %}</p>

<p>{% include_code design-pattern-abstract-factory/sample1/Main.java %}</p>

<p>```text 執行結果
Blue Road
Blue Road
Blue Road
Blue Wall
Blue Road
Blue Door
Blue Wall
Blue Road
Blue Road</p>

<h2>Blue Road</h2>

<p>Green Wall
Green Wall
Green Wall
Green Road
Green Wall
Green Wall
Green Wall
Green Road
Green Wall
Green Road
```</p>

<p>在建立 <code>Labyrinth</code> 時，只需將工廠交給 <code>Labyrinth</code> 就可以建立不同風格的迷宮。</p>

<p>要新增更多風格的組件，只需要建立相對應的工廠就可以了，完全不需要改動 <code>Labyrinth.draw</code> 的程式碼。</p>

<p>不過 Abstract Factory 有一個缺點，如果你要新増一個原先不存在的組件，例如加一個『陷阱』，
你便需要更改 <code>LabyrinthFactory</code> 這個介面。</p>

<hr />

<p>以下的圖片是描述 Abstract Factory Pattern 的 Class Diagram。（From Wiki）</p>

<p>{% img http://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Abstract_factory.svg/517px-Abstract_factory.svg.png %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Pattern - Factory]]></title>
    <link href="http://pro.ctlok.com/blog/2012/04/02/design-pattern-factory.html"/>
    <updated>2012-04-02T10:32:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/04/02/design-pattern-factory</id>
    <content type="html"><![CDATA[<p>Factory Pattern 可以將創造實例的程式碼分離，令原本核心的程式碼不必太過依賴於某一個物件，
並可以令其他要用到同一物件的地方使用同一套程式碼，方便集中管理。</p>

<p>看看以下例子應該有助你明白這個模式：</p>

<!--more-->


<hr />

<p>公司要你開發一個 Logger (記錄器)，用於記錄程式內的變化，你一開始可能會設計成以下這樣:</p>

<p>{% img /downloads/code/design-pattern-factory/sample1/uml.png %}</p>

<p>{% include_code design-pattern-factory/sample1/Logger.java %}
{% include_code design-pattern-factory/sample1/ConsoleLogger.java %}</p>

<p>其他程式要使用時會直接使用 <code>new ConsoleLogger()</code> 來取得 ConsoleLogger 的 Instance (實例)。</p>

<p>{% include_code design-pattern-factory/sample1/AService.java %}
{% include_code design-pattern-factory/sample1/BService.java %}</p>

<p>有沒有發現什麼問題? 如果使用 Logger 的物件超過 100 個，要轉換 ConsoleLogger 為其他 Logger 就要更改 100 次程式碼。</p>

<hr />

<p>我們可以使用 Factory Pattern 來解決這個問題:</p>

<p>{% img /downloads/code/design-pattern-factory/sample2/uml.png %}</p>

<p>{% include_code design-pattern-factory/sample2/Logger.java %}
{% include_code design-pattern-factory/sample2/ConsoleLogger.java %}
{% include_code design-pattern-factory/sample2/FileLogger.java %}
{% include_code design-pattern-factory/sample2/LoggerFactory.java %}</p>

<p>新增一個 LoggerFactory，用來建立 Logger 。</p>

<p>{% include_code design-pattern-factory/sample2/AService.java %}
{% include_code design-pattern-factory/sample2/BService.java %}</p>

<p>以後要使用 Logger 時不必知道實際是使用 ConsoleLogger 或 FileLogger，只要物件實現了 Logger 這個介面就可以了。
這個 Factory Pattern 解決了一些問題，但仍然差一點，例如: 在測試環境中我想使用 ConsoleLogger，
但在正常環境中是使用 FileLogger，但以上的方法並不能解決這個問題。</p>

<hr />

<p>將 LoggerFactory 的 createLogger 變更為 Non-Static:
{% include_code design-pattern-factory/sample3/LoggerFactory.java %}</p>

<p>新増一個 MockLoggerFactory 在測試環境:
{% include_code design-pattern-factory/sample3/MockLoggerFactory.java %}</p>

<p>{% include_code design-pattern-factory/sample3/AService.java %}
{% include_code design-pattern-factory/sample3/BService.java %}</p>

<p>{% include_code design-pattern-factory/sample3/Main.java %}</p>

<p>這樣就可以在不同環境替換 LoggerFactory 來建立不同的 Logger。</p>

<hr />

<p>以下的圖片是描述 Factory Pattern 的 Class Diagram。（From Wiki）</p>

<p>{% img http://upload.wikimedia.org/wikipedia/commons/thumb/a/a3/FactoryMethod.svg/349px-FactoryMethod.svg.png %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Pattern - Observer]]></title>
    <link href="http://pro.ctlok.com/blog/2012/03/29/design-pattern-observer.html"/>
    <updated>2012-03-29T22:08:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/03/29/design-pattern-observer</id>
    <content type="html"><![CDATA[<p>Observer Pattern 有 2 個重要角色「主題」和「觀察者」，觀察者希望主題狀態有變更時會立即被告知。</p>

<p>你可以想像 Blog 上的 Email 訂閱服務（本 Blog 沒有），當你對這個 Blog 有興趣時，
你會用你的 Email 地址去訂閱服務，當有更新時你會立即收到通知，題示你有更新了，請去看看。
當你對 Blog 上千篇一律的內容感到無聊時，你亦可以取消這個訂閱，那以後有更新亦不會再通知你。</p>

<p>看看以下例子應該有助你明白這個模式：</p>

<!--more-->


<hr />

<p>公司要你開發一個即時新聞平台，用戶只需要打開程式就能夠看到即時新聞。</p>

<p>你一開始可能會用 Pull 的方法，每隔一段時間會主動去向主題拿取新的內容：</p>

<p>{% img /downloads/code/design-pattern-observer/sample1/uml.png %}</p>

<p>{% include_code design-pattern-observer/sample1/NewsTopic.java %}
{% include_code design-pattern-observer/sample1/Client.java %}
{% include_code design-pattern-observer/sample1/Main.java %}</p>

<p><code>text 執行結果
Client 109a4c display message: News 0 at time: Fri Mar 30 00:41:23 CST 2012
Client c40c80 display message: News 0 at time: Fri Mar 30 00:41:25 CST 2012
Client c40c80 display message: News 1 at time: Fri Mar 30 00:41:25 CST 2012
Client 109a4c display message: News 2 at time: Fri Mar 30 00:41:26 CST 2012
Client 109a4c display message: News 1 at time: Fri Mar 30 00:41:26 CST 2012
</code></p>

<p>每個 Client 接收到訊息的時間不一。</p>

<hr />

<p>有客戶抱怨，股票新聞不夠實時，害他掉了錢。公司要你改善一下程式，盡量減少延遲。</p>

<p>現在是 Observer Pattern 大派用場的時候，因為一有更新就會主動通知觀察者，大大減低新聞延遲的問題。</p>

<p>你可能會問，使用舊方法但將間隔縮短不就可以了嗎？
這個方法雖然可以解決延遲的問題，但如果客戶多達 10000 人時，每一個也不停重覆去檢查資料是非常浪費系統資源，
CPU 長期高工作量，會拖跨了系統的其他程式。</p>

<p>{% img /downloads/code/design-pattern-observer/sample2/uml.png %}</p>

<p>{% include_code design-pattern-observer/sample2/Subject.java %}
{% include_code design-pattern-observer/sample2/Observer.java %}
{% include_code design-pattern-observer/sample2/NewsTopic.java %}
{% include_code design-pattern-observer/sample2/Client.java %}
{% include_code design-pattern-observer/sample2/Main.java %}</p>

<p><code>text 執行結果
Client 10b30a7 display message: News 0 at time: Fri Mar 30 00:54:03 CST 2012
Client ca0b6 display message: News 0 at time: Fri Mar 30 00:54:03 CST 2012
Client 14318bb display message: News 0 at time: Fri Mar 30 00:54:03 CST 2012
Client 10b30a7 display message: News 1 at time: Fri Mar 30 00:54:07 CST 2012
Client ca0b6 display message: News 1 at time: Fri Mar 30 00:54:07 CST 2012
Client 14318bb display message: News 1 at time: Fri Mar 30 00:54:07 CST 2012
Client 10b30a7 display message: News 2 at time: Fri Mar 30 00:54:09 CST 2012
Client ca0b6 display message: News 2 at time: Fri Mar 30 00:54:09 CST 2012
Client 14318bb display message: News 2 at time: Fri Mar 30 00:54:09 CST 2012
</code></p>

<p>現在每一次發佈訊息時，每一個客戶都同時收到，大大減低了延遲和系統負荷。</p>

<hr />

<p>以下的圖片是描述 Observer Pattern 的 Class Diagram。（From Wiki）</p>

<p>{% img http://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/Observer.svg/500px-Observer.svg.png %}</p>
]]></content>
  </entry>
  
</feed>
