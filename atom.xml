<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-03-25T15:31:24+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shacial 的資料庫設計]]></title>
    <link href="http://pro.ctlok.com/2012/03/shacial-database-design.html"/>
    <updated>2012-03-23T14:40:00+08:00</updated>
    <id>http://pro.ctlok.com/2012/03/shacial-database-design</id>
    <content type="html"><![CDATA[<a href="http://www.shacial.com">Shacial</a> 上線時間差不多有 4 星期了，雖然使用的人並不多，但仍然想再將這個服務做得更加好。<br />在這裡我先公開資料庫設計給大家看看。以後可能會再公開程式碼。(Open Source Project ?)<br /><br />以下就是 <a href="http://www.shacial.com">Shacial</a> 的 ERD:<br /><br /><a href="http://3.bp.blogspot.com/-IuTFgpUweFM/T2wZLbHTBhI/AAAAAAAAA94/r_OJn2IS4Cc/s1600/ERD.png" imageanchor="1" style=""><img border="0" height="345" width="400" src="http://3.bp.blogspot.com/-IuTFgpUweFM/T2wZLbHTBhI/AAAAAAAAA94/r_OJn2IS4Cc/s400/ERD.png" /></a><br /><br />已經設計好支援檔案版本控制。下一步應該要想想如何支援 <b>News Feed</b>，即時的信息傳遞。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-987543225069631026?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自行開發的檔案分享應用程式 - Shacial]]></title>
    <link href="http://pro.ctlok.com/2012/02/shacial-web-application.html"/>
    <updated>2012-02-28T18:21:00+08:00</updated>
    <id>http://pro.ctlok.com/2012/02/shacial-web-application</id>
    <content type="html"><![CDATA[用了 3 個多月時間，終於完成了這個應用程式。<br /><br />這個應用程式是一個網路硬碟，但不像一般網路硬碟只是拿來備份東西或發放某些東西，<b>Shacial</b> 著重於分享的功能，雖然現在還有很大部份功能仍然開發中，但基本的功能如: 共同協作、傳送檔案、圖片空間或公開檔案等等已經完成。<br /><br />背後儲存檔案的是 <b>Amazon S3</b> 加上 <b>EC2</b> 作為 <b>Web Server</b>，速度有一定保證。<br /><br />希望各位網友能夠試用這個應用程式並給小弟一點點意見。<br /><br />現時測試為每一個用戶提供 <b>2GB</b> 的空間，並不設類型限制和單一檔案容量上限 (只要不超過配額就可以上載)。<br /><br /><a href="http://www.shacial.com/">http://www.shacial.com/</a><br /><br />如有任何問題可用電子郵件聯絡我。<br /><br />2012-03-11: 提供 Facebook 和 Google account 登入<br /><br />測試貼圖:<br />193 KB<br /><a href="http://www.shacial.com/f/12/logo-java-blue.png"><img src="http://www.shacial.com/f/12/logo-java-blue.png" style="width:30%;height:30%" /></a><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-3995517410954114390?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[介紹一款 CSS 模組化工具 - LESS]]></title>
    <link href="http://pro.ctlok.com/2012/01/css.html"/>
    <updated>2012-01-31T16:38:00+08:00</updated>
    <id>http://pro.ctlok.com/2012/01/css</id>
    <content type="html"><![CDATA[<a href="http://1.bp.blogspot.com/-VdakltfXtKs/TyejMYxi6VI/AAAAAAAAA9I/3b5zk3zpi-4/s1600/logo%255B1%255D.png" imageanchor="1" style=""><img border="0" height="81" width="199" src="http://1.bp.blogspot.com/-VdakltfXtKs/TyejMYxi6VI/AAAAAAAAA9I/3b5zk3zpi-4/s400/logo%255B1%255D.png" /></a><br /><br />網站需要一個漂亮的介面來將資訊帶給用戶，開發這個介面除了要使用 <b>HTML Tag</b> 外，亦需要使用 <b>Cascading Style Sheets (CSS)</b> 去令這個介面更美觀。有人說: 你只要複製一次程式碼其實亦是複製了一個 <b>Bug</b>，所以我們在設計程式時也盡量不要將相同的程式碼複製到不同地方，在 <b>Java</b> 可以將一些程式碼包裝成 <b>Object</b> 以便不同地方也使用同一組程式碼，但在 <b>CSS</b> 又怎麼辦? 使用外部的 <b>CSS</b> 檔案其實已經很大程度地減少重複的外觀設置程式碼，但這仍然不足夠。<br /><br />今次介紹的工具能夠在 <b>CSS</b> 設置一些常用參數，外觀設置程式碼的組合，簡單的算法和使用 <b>Javascript</b> 功能等等。這款工具就是 <b>LESS</b> 了。<br /><br />以下例子可以對比普通 <b>CSS</b> 和 <b>LESS CSS</b> 的不同。<br /><br />參數:<br /><br />普通 <b>CSS</b>:<br /><pre class="brush:css">.header{<br />    background-color: #777;<br />    color: #f5f5f5;<br />}<br /><br />a{<br />    color: #777;<br />}<br /><br />p.desc{<br />    border: solid 1px #777;<br />    color: #777;<br />}<br /></pre><br />以上的 <b>CSS</b> 出現了好幾次 <b>#777</b> 這個顏色設置，如果網頁樣式改變了，需要將灰色設置為淺一點的灰色，只好一個一個 <b>#777</b> 找出來加以修改。<br /><br />使用 <b>LESS</b> 可以:<br /><pre class="brush:css">@gray: #777;<br />@smoke-white: #f5f5f5;<br />.header{<br />    background-color: @gray;<br />    color: @smoke-white;<br />}<br /><br />a{<br />    color: @gray;<br />}<br /><br />p.desc{<br />    border: solid 1px @gray;<br />    color: @gray;<br />}<br /></pre><br />這樣只需將 @gray 參數改變就可以一次轉換所有灰色了。<br /><br />除了參數還可以組合外觀設置程式碼:<br /><br />普通 <b>CSS</b>:<br /><pre class="brush:css">.header{<br />    border-radius: 5px;<br />    -moz-border-radius: 5px;<br />    -webkit-border-radius: 5px;<br />}<br /><br />ul.stack li{<br />    border-radius: 3px;<br />    -moz-border-radius: 3px;<br />    -webkit-border-radius: 3px;<br />}<br /></pre><br /><b>LESS CSS</b>:<br /><pre class="brush:css">.border-radius (@radius 5px) {<br />    border-radius: @radius;<br />    -moz-border-radius: @radius;<br />    -webkit-border-radius: @radius;<br />}<br /><br />.header{<br />    .border-radius;<br />}<br /><br />ul.stack li{<br />    .border-radius(3px);<br />}<br /></pre><br />因為不同的瀏覽器設置圓角的程式碼也不同，如果以後又有一款新瀏覽器提供圓角的樣式，就可以加一句到 .border-radius 就完成所有設置，方便得多。<br /><b>LESS</b> 的組合外觀設置程式碼提供了傳入參數和默認參數。<br /><br /><b>LESS</b> 可以令 <b>CSS</b> 程式碼更直觀:<br /><br />普通 <b>CSS</b>:<br /><pre class="brush:css">.header p{<br />    background-color: #777;<br />}<br /><br />.header p span{<br />    font-size: 18px;<br />}<br /><br />.header p span.brand a{<br />    color: #ccc;<br />}<br /><br />.header p span.brand a:hover{<br />    color: #f5f5f5;<br />}<br /></pre><br /><b>LESS CSS</b>:<br /><pre class="brush:css">.header{<br />    p{<br />        background-color: #777;<br /><br />        span{<br />            font-size: 18px;<br /><br />            &.brand{<br />                a{<br />                    color: #ccc;<br /><br />                    &:hover{<br />                        color: #f5f5f5;<br />                    }<br />                }<br />            }<br />        }<br />    }<br />}<br /></pre><br />這樣可以更加清楚知道 <b>.header</b> 內的所有風格。<br /><br />如要使用 <b>LESS</b> 有 <b>2</b> 種方法:<br /><ul><li>使用 <b>less.js</b> 在瀏覽器將 <b>LESS CSS</b> 轉換為普通 <b>CSS</b></li><li>下載 <b>Node.js</b> 然後使用 <b>npm</b> 去下載 <b>LESS</b> 並使用 <b>Command</b> 將 <b>LESS CSS</b> 轉換為普通 <b>CSS</b></li></ul><br />第一個方法在開發環境使用還好，在真實環境建議使用第 2 種方法。<br /><br />我弄了一個 <b>Node.js</b> 的 <b>script</b> 以方便大量轉換 <b>CSS</b>，有興趣可拿去用:<br /><pre class="brush:js">#!/usr/bin/env node<br /><br />var sys = require(&#39;util&#39;)<br />var fs = require(&#39;fs&#39;);<br />var less = require(&#39;less&#39;);<br /><br />var targetDir = &#39;public&#39;;<br />var currentDir = &#39;source&#39;;<br /><br />convertResource(currentDir);<br /><br />function convertResource(dirName){<br />    fs.readdir(dirName, function(err, files){<br />        if (err){<br />            console.log(err);<br />            return;<br />        }<br />        for (var i = 0; i &lt; files.length; i++){<br />            (function(){<br />                var sourceFile = dirName + &quot;/&quot; + files[i];<br />                var targetFile = sourceFile.replace(currentDir, targetDir);<br />                fs.lstat(sourceFile, function(e, stats){<br />                    if (stats.isDirectory()){<br />                        if (!isFileExist(targetFile)){<br />                            fs.mkdirSync(targetFile);<br />                        }<br />                        convertResource(sourceFile);<br />                    }else{<br />                        if (sourceFile.match(/^(.*)(\.css|\.less)$/i)){<br />                            complieCss(sourceFile, targetFile.replace(/^(.*)(\.css|\.less)$/i, &quot;$1.css&quot;));<br />                        }else{<br />                            var is = fs.createReadStream(sourceFile)<br />                            var os = fs.createWriteStream(targetFile);<br />                            sys.pump(is, os);<br />                        }<br />                    }<br />                });<br />            })();<br />        }<br />    });<br />}<br /><br />function complieCss(sourceFile, targetFile){<br />    fs.readFile(sourceFile, &quot;utf-8&quot;, function(e, data){<br />        new(less.Parser)({<br />            paths: [&quot;.&quot;, sourceFile.substring(0, sourceFile.lastIndexOf(&#39;/&#39;))],<br />            filename: sourceFile<br />        }).parse(data, function (err, tree) {<br />            if (err) {<br />                console.log(err);<br />            } else {<br />                try {<br />                    css = tree.toCSS({<br />                        yuicompress: true<br />                    });<br />                    if (targetFile) {<br />                        if (isFileExist(targetFile)){<br />                            fs.unlinkSync(targetFile);<br />                        }<br />                        var fd = fs.openSync(targetFile, &quot;w&quot;);<br />                        fs.writeSync(fd, css, 0, &quot;utf8&quot;);<br />                    }else{<br />                        sys.print(css);<br />                    }<br />                } catch (e) {<br />                    console.log(&quot;CSS file complie error. Ignore file: &quot; + sourceFile);<br />                }<br />            }<br />        });<br />    });<br />}<br /><br />function isFileExist (path) { <br />    try { <br />        fs.statSync(path); <br />        return true;<br />    } catch (e) { <br />        return false;<br />    } <br />}<br /></pre><br />更多的用法可在 <b>LESS</b> 官網找到:<br />官網: <a href="http://lesscss.org/">http://lesscss.org/</a><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5259934493976644480?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[助你快速開發網站的 Twitter Bootstrap]]></title>
    <link href="http://pro.ctlok.com/2011/12/speed-up-develop-web-site-twitter.html"/>
    <updated>2011-12-28T23:00:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/12/speed-up-develop-web-site-twitter</id>
    <content type="html"><![CDATA[<a href="http://a1.twimg.com/profile_images/1540251533/bootstrap-avatar_reasonably_small.png" imageanchor="1" style=""><img border="0" height="72" width="72" src="http://a1.twimg.com/profile_images/1540251533/bootstrap-avatar_reasonably_small.png" /></a><br /><br /><b>Twitter Bootstrap</b> 有點像以前曾經介紹過的 <a href="http://pro.ctlok.com/2010/07/css-framework-blueprint.html">Blueprint</a> 和 <a href="http://960.gs/">960 Grid System</a> 這類的 <b>CSS Framework</b>。<b>Twitter Bootstrap</b> 一樣是能夠幫助你快速設置好網頁佈局的一個 <b>Framework</b>，那這個 <b>Twitter Bootstrap</b> 和前 2 者有什麼分別呢？<br /><br />介面對一個網站是極奇重要的，就算你背後的程式有多強多勁，但沒有一個好的介面也是會把用戶趕走的。<b>Twitter Bootstrap</b> 不單只幫助你設置網頁佈局，亦提供了一體化的介面及一些常用的網頁元件，這些元件都經過精心設計，就算不懂任何任何圖像軟件也能砌出一個美觀的網站（我一直最對網站設計最感頭痛的就是整體一致化）。<br /><b>CSS</b> 元件方面有：<br /><ol><li>網頁佈局的 <b>Grid</b> (有 <b>Fixed layout</b> 和 <b>Fluid layout</b>）</li><li>常用標題大小設置 <b>Typography</b></li><li>列舉 <b>List</b></li><li>提示貼紙 <b>Inline labels</b></li><li>媒體框架 <b>Media grid</b></li><li><b>Table</b></li><li><b>Input box</b></li><li><b>Select box</b></li><li>按鈕 <b>Button</b></li><li>導航列 <b>Navigation bar</b></li><li>標籤 <b>Taps</b></li><li>顯示層級目錄的元件 <b>Breadcrumbs</b></li><li>頁數工具 <b>Pagination</b></li><li>提示 <b>Alerts & Errors</b></li></ol><br />除了 <b>CSS</b> 外元件外，<b>Twitter Bootstrap</b> 亦包括了一些 <b>Javascript</b> 元件：<br /><ol><li>對話框 <b>Modals</b></li><li><b>Tooltips</b></li><li><b>Popovers</b></li></ol><br />元件方面真的比其他 <b>CSS Framework</b> 多太多了，使用了 <b>Twitter Bootstrap</b> 都可以做出一個不太差的網站。<br /><br />因為有些元件和我現有的 <b>CSS</b> 相衝，還是看示範比較好。<br /><br />有興趣可到 <a href="http://twitter.github.com/bootstrap/">http://twitter.github.com/bootstrap/</a> 玩玩看示範。<br />下載可到 <a href="https://github.com/twitter/bootstrap">https://github.com/twitter/bootstrap</a>。<br />到目前為止最新穩定版本是 <b>1.4</b>。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-6552671825896734268?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自訂 EclipseLink Logger]]></title>
    <link href="http://pro.ctlok.com/2011/12/customize-eclipselink-logger.html"/>
    <updated>2011-12-19T16:02:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/12/customize-eclipselink-logger</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"><a href="http://www.eclipse.org/eclipselink/images/logos/eclipselink-logo.png" imageanchor="1" style=""><img border="0" height="71" width="242" src="http://www.eclipse.org/eclipselink/images/logos/eclipselink-logo.png" /></a></div><br /><br />預設的 <b>EclipseLink logger</b> 是會將所有訊息都會打印到 <b>System.out</b> 去，但 <b>System.out</b> 的記錄通常很難查找。如果不同的應用程式都在同一台 <b>Server</b> 上運行就更加混亂，不同的應用程式都會向 <b>System.out</b> 送出資料，根本不能拿來分析特定一個應用程式的行為。通常做法是會將不同的應用程式都設定不同的日誌檔案，以便分析。<br /><br />要將 <b>EclipseLink</b> 的日誌寫到自己的日誌檔案是很簡單的，只需 <b>Extend</b> <b>org.eclipse.persistence.logging.AbstractSessionLog</b> 這個 <b>class</b>，並且實現 <b>public void log(SessionLogEntry sessionLogEntry)</b> 就可以了，以下有一個例子是將 <b>EclipseLink</b> 的日誌經由 <b>Slf4j</b> 傳送到自訂的日誌檔案中。<br /><br /><pre class="brush: java">package com.ctlok.pro.log<br /><br />import org.eclipse.persistence.logging.AbstractSessionLog;<br />import org.eclipse.persistence.logging.SessionLogEntry;<br /><br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br /><br />public class MyEclipseLinkLogger extends AbstractSessionLog {<br />    <br />    private static final Logger logger = LoggerFactory.getLogger(MyEclipseLinkLogger.class);<br />    <br />    @Override<br />    public void log(SessionLogEntry sessionLogEntry) {<br />        switch (sessionLogEntry.getLevel()) {<br />        case SEVERE:<br />            logger.error(sessionLogEntry.getMessage());<br />            break;<br />        case WARNING:<br />            logger.warn(sessionLogEntry.getMessage());<br />            break;<br />        case INFO:<br />            logger.info(sessionLogEntry.getMessage());<br />            break;<br />        case FINE:<br />        default:<br />            logger.debug(sessionLogEntry.getMessage());<br />        }<br />    }<br />    <br />}<br /></pre><br />然後在 persistence.xml 的 propertiese 中加上:<br /><pre class="brush:xml">&lt;property name=&quot;eclipselink.logging.logger&quot; value=&quot;com.ctlok.pro.log.MyEclipseLinkLogger &quot;/&gt;<br /></pre><br />這樣就可以令 <b>EclipseLink</b> 使用自訂的 <b>Logger</b> 去打印日誌了。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5255208762444246598?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP CodeIgniter 根據瀏覽器語言來顯示語言]]></title>
    <link href="http://pro.ctlok.com/2011/12/php-codeigniter-i18n-browser-locale.html"/>
    <updated>2011-12-18T16:48:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/12/php-codeigniter-i18n-browser-locale</id>
    <content type="html"><![CDATA[<a href="http://smashingweb.ge6.org/wp-content/uploads/2009/08/codeigniter-lg.gif" imageanchor="1" style=""><img border="0" height="200" width="200" src="http://smashingweb.ge6.org/wp-content/uploads/2009/08/codeigniter-lg.gif" /></a><br /><br /><br />近排為客戶製作一個網頁，因為客戶已經買下了虛擬主機空間，不能用 <b>Java</b> 去作 <b>Server side language</b>，只好使用 <b>PHP + CodeIgniter</b>。他要求有轉換語言的功能，但發覺 <b>CodeIgniter</b> 本身的 <b>i18n</b> 功能不太完善，只好自己製作一個。<br /><br />這個 <b>i18n</b> 有點像 <b>JSF</b> 的<b>i18n</b> 功能，是根據用戶的瀏覽器語言來判定顯示那一種語言，並且對 <b>Controller</b> 控制語言的程式碼減少(可以 1 行程式碼也不用寫就能夠自動設換各種語言)。這可以減少重複的程式碼和減低 <b>Controller</b> 的複雜性。<br /><br />我己經將這個 <b>Library</b> 放上 <b>github</b> 了，有興趣可以下載來試試 <a href="https://github.com/lawrence0819/php-ci-internationalization">https://github.com/lawrence0819/php-ci-internationalization</a>。<br /><br />以下就是 <b>I18n.php (Core)</b>，放到 <b>application/libraries/I18n.php</b>。<br /><pre class="brush:php">&lt;?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');<br /><br />/**<br /> * I18n class<br /> *<br /> * @package     CodeIgniter<br /> * @subpackage  Libraries<br /> * @category    Libraries<br /> * @author      Lawrence Cheung<br /> * @version     1.0<br /> * @link        https://github.com/lawrence0819<br /> */<br />class I18n{<br />    <br />    protected $CI;<br />    protected $auto = TRUE;<br />    protected $loaded = FALSE;<br />    protected $locale;<br />    <br />    /**<br />     * Constructor - get CI instance<br />     *<br />     */<br />    public function __construct(){<br />        $this -&gt; CI = get_instance(); <br />    }<br />    <br />    /**<br />     * Auto load language for CI HOOK<br />     *<br />     * @access  public<br />     * @return  void<br />     */<br />    public function auto_load_language(){<br />        if ($this -&gt; auto){<br />            $this -&gt; load_language();<br />        }<br />    }<br />    <br />    /**<br />     * Manual load language file<br />     *<br />     * @access  public<br />     * @return  void<br />     */<br />    public function load_language() {<br />        $lang = $this -&gt; get_current_locale();<br />        $language = $this -&gt; get_language_config();<br />        <br />        if (!$this -&gt; loaded) {<br />            $files = $language['files'];<br />            $locale = $language['locale'];<br /><br />            if (array_key_exists($lang, $locale)) {<br />                $folder = $locale[$lang];<br />            } else {<br />                $shortLang = substr($lang, 0, 2);<br />                if (array_key_exists($shortLang, $locale)) {<br />                    $folder = $locale[$shortLang];<br />                } else {<br />                    $folder = $locale['default'];<br />                }<br />            }<br /><br />            foreach ($files as $file) {<br />                $this -&gt; CI -&gt; lang -&gt; load($file, $folder);<br />            }<br />            <br />            $this -&gt; loaded = TRUE;<br />        }<br />    }<br />    <br />    /**<br />     * Prevent CI Hook to auto load language file<br />     *<br />     * @access  public<br />     * @return  void<br />     */<br />    public function prevent_auto(){<br />        $this -&gt; auto = FALSE;<br />    }<br />    <br />    /**<br />     * Set current user locale and save locale to cookies<br />     *<br />     * @access  public<br />     * @Param   string      the locale string: en-US, en-UK, zh-TW, zh-CN<br />     * @Param   integer     the cookies value expire time, default is 30 day<br />     * @Param   string      cookies key<br />     * @return  void<br />     */<br />    public function set_current_locale($locale, $expire = 259200, $cookie_key = 'locale') {<br />        setcookie($cookie_key, $locale, time() + $expire);<br />        $this -&gt; locale = $locale;<br />    }<br />    <br />    /**<br />     * Get current user locale<br />     *<br />     * @access  public<br />     * @Param   string      cookies key, if you changed the key at set_current_locale, please assign it<br />     * @return  string<br />     */<br />    public function get_current_locale($cookie_key = 'locale') {<br />        if (!$this -&gt; locale){<br />            if (isset($_COOKIE[$cookie_key])) {<br />                $lang = $_COOKIE[$cookie_key];<br />            } else {<br />                if (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {<br />                    $lang = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 5);<br />                } else {<br />                    $language = $this -&gt; get_language_config();<br />                    $lang = $language['default_locale'];<br />                }<br />            }<br />            $this -&gt; locale = $lang;<br />        }<br />        return $this -&gt; locale;<br />    }<br />    <br />    /**<br />     * Get configuration values<br />     *<br />     * @access  default<br />     * @return  array<br />     */<br />    function get_language_config(){<br />        $this -&gt; CI -&gt; config -&gt; load('i18n');<br />        return $this -&gt; CI -&gt; config -&gt; item('language');<br />    }<br />    <br />}<br /><br />/* End of file I18n.php */<br />/* Location: ./application/libraries/I18N.php */<br /></pre><br />以下的是所需要的設定檔案 <b>i18n.php (Core)</b>，放到 <b>application/config/i18n.php</b>。<br /><pre class="brush:php">&lt;?php if (!defined('BASEPATH')) exit('No direct script access allowed');<br /><br />/**<br /> * I18n library configuration file<br /> *<br /> * @package     CodeIgniter<br /> * @subpackage  Libraries<br /> * @category    Libraries<br /> * @author      Lawrence Cheung<br /> * @version     1.0<br /> * @link        https://github.com/lawrence0819<br /> */<br /><br />//Add file in this array, if you want I18n library auto load them<br />$config['language']['files'] = array('messages');<br /><br />//If user locale not found, set this valus as a defaul user locale<br />$config['language']['default_locale'] = 'en';<br /><br />//Default language folder, if locale folder not found<br />$config['language']['locale']['default'] = 'tchinese';<br /><br />//zh-CN locale mapped to schinese folder<br />$config['language']['locale']['zh-CN'] = 'schinese';<br /><br />//zh-TW locale mapped to tchinese folder<br />$config['language']['locale']['zh-TW'] = 'tchinese';<br /><br />//en locale mapped to schinese folder<br />$config['language']['locale']['en'] = 'english';<br /><br />/* End of file i18n.php */<br />/* Location: ./application/config/i18n.php */<br /></pre><br />英文語言檔 <b>messages_lang.php</b>，放到 <b>application/language/english/messages_lang.php</b><br /><pre class="brush:php">&lt;?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');<br /><br />$lang['site_name'] = 'Example site';<br />$lang['message'] = 'Hello World!';<br /><br />/* End of file messages_lang.php */<br />/* Location: ./application/language/english/messages_lang.php */<br /></pre><br />正體中文語言檔 <b>messages_lang.php</b>，放到 <b>application/language/tchinese/messages_lang.php</b><br /><pre class="brush:php">&lt;?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');<br /><br />$lang['site_name'] = '範例網站';<br />$lang['message'] = '世界，你好！';<br /><br />/* End of file messages_lang.php */<br />/* Location: ./application/language/tchinese/messages_lang.php */<br /></pre><br />簡體中文語言檔 <b>messages_lang.php</b>，放到 <b>application/language/schinese/messages_lang.php</b><br /><pre class="brush:php">&lt;?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');<br /><br />$lang['site_name'] = '范例网站';<br />$lang['message'] = '世界，你好！';<br /><br />/* End of file messages_lang.php */<br />/* Location: ./application/language/schinese/messages_lang.php */<br /></pre><br /><br />設定就完成了，如果你有更多語言或不使用 <b>english</b>，<b>tchinese</b>，<b>schinese</b> 的名稱，請更改 <b>application/config/i18n.php</b>。<br /><br /><br />使用方法如下:<br /><br />手動選擇語言的 <b>Controller</b>:<br /><pre class="brush:php">&lt;?php if (!defined('BASEPATH')) exit('No direct script access allowed');<br /><br />class I18nmanual extends CI_Controller{<br /><br />    public function __construct(){<br />        parent::__construct();<br />        $this -&gt; load -&gt; library('i18n');<br />    }<br />    <br />    public function index(){<br />        $this -&gt; i18n -&gt; load_language();<br />        $this -&gt; load -&gt; view('i18ntest');<br />    }<br />    <br />}<br /><br />/* End of file i18nmanual.php */<br />/* Location: ./application/controller/i18nmanual.php */<br /></pre><br /><b>View</b>:<br /><pre class="brush:php">&lt;html&gt;<br />    &lt;head&gt;<br />        &lt;title&gt;&lt;?php echo $this-&gt;lang-&gt;line('site_name'); ?&gt;&lt;/title&gt;<br />    &lt;/head&gt;<br />    &lt;body&gt;<br />        &lt;?php echo $this-&gt;lang-&gt;line('message'); ?&gt;<br />    &lt;/body&gt;<br />&lt;/html&gt;<br /></pre><br />將會見到和 <b>Browser</b> 相對應的語言。<br /><br />如果覺得要在 __construct 內加上<br /><pre class="brush:php">$this -&gt; load -&gt; library('i18n');<br /></pre><br />太麻煩，可以在 <b>application/config/autoload.php</b> 自動載入 <b>i18n library</b>:<br /><pre class="brush:php">$autoload['libraries'] = array('i18n');<br /></pre><br />開啟全自動的功能要先在 <b>application/config/config.php</b> 更改以下程式碼:<br /><pre class="brush:php">$config['enable_hooks'] = TRUE;<br /></pre><br />再將 <b>application/config/hooks.php</b> 加入以下程式碼:<br /><pre class="brush:php">$hook['post_controller_constructor'][] = array(<br />                                'class'    =&gt; 'I18n',<br />                                'function' =&gt; 'auto_load_language',<br />                                'filename' =&gt; 'I18n.php',<br />                                'filepath' =&gt; 'libraries'<br />                                );<br /></pre><br /><b>Controller</b>:<br /><pre class="brush:php">&lt;?php if (!defined('BASEPATH')) exit('No direct script access allowed');<br /><br />class I18nauto extends CI_Controller{<br /><br />    public function __construct(){<br />        parent::__construct();<br />        $this -&gt; load -&gt; library('i18n');<br />    }<br />    <br />    public function index(){<br />        $this -&gt; load -&gt; view('i18ntest');<br />    }<br />    <br />}<br /><br />/* End of file i18nauto.php */<br />/* Location: ./application/controller/i18nauto.php */<br /></pre><br />如果有設定自動載入 <b>i18n library</b>，就連 <b>__construct</b> 也不需要。<br /><br />如果開啟了全自動的功能，但有些 <b>Controller</b> 又不想自動選擇語言，可以在 <b>__construct</b> 加上:<br /><pre class="brush:php">&lt;?php if (!defined('BASEPATH')) exit('No direct script access allowed');<br /><br />class I18nmanual extends CI_Controller{<br /><br />    public function __construct(){<br />        parent::__construct();<br />        $this -&gt; load -&gt; library('i18n');<br />        //prevent auto load language<br />        $this -&gt; i18n -&gt; prevent_auto();<br />    }<br />    <br />    public function index(){<br />        $this -&gt; i18n -&gt; set_current_locale('zh-TW');<br />        $this -&gt; i18n -&gt; load_language();<br />        $this -&gt; load -&gt; view('i18ntest');<br />    }<br />    <br />}<br /><br />/* End of file i18nmanual.php */<br />/* Location: ./application/controller/i18nmanual.php */<br /></pre><br />一經切換的語系，就會自動將此更改儲存到 <b>Cookies</b>，下一次就會以 <b>Cookies</b> 的語系來選擇語言檔。<br /><br />說明完畢，有什麼問題可以留言給我。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5619452461244676124?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[放棄 Google App Engine 轉投 Amazon Web Service]]></title>
    <link href="http://pro.ctlok.com/2011/10/gae-aws.html"/>
    <updated>2011-10-25T18:06:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/10/gae-aws</id>
    <content type="html"><![CDATA[自從 <b>Google App Engine</b> 轉換收費模式後，已經計劃將現有的 <b>Project</b> 放到 <b>Amazon Web Service</b> 上，以前選用 <b>GAE</b> 的原因是因為便宜，而且有免費使用量。雖然限制很多，但我並不介意這些限制。例如將現有的 <b>Application</b> 移植到上 <b>GAE</b> 上是一件非常痛苦的事，<b>JPA</b> 有一大堆東西不能用，大部份 <b>Entity</b> 要重新規劃，資料移植又是另一件痛苦的事。因為每一個 <b>HTTP Request</b> 也有 30 秒限制，上傳檔案又要另外寫一次。因為價錢便宜，我不介意改。<br /><br />現在 <b>GAE</b> 有新的收費模式，不是以前只計 <b>CPU Hour</b> 的方式，是一個小時一個小時地計算。向 <b>Datasource</b> 存取資料又另外收費，新的收費模式:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-EJYNRtkgUws/TqaCTBMCXnI/AAAAAAAAA5M/68-DSN20SMk/s1600/Google%2Bcloud%2Bservices%2B%25E2%2580%2593%2BApp%2BEngine.png" imageanchor="1" style=""><img border="0" height="357" width="400" src="http://3.bp.blogspot.com/-EJYNRtkgUws/TqaCTBMCXnI/AAAAAAAAA5M/68-DSN20SMk/s400/Google%2Bcloud%2Bservices%2B%25E2%2580%2593%2BApp%2BEngine.png" /></a></div><br />新的收費模式很像 <b>Amazon Web Service</b>，我最不能接受的是 <b>GAE</b> 也跟 <b>AWS EC2</b> 以小時計算費用，<b>EC2</b> 收費如下:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-xGJOT4CKWDI/TqaEhWPZ77I/AAAAAAAAA5Y/XAQWvmUiCYM/s1600/Amazon%2BElastic%2BCompute%2BCloud%2B%2528Amazon%2BEC2%2529.png" imageanchor="1" style=""><img border="0" height="291" width="400" src="http://3.bp.blogspot.com/-xGJOT4CKWDI/TqaEhWPZ77I/AAAAAAAAA5Y/XAQWvmUiCYM/s400/Amazon%2BElastic%2BCompute%2BCloud%2B%2528Amazon%2BEC2%2529.png" /></a></div><br /><b>EC2</b> 一個小型 <b>(Small) Virtual Machine</b> 一小時才 <b>$0.085 USD</b>，<b>GAE</b> 一小時也要 <b>$0.080 USD</b>，但 <b>GAE</b> 的 <b>Virtual Machine</b> 全自動起動的，即是說你不能控制機器數目，雖然你可以設定 <b>Max Idle Instances</b> 數目，但系統在需要時也一樣會新增比你設定的最大數目還多的機器 (我試過好幾次)。如果你起動了 2 台機器，就是 <b>$0.080 USD * 2</b>，一小時收費 <b>$ 0.16 USD</b>。<b>EC2</b> 是可以一台機器放置多個 應用程式，而 <b>GAE</b> 只可以一台機器放置一個應用程式，還是 <b>EC2</b> 比較化算。<br /><br />最後如果你仍然選擇留守 <b>GAE</b>，這裡有幾個方法可幫助你省錢:<br /><br />1. 在 <b>appengine-web.xml</b> 加上:<br /><pre class="brush: xml">&lt;threadsafe&gt;true&lt;/threadsafe&gt;<br /></pre><br />可以令你的機器同時處理多個請求 <b>(Request)</b><br /><br />2. 設定 <b>Max Idle Instances</b> 令 <b>GAE</b> 盡量不起動超過這個數量的機器<br />3. 設定 <b>Min Pending Latency</b> 在機器處理一個請求超過這一個時間才新增機器 (其實我覺得這個設定很雞肋，每一個請求時間也不一樣，又不可以設定太高，亦不能設定太低)<br />4. 盡量用多一點 <b>Cache</b> ，減少存取 <b>Datasource</b><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5183712475670212955?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Google Closure Compiler 在執行期間壓縮 Javascript]]></title>
    <link href="http://pro.ctlok.com/2011/10/closure-compiler-run-time-compress.html"/>
    <updated>2011-10-21T14:16:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/10/closure-compiler-run-time-compress</id>
    <content type="html"><![CDATA[趁有空又寫寫文章，今次介紹的是 <b>Google Closure Compiler</b>，其實之前已經介紹過一次: <a href="http://pro.ctlok.com/2010/01/javascript_22.html">線上 <b>Javascript</b> 工具</a>，這個工具可以將 <b>Javascript</b> 的大小大幅降低。<br /><br />使用線上工具去壓縮有一個缺點就是要將 <b>Javascript</b> 檔案儲存成 <b>2</b> 份，1 份是原始檔案，另 1 份是經壓縮內容的 <b>Javascript</b>，因為不可能更改經壓縮過的內容，每一次更改檔案就需要更改原始檔案，然後利用 <b>Google Closure Compiler</b> 線上工具再壓縮一次，再更新壓縮內容，而且經壓縮的 <b>Javascript</b> 在瀏覽器 <b>debug</b> 亦比較困難。雖然你可以在 <b>HTML</b> 將引入的 <b>Javascript</b> 檔案改為未經壓縮然後 <b>debug</b>，但萬一忘記改回就麻煩了。<br /><br />幸好 <b>Google Closure Compiler</b> 有提供到 <b>Java</b> 使用的 <b>API</b> 來達到執行期間 <b>(Run Time)</b> 將 <b>Javascript</b> 壓縮。<br /><br />首先到 <b>Google Code</b> 下載: <a href="http://code.google.com/p/closure-compiler/downloads/list">Google Closure Compiler</a><br /><br />可用以下其中一個方法去壓縮:<br /><pre class="brush: java">protected String compress(InputStream inputStream) throws IOException{<br />    Compiler compiler = new Compiler();<br />    <br />    CompilerOptions options = new CompilerOptions();<br />    CompilationLevel.SIMPLE_OPTIMIZATIONS<br />            .setOptionsForCompilationLevel(options);<br />    <br />    JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot; &quot;);<br />    JSSourceFile input = JSSourceFile.fromInputStream(&quot;origin.js&quot;, inputStream);<br />    compiler.compile(extern, input, options);<br />    <br />    return compiler.toSource();<br />}<br /><br />protected String compress(String str) throws IOException{<br />    Compiler compiler = new Compiler();<br />    <br />    CompilerOptions options = new CompilerOptions();<br />    CompilationLevel.SIMPLE_OPTIMIZATIONS<br />            .setOptionsForCompilationLevel(options);<br />    <br />    JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot; &quot;);<br />    JSSourceFile input = JSSourceFile.fromCode(&quot;origin.js&quot;, str);<br />    compiler.compile(extern, input, options);<br />    <br />    return compiler.toSource();<br />}<br /></pre><br />其中 CompilationLevel 分別有 3 個選項:<br /><ul><li>CompilationLevel.WHITESPACE_ONLY</li><li>CompilationLevel.SIMPLE_OPTIMIZATIONS</li><li>CompilationLevel.ADVANCED_OPTIMIZATIONS</li></ul><br /><b>WHITESPACE_ONLY</b> 只會移除 <b>Javascript</b> 的空白。<br /><br /><b>SIMPLE_OPTIMIZATIONS</b> 是最常用的一種，移除 <b>Javascript</b> 的空白，而且將一些 <b>Local Variable</b> 或 <b>Local Function</b> 名稱改變，並將一些沒有用到的 <b>Variable</b> 移除，大幅提高 <b>Javascript</b> 的壓縮率。<br /><br /><b>ADVANCED_OPTIMIZATIONS</b> 是最高壓縮率的模式，將所有 <b>Variable</b> 或 <b>Function</b> 的名稱改變，有使用 <b>Javascript Framework</b> 不建議使用這個選項。<br /><br />在真實環境中我們可以加入一個 <b>Filter</b> 去將 <b>Javascript</b> 壓縮:<br /><pre class="brush: js">package com.ctlok.pro.filter;<br /><br />import java.io.IOException;<br />import java.io.InputStream;<br />import java.util.HashMap;<br />import java.util.Map;<br />import java.util.logging.Level;<br /><br />import javax.servlet.Filter;<br />import javax.servlet.FilterChain;<br />import javax.servlet.FilterConfig;<br />import javax.servlet.ServletException;<br />import javax.servlet.ServletRequest;<br />import javax.servlet.ServletResponse;<br />import javax.servlet.http.HttpServletRequest;<br />import javax.servlet.http.HttpServletResponse;<br /><br />import com.google.javascript.jscomp.CompilationLevel;<br />import com.google.javascript.jscomp.Compiler;<br />import com.google.javascript.jscomp.CompilerOptions;<br />import com.google.javascript.jscomp.JSSourceFile;<br />import com.google.javascript.jscomp.WarningLevel;<br /><br />public class ClosureCompilerFilter implements Filter {<br /><br />    //for cache<br />    private final Map&lt;String, String&gt; compressedJs = new HashMap&lt;String, String&gt;();<br />    private FilterConfig filterConfig;<br />    <br />    public void init(FilterConfig filterConfig) throws ServletException {<br />        this.filterConfig = filterConfig;<br />        <br />        //Turn off the compiler log<br />        Compiler.setLoggingLevel(Level.OFF);<br />    }<br /><br />    public void destroy() {<br /><br />    }<br /><br />    public void doFilter(ServletRequest request, ServletResponse response,<br />            FilterChain chain) throws IOException, ServletException {<br />        <br />        HttpServletRequest req = (HttpServletRequest) request;<br />        HttpServletResponse resp = (HttpServletResponse) response;<br />        <br />        String uri = req.getRequestURI();<br />        <br />        //Prevent compress the compressed Javascript, such as jquery.min.js, mootools.min.js, etc.<br />        if (!uri.matches(&quot;.*\\.min\\.js$&quot;)){<br />            String js = null;<br />            <br />            if (compressedJs.containsKey(uri)){<br />                //get from cache<br />                js = compressedJs.get(uri);<br />            }else{<br />                String contextPath = req.getContextPath();<br />                String jsPath = uri.substring(contextPath.length());<br />                <br />                //get javascript file as stream<br />                //getResourceAsStream cannot include context path<br />                InputStream inputStream = filterConfig.getServletContext().getResourceAsStream(jsPath);<br />                js = compress(inputStream);<br />                <br />                //put to cache<br />                compressedJs.put(uri, js);<br />            }<br />            <br />            resp.getWriter().write(js);<br />            return;<br />        }<br />        <br />        chain.doFilter(request, response);<br />    }<br />    <br />    protected String compress(InputStream inputStream) throws IOException{<br />        Compiler compiler = new Compiler();<br />        <br />        CompilerOptions options = new CompilerOptions();<br />        CompilationLevel.SIMPLE_OPTIMIZATIONS<br />                .setOptionsForCompilationLevel(options);<br />        WarningLevel.QUIET.setOptionsForWarningLevel(options);<br />        <br />        JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot;&quot;);<br />        JSSourceFile input = JSSourceFile.fromInputStream(&quot;origin.js&quot;, inputStream);<br />        compiler.compile(extern, input, options);<br /><br />        return compiler.toSource();<br />    }<br /><br />}<br /></pre><br />在 web.xml 加上:<br /><pre class="brush: xml">&lt;filter&gt;<br />    &lt;display-name&gt;ClosureCompilerFilter&lt;/display-name&gt;<br />    &lt;filter-name&gt;ClosureCompilerFilter&lt;/filter-name&gt;<br />    &lt;filter-class&gt;com.ctlok.pro.filter.ClosureCompilerFilter&lt;/filter-class&gt;<br />&lt;/filter&gt;<br />&lt;filter-mapping&gt;<br />    &lt;filter-name&gt;ClosureCompilerFilter&lt;/filter-name&gt;<br />    &lt;url-pattern&gt;*.js&lt;/url-pattern&gt;<br />&lt;/filter-mapping&gt;<br /></pre><br />這樣就可以令到 <b>.js</b> 結尾的 <b>Javascript</b> 檔案經壓縮再傳出去，又不會將 <b>.min.js</b> 已經壓縮過的 <b>Javascript</b> 又再壓縮一次。<br />經過壓縮後會儲存在 <b>Map</b> 內，畢竟壓縮的時間也不短。<br /><br />例如我有一個 /js/myjs.js 的檔案:<br /><pre class="brush: js">function ctlok() {<br />    var self = this;<br />    var $ = jQuery;<br /><br />     this.publicFunction = function() {<br />           localFunction();<br />      };<br /><br />     var localFunction = function() {<br />          var aaaaa = &#39;aaaaa&#39;;<br />          $(&#39;:input&#39;).val(aaaaa);<br />     };<br />}<br /></pre><br />經壓縮後變成:<br /><pre class="brush: js">function ctlok(){var a=jQuery;this.publicFunction=function(){a(&quot;:input&quot;).val(&quot;aaaaa&quot;)}};<br /></pre><br />範例下載:: <a href="https://sites.google.com/site/lawrencespace/lawpronotes/download/Google-Closure-Compiler.zip">Google-Closure-Compiler.zip</a><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-3261921414800777822?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[試用 Google Cloud SQL]]></title>
    <link href="http://pro.ctlok.com/2011/10/google-cloud-sql.html"/>
    <updated>2011-10-12T15:25:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/10/google-cloud-sql</id>
    <content type="html"><![CDATA[<br /><b>Google</b> 剛剛出的新服務 - <b>Google Cloud SQL</b>，可能有太多人抱怨認為 <b>Google App Engine</b> 的 <b>Datastore</b> 太難用，而且現有的 <b>App</b> 移植到 <b>Google App Engine</b> 最大問題也是 <b>Datastore</b>。傳統的應用程式大多數使用 <b>Relational Database Management System (RDBMS)</b> 關聯式資料庫管理系統作為儲存資料的系統，但 RDBMS 是比較難去擴展整個系統，起初可以靠升級系統硬件去加強效能，但硬件升級愈高，性價比愈低。而 <b>Google App Engine</b> 的 <b>Datastore</b> 是 <b>NoSQL Database</b>，擴展系統是一件很容易的事，可以買 5 台中級機器去組成整個系統，不夠可以再加上去，可以無限地伸延 (理論上)。<b>NoSQL Database</b> 是沒有 <b>Join Table</b> 之類的語法，你只能靠應用程式層面實現 <b>Join Table</b>，這會提高應用程式開發難度。<br /><br /><b>Google Cloud SQL</b> 是用來解決傳統的應用程式移植或對使用 <b>RDBMS</b> 有開發經驗的程式員有多一個選擇。而 <b>Google Cloud SQL</b> 底層是使用 <b>MySQL</b> 實作的。<br /><br />打開 <b>Google Cloud SQL</b> 的 <b>Console</b> 是這個樣子:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-AFL_B5qOkts/TpU1gdRFDbI/AAAAAAAAA2w/w9ChEdPHgbA/s1600/Google%2BAPIs%2BConsole.png" imageanchor="1"><img border="0" height="271" src="http://2.bp.blogspot.com/-AFL_B5qOkts/TpU1gdRFDbI/AAAAAAAAA2w/w9ChEdPHgbA/s400/Google%2BAPIs%2BConsole.png" width="400" /></a></div>而容量方面有三個選擇，分別是 <b>1GB, 5GB</b> 和 <b>10GB</b><br /><div class="separator" style="clear: both; text-align: center;"><br /><a href="http://2.bp.blogspot.com/-GwMRdzzAYHc/TpU13HyeQsI/AAAAAAAAA28/JmzTqt_Vp-8/s1600/create.png" imageanchor="1"><img border="0" height="259" src="http://2.bp.blogspot.com/-GwMRdzzAYHc/TpU13HyeQsI/AAAAAAAAA28/JmzTqt_Vp-8/s400/create.png" width="400" /></a></div>試試新增一個 <b>MySQL Instance</b> (暫時只有 <b>Google App Engine</b> 可以存取到，只需加入 <b>GAE</b> 的 <b>ID</b> 就可以了):<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-Iv86h1Z3L2U/TpU2Jl8OyMI/AAAAAAAAA3I/orPzKAOFaCg/s1600/create2png.png" imageanchor="1"><img border="0" height="259" src="http://4.bp.blogspot.com/-Iv86h1Z3L2U/TpU2Jl8OyMI/AAAAAAAAA3I/orPzKAOFaCg/s400/create2png.png" width="400" /></a></div><br />處理中:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-IxvqvjC8jpY/TpU2m2NxVFI/AAAAAAAAA3U/FJl6SQ7Y9sU/s1600/proccess.png" imageanchor="1"><img border="0" height="259" src="http://4.bp.blogspot.com/-IxvqvjC8jpY/TpU2m2NxVFI/AAAAAAAAA3U/FJl6SQ7Y9sU/s400/proccess.png" width="400" /></a></div><br />完成後看一看 <b>Log</b>:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-LjLRu5ATrJA/TpU255TptoI/AAAAAAAAA3g/bNREUDBB72Y/s1600/log.png" imageanchor="1"><img border="0" height="243" src="http://4.bp.blogspot.com/-LjLRu5ATrJA/TpU255TptoI/AAAAAAAAA3g/bNREUDBB72Y/s400/log.png" width="400" /></a></div><br />再到 <b>Prompt</b> 看看:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-49KpC4a39f0/TpU3Fnw6LqI/AAAAAAAAA3s/qnBGRoU4PGI/s1600/prompt.png" imageanchor="1"><img border="0" height="259" src="http://4.bp.blogspot.com/-49KpC4a39f0/TpU3Fnw6LqI/AAAAAAAAA3s/qnBGRoU4PGI/s400/prompt.png" width="400" /></a></div><br />新增一個 <b>Database</b>，命名為 <b>mydb</b>:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-I9VIUW3JCT4/TpU3hqVeZ2I/AAAAAAAAA34/10YramRrLy0/s1600/create%2Bdb.png" imageanchor="1"><img border="0" height="259" src="http://4.bp.blogspot.com/-I9VIUW3JCT4/TpU3hqVeZ2I/AAAAAAAAA34/10YramRrLy0/s400/create%2Bdb.png" width="400" /></a></div><br />再新增一個 <b>Table</b> 命名為 <b>User:</b><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-r-8wljKeA54/TpU4nTtEIlI/AAAAAAAAA4E/JzBBbwSHiFg/s1600/create%2Buser.png" imageanchor="1"><img border="0" height="243" src="http://1.bp.blogspot.com/-r-8wljKeA54/TpU4nTtEIlI/AAAAAAAAA4E/JzBBbwSHiFg/s400/create%2Buser.png" width="400" /></a></div><br />我發現每一次只可以輸入一行指令，有分號隔著也不行，希望遲點會改善。<br />當然 <b>Google Cloud SQL</b> 有提供 <b>Import</b> 的功能，但檔案一定要存放在 <b>Google Cloud Storage</b> 上。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-i504Lpps5q4/TpU7RL21tbI/AAAAAAAAA4c/NBmd8t3NNmg/s1600/import.png" imageanchor="1"><img border="0" height="243" src="http://1.bp.blogspot.com/-i504Lpps5q4/TpU7RL21tbI/AAAAAAAAA4c/NBmd8t3NNmg/s400/import.png" width="400" /></a></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-kDvbhJ22Js0/TpU7fXmKaeI/AAAAAAAAA4o/uAjXgZ-Be78/s1600/import-sql.png" imageanchor="1"><img border="0" height="243" src="http://3.bp.blogspot.com/-kDvbhJ22Js0/TpU7fXmKaeI/AAAAAAAAA4o/uAjXgZ-Be78/s400/import-sql.png" width="400" /></a></div><br /><br /><b>Import</b> 成功後就試試旗選取一埋資料:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-hVGDFOcJiSg/TpU82Jy9o4I/AAAAAAAAA40/quEBAuWWfiM/s1600/select%2Bcustomers.png" imageanchor="1" style=""><img border="0" height="400" width="116" src="http://1.bp.blogspot.com/-hVGDFOcJiSg/TpU82Jy9o4I/AAAAAAAAA40/quEBAuWWfiM/s400/select%2Bcustomers.png" /></a></div><br />再試試 <b>Join Table</b>:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-6nsvacH9BV0/TpU93-bZ4wI/AAAAAAAAA5A/SDrou4QGvHU/s1600/join%2Btable%2Border%2Border%2Bdetail.png" imageanchor="1" style=""><img border="0" height="400" width="74" src="http://4.bp.blogspot.com/-6nsvacH9BV0/TpU93-bZ4wI/AAAAAAAAA5A/SDrou4QGvHU/s400/join%2Btable%2Border%2Border%2Bdetail.png" /></a></div><br />一樣沒有問題。<br /><br /><b>SQL</b> 檔案: <a href="https://sites.google.com/site/lawrencespace/lawpronotes/download/sampledatabase.sql">sampledatabase.sql</a><br /><br />要申請 <b>Google Cloud SQL</b> 可到 <a href="https://code.google.com/apis/console/">https://code.google.com/apis/console/</a>，然後選取 <b>Service</b> 再在 <b>Google Cloud SQL</b> 按一下 <b>Request access</b>，填好表格後就等 <b>Google</b> 回覆就可以用了 (我是等了兩天才有回覆)。<br />遲一點再在 <b>GAE</b> 上試用。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-8575963009302117038?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guice + Jersey 打造 RESTful 應用程式]]></title>
    <link href="http://pro.ctlok.com/2011/09/guice-jersey-restful-application.html"/>
    <updated>2011-09-08T14:46:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/09/guice-jersey-restful-application</id>
    <content type="html"><![CDATA[以前我喜歡使用 <b>Spring + Spring Web MVC</b> 來打造 <b>RESTful</b> 應用程式，但 <b>Spring</b> 的起動有點慢，如果放上 <b>Google App Engine</b> 上經常令用戶等待很久才載入到頁面。<br /><br />今次選用了 <b>Guice + Jersey</b> 的組合。<b>Guice</b> 是一個輕量級的容器，設定上比起 <b>Spring</b> 更簡單，起動或注入速度亦比 <b>Spring</b> 快。而 <b>Jersey</b> 則是一個為 <b>RESTful web service</b> 而設的一個 <b>Framework</b>。<br /><br /><b>Gucie</b> 官方網址: <a href="http://code.google.com/p/google-guice/">http://code.google.com/p/google-guice/</a><br /><b>Jersey</b> 官方網址: <a href="http://jersey.java.net/">http://jersey.java.net/</a><br /><br />因為手上的電腦沒有安裝 <b>Application Server</b>，只好拿 <b>GAE</b> 的 <b>Development Server</b> 來測試。<br /><br />首先下載 <b>Guice</b> : <a href="http://code.google.com/p/google-guice/downloads/detail?name=guice-3.0.zip&can=2&q=">http://code.google.com/p/google-guice/downloads/detail?name=guice-3.0.zip&can=2&q=</a> (現時為止最新版本為 3.0)<br /><br />打開後將 <b>aopalliance.jar, guice-3.0.jar, guice-servlet-3.0.jar</b> 和 <b>javax.inject.jar</b> 加到 <b>WEB-INF/lib</b> 中並加到 <b>Class path</b>。<br /><br />然後下載 <b>Jersey</b> 所需的 <b>Jar</b> (現時為止最新版本為 1.9):<br /><ol><li><a href="https://maven.java.net/service/local/artifact/maven/redirect?r=releases&g=com.sun.jersey&a=jersey-server&v=1.9&e=jar">jersey-server.jar</a></li><li><a href="https://maven.java.net/service/local/artifact/maven/redirect?r=releases&g=com.sun.jersey&a=jersey-core&v=1.9&e=jar">jersey-core.jar</a></li><li><a href="http://repo1.maven.org/maven2/asm/asm/3.1/asm-3.1.jar">asm.jar</a></li><li><a href="http://download.java.net/maven/2/com/sun/jersey/contribs/jersey-guice/1.9-SNAPSHOT/jersey-guice-1.9-SNAPSHOT.jar">jersey-guice-1.9-SNAPSHOT.jar</a></li></ol><br />將以上的檔案一樣是放到 WEB-INF/lib 並加到 <b>Class path</b>。<br /><br />首先建立一個 <b>class</b>，每一次連接 <b>http://www.xyzdomainname.com</b> 都會顯示 <b>I am Index page</b>:<br /><pre class="brush: java">package com.ctlok.pro.controller;<br /><br />import javax.ws.rs.GET;<br />import javax.ws.rs.Path;<br />import javax.ws.rs.Produces;<br />import javax.ws.rs.core.MediaType;<br /><br />@Path(&quot;/&quot;)<br />public class CommonController {<br /><br />    @GET<br />    @Produces(MediaType.TEXT_PLAIN)<br />    public String index(){<br />        return &quot;I am Index page&quot;;<br />    }<br />    <br />}<br /></pre><br /><b>@Path</b> 是設定這個 <b>class</b> 會處理的 <b>URL</b>，可以放在 <b>Class</b> 或 <b>Method</b>。而 <b>Jersey</b> 會搜尋出在 <b>Class</b> 上有 <b>@Path</b> 的類別然後處理。<br /><b>@GET</b> 是設定這個 <b>Method</b> 處理那一種請求，一共有 5 種方式: <b>GET, POST, HEAD, PUT, DELETE</b>。<br /><b>@Produces</b> 則是回傳資料的類型，可以是 Text, XML, JSON, HTML 等等。<br /><br />然後再去建立一個 <b>Guice</b> 的 <b>Module class</b> 並設定 <b>Jersey</b>:<br /><pre class="brush:java">package com.ctlok.pro;<br /><br />import java.util.HashMap;<br />import java.util.Map;<br /><br />import com.ctlok.pro.controller.CommonController;<br />import com.google.inject.servlet.RequestScoped;<br />import com.google.inject.servlet.ServletModule;<br />import com.sun.jersey.guice.spi.container.servlet.GuiceContainer;<br /><br />public class WebModule extends ServletModule {<br /><br />    @Override<br />    protected void configureServlets(){<br />        bind(CommonController.class).in(RequestScoped.class);<br />        <br />        Map&lt;String, String&gt; parameters = new HashMap&lt;String, String&gt;(); <br />        parameters.put(&quot;com.sun.jersey.config.property.packages&quot;, &quot;com.ctlok.pro.controller&quot;);<br />        serve(&quot;/*&quot;).with(GuiceContainer.class, parameters);<br />    }<br />    <br />}<br /></pre><br />然後設定 <b>Guice</b> 起動時的注入器:<br /><pre class="brush: java">package com.ctlok.pro;<br /><br />import com.google.inject.Guice;<br />import com.google.inject.Injector;<br />import com.google.inject.servlet.GuiceServletContextListener;<br /><br />public class AppConfig extends GuiceServletContextListener{<br /><br />    @Override<br />    protected Injector getInjector() {<br />        return Guice.createInjector(new WebModule());<br />    }<br /><br />}<br /></pre><br />在 web.xml 設定好 <b>Guice Filter</b>和 <b>Listener</b>:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br />xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;<br />xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;<br />xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee<br />http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; version=&quot;2.5&quot;&gt;<br /> &lt;listener&gt;<br />  &lt;listener-class&gt;com.ctlok.pro.AppConfig&lt;/listener-class&gt;<br /> &lt;/listener&gt;<br /> &lt;filter&gt;<br />  &lt;filter-name&gt;guiceFilter&lt;/filter-name&gt;<br />  &lt;filter-class&gt;com.google.inject.servlet.GuiceFilter&lt;/filter-class&gt;<br /> &lt;/filter&gt;<br /> &lt;filter-mapping&gt;<br />  &lt;filter-name&gt;guiceFilter&lt;/filter-name&gt;<br />  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;<br /> &lt;/filter-mapping&gt;<br />&lt;/web-app&gt;<br /></pre><br />打開 http://localhost:8888 後即可看到 &#8220;I am Index page&#8221;.<br /><br />如要增加 URL，可以在 CommonController 加入:<br /><pre class="brush: java">@GET<br />@Path(&quot;user/{userId}/{userName}&quot;)<br />@Produces(MediaType.TEXT_PLAIN)<br />public String getUser(@PathParam(&quot;userId&quot;) String userId, @PathParam(&quot;userName&quot;) String userName){<br />    return &quot;User ID: &quot; + userId + &quot;, user name: &quot; + userName;<br />}<br /></pre><br />你可能有點疑問，<b>@Path</b> 在 Class 已經設家了，現在又有一個 <b>@Path</b> 在 <b>method</b> 上，那 Jersey 會怎麼決定。<br />其實 <b>Jersey</b> 會將 <b>class</b> 的 <b>@Path value</b> 加上 method 的 <b>@Path value</b>，即是 &#8220;/&#8221; + &#8220;user/{userId}/{userName}&#8221;。<br /><br />打開 http://localhost:8888/user/123/lawrence 顯示:User ID: 123, user name: lawrence<br /><br />其實 <b>Jersey</b> 的 <b>Method</b> 不一定返回 <b>String</b> 可以是一個 <b>Object</b> 或 <b>Jersey</b> 定義 的 <b>Response</b>。以下例字示範如何顯示一個 <b>JSP</b> 頁面，並由 <b>Controller</b> 將 <b>Model</b> 傳給 <b>View (JSP)</b>:<br /><br />先在 WEB-INF 新增一個 <b>views</b> 資料夾並新增一個 <b>example.jsp</b>，<b>JSP</b> 內容如下:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;<br />&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;<br />&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;<br />&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;<br /> &lt;head&gt;<br />  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;<br />  &lt;title&gt;Guice + Jersey + JSP&lt;/title&gt;<br /> &lt;/head&gt;<br /> &lt;body&gt;<br />  &lt;c:out value=&quot;${it.msg}&quot; /&gt;<br /> &lt;/body&gt;<br />&lt;/html&gt;<br /></pre><br />在 <b>Controller</b> 內也增加一個 <b>Method</b>:<br /><pre class="brush: java">@GET<br />@Path(&quot;jsp&quot;)<br />@Produces(MediaType.TEXT_HTML)<br />public Response getJsp(){<br />    Map&lt;String, Object&gt; model = new HashMap&lt;String, Object&gt;();<br />    model.put(&quot;msg&quot;, &quot;Hello World!&quot;);<br />    return Response.ok(new Viewable(&quot;/WEB-INF/views/example.jsp&quot;, model)).build();<br />}<br /></pre><br />打開 http://localhost:8888/jsp 顯示: Hello World!<br /><br />完整的 CommonController:<br /><pre class="brush: java">package com.ctlok.pro.controller;<br /><br />import java.util.HashMap;<br />import java.util.Map;<br /><br />import javax.ws.rs.GET;<br />import javax.ws.rs.Path;<br />import javax.ws.rs.PathParam;<br />import javax.ws.rs.Produces;<br />import javax.ws.rs.core.MediaType;<br />import javax.ws.rs.core.Response;<br /><br />import com.sun.jersey.api.view.Viewable;<br /><br />@Path(&quot;/&quot;)<br />public class CommonController {<br /><br />    @GET<br />    @Produces(MediaType.TEXT_PLAIN)<br />    public String index() {<br />        return &quot;I am Index page&quot;;<br />    }<br /><br />    @GET<br />    @Path(&quot;user/{userId}/{userName}&quot;)<br />    @Produces(MediaType.TEXT_PLAIN)<br />    public String getUser(@PathParam(&quot;userId&quot;) String userId,<br />            @PathParam(&quot;userName&quot;) String userName) {<br />        return &quot;User ID: &quot; + userId + &quot;, user name: &quot; + userName;<br />    }<br /><br />    @GET<br />    @Path(&quot;jsp&quot;)<br />    @Produces(MediaType.TEXT_HTML)<br />    public Response getJsp() {<br />        Map&lt;String, Object&gt; model = new HashMap&lt;String, Object&gt;();<br />        model.put(&quot;msg&quot;, &quot;Hello World!&quot;);<br />        return Response.ok(new Viewable(&quot;/WEB-INF/views/example.jsp&quot;, model))<br />                .build();<br />    }<br /><br />}<br /></pre><br />範例: <a href="https://sites.google.com/site/lawrencespace/lawpronotes/download/Guice-Jersey.zip?attredirects=0&d=1">Guice-Jersey.zip</a><br />密碼: <b>pro.ctlok.com</b>  相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Dependency-Injection-Dhanji-R-Prasanna/dp/193398855X?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Dependency Injection" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=193398855X&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=193398855X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Google-Guice-Lightweight-Dependency-ebook/dp/B001BYBU80?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Google Guice: Agile Lightweight Dependency Injection Framework" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=B001BYBU80&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=B001BYBU80" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/RESTful-Java-Jax-RS-Animal-Guide/dp/0596158041?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="RESTful Java with Jax-RS (Animal Guide)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596158041&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596158041" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-4420115334139656989?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSF + RichFaces 做成 Session Memory Leak]]></title>
    <link href="http://pro.ctlok.com/2011/06/jsf-richfaces-session-memory-leak.html"/>
    <updated>2011-06-24T11:34:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/06/jsf-richfaces-session-memory-leak</id>
    <content type="html"><![CDATA[在公司有個項目是使用 <b>JSF</b> 作為 <b>View</b>，感覺十分差。<b>JSF</b> 給我的感覺: 運行慢，吃資源，限制又多。實在不太喜歡 <b>JSF</b>。<br /><br />在進行 <b>Street Test</b> 時，發覺 <b>Server</b> 上的 <b>Memory</b> 用得異常地多。經調查後發現 <b>RichFaces</b> 其中一個 <b>Object - AjaxStateHolder</b> 佔用大量 <b>Memory</b>。如果是使用 <b>3.2.0.SR1</b> 之前的版本更加嚴重，<b>Session</b> 隨時佔用 <b>1 Gigabytes</b> 的 <b>Memory</b>。<br /><br />解決方法就是在 <b>web.xml</b> 加入以下設定:<br /><pre class="brush: xml">&lt;context-param&gt;<br />    &lt;param-name&gt;com.sun.faces.numberOfViewsInSession&lt;/param-name&gt;<br />    &lt;param-value&gt;1&lt;/param-value&gt;<br />&lt;/context-param&gt;<br /><br />&lt;context-param&gt;<br />    &lt;param-name&gt;com.sun.faces.numberOfLogicalViews&lt;/param-name&gt;<br />    &lt;param-value&gt;1&lt;/param-value&gt;<br />&lt;/context-param&gt;<br /></pre><br />因為每運行一次 <b>JSF</b> 的 <b>View</b> 時都會將這個 <b>View</b> 放到 <b>Session</b> 內，而且同一個 <b>View</b> 亦會再儲存多一次在 <b>Session</b>，因為這些 <b>Session</b> 仍然在使用中，<b>JVM GC</b> 無法將不用的 <b>View</b> 回收，做成 <b>Memory</b> 使用量不斷增加。<br /><br />限制 <b>View</b> 數量後就可以解決這個問題。<br /><br />RichFaces bug: <a href="https://issues.jboss.org/browse/RF-3878">https://issues.jboss.org/browse/RF-3878</a><br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Core-JavaServer-Faces-David-Geary/dp/0137012896?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Core JavaServer Faces (3rd Edition)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0137012896&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0137012896" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/JavaServer-Faces-2-0-Complete-Reference/dp/0071625097?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="JavaServer Faces 2.0, The Complete Reference" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0071625097&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0071625097" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Beginning-JSP-JSF-Tomcat-Development/dp/1590599047?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Beginning JSP, JSF and Tomcat Web Development: From Novice to Professional" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1590599047&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1590599047" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-1311980917431620043?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 使用 Top Down 和 JAX-WS 來部署 Web Service Provider]]></title>
    <link href="http://pro.ctlok.com/2011/06/top-down-jax-ws-web-service-provider.html"/>
    <updated>2011-06-23T17:38:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/06/top-down-jax-ws-web-service-provider</id>
    <content type="html"><![CDATA[上一篇已經介紹過使用 <b>Bottom Up</b> 的方法來開發 <b>Web Service</b>: <a href="http://pro.ctlok.com/2011/06/java-bottom-up-jax-ws-web-service.html">Java 使用 Bottom Up 和 JAX-WS 來部署 Web Service</a>。今次當然是使用 <b>Top Down</b> 的方法，個人認為 <b>Top Down</b> 其實比 <b>Bottom Up</b> 方法更好，原因是自動產生出來的 <b>XML Schema</b> 和 <b>WSDL</b> 不太好。雖然是方便，但有很多細節地方不能自己操作到，所以我是比較喜歡 <b>Top Down</b> 的。<br /><br /><div style="clear: both;"></div><br />使用 <b>Top Down</b> 一定要懂 <b>XML Schema</b> 和 <b>Web Services Description Language</b>。<br /><br /><b>XML Schema</b>: <a href="http://www.w3schools.com/schema/default.asp">http://www.w3schools.com/schema/default.asp</a><br /><b>Web Services Description Language</b>: <a href="http://www.w3schools.com/WSDL/default.asp">http://www.w3schools.com/WSDL/default.asp</a><br /><br />這次的 <b>Web Service</b> 功能是客戶端 (<b>Web service client</b>) 送出一個 Employee Id list 到 服務器端 (<b>Web service provider</b>)。<br /><br />首先建立一個 <b>WAR project</b>，然後在 <b>web root</b> 目錄 加入 <b>company.xsd</b> 和 <b>company.wsdl</b>。<br /><br />以下是 <b>company.xsd</b>:<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"<br />    targetNamespace="http://pro.ctlok.com/company" xmlns:tns="http://pro.ctlok.com/company"<br />    elementFormDefault="qualified"&gt;<br /><br />    &lt;xs:simpleType name="EmployeeId"&gt;<br />        &lt;xs:restriction base="xs:string"&gt;<br />            &lt;xs:length value="7" /&gt;<br />            &lt;xs:pattern value="E[0-9]{7}" /&gt;<br />        &lt;/xs:restriction&gt;<br />    &lt;/xs:simpleType&gt;<br /><br />    &lt;xs:simpleType name="EmployeeTitle"&gt;<br />        &lt;xs:restriction base="xs:string"&gt;<br />            &lt;xs:enumeration value="CEO" /&gt;<br />            &lt;xs:enumeration value="Manger" /&gt;<br />            &lt;xs:enumeration value="Supervisor" /&gt;<br />            &lt;xs:enumeration value="Clerk" /&gt;<br />        &lt;/xs:restriction&gt;<br />    &lt;/xs:simpleType&gt;<br /><br />    &lt;xs:complexType name="EmployeeInfo"&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name="eid" type="tns:EmployeeId"<br />                minOccurs="0" nillable="false" /&gt;<br />            &lt;xs:element name="firstName" type="xs:string"<br />                minOccurs="0" nillable="false" /&gt;<br />            &lt;xs:element name="lastName" type="xs:string"<br />                minOccurs="0" nillable="false" /&gt;<br />            &lt;xs:element name="age" type="xs:unsignedShort"<br />                minOccurs="0" nillable="false" /&gt;<br />            &lt;xs:element name="title" type="tns:EmployeeTitle"<br />                minOccurs="0" nillable="false" /&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:complexType name="EmployeeInfoWrapper"&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name="employeeInfo" type="tns:EmployeeInfo"<br />                minOccurs="0" maxOccurs="unbounded" nillable="false" /&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:complexType name="EmployeeIdWrapper"&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name="eid" type="tns:EmployeeId"<br />                minOccurs="0" maxOccurs="unbounded" nillable="false" /&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:element name="EmployeeIdList" type="tns:EmployeeIdWrapper" /&gt;<br />    &lt;xs:element name="EmployeeInfoList" type="tns:EmployeeInfoWrapper" /&gt;<br /><br />&lt;/xs:schema&gt;<br /></pre><br />以下則是 <b>company.wsdl</b>:<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;wsdl:definitions name="Company" targetNamespace="http://pro.ctlok.com/company"<br />    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://pro.ctlok.com/company"<br />    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;<br />    <br />    &lt;wsdl:types&gt;<br />        &lt;xsd:schema&gt;<br />            &lt;xsd:import namespace="http://pro.ctlok.com/company"<br />                schemaLocation="company.xsd" /&gt;<br />        &lt;/xsd:schema&gt;<br />    &lt;/wsdl:types&gt;<br />    <br />    &lt;wsdl:message name="employeeLookupRequest"&gt;<br />        &lt;wsdl:part element="tns:EmployeeIdList" name="employeeIdList" /&gt;<br />    &lt;/wsdl:message&gt;<br />    <br />    &lt;wsdl:message name="employeeLookupResponse"&gt;<br />        &lt;wsdl:part element="tns:EmployeeInfoList" name="employeeInfoList" /&gt;<br />    &lt;/wsdl:message&gt;<br />    <br />    &lt;wsdl:portType name="employeeLookupService"&gt;<br />        &lt;wsdl:operation name="employeeLookup"&gt;<br />            &lt;wsdl:input message="tns:employeeLookupRequest" /&gt;<br />            &lt;wsdl:output message="tns:employeeLookupResponse" /&gt;<br />        &lt;/wsdl:operation&gt;<br />    &lt;/wsdl:portType&gt;<br />    <br />    &lt;wsdl:binding name="employeeLookupBinding" type="tns:employeeLookupService"&gt;<br />        &lt;soap:binding style="document"<br />            transport="http://schemas.xmlsoap.org/soap/http" /&gt;<br />        &lt;wsdl:operation name="employeeLookup"&gt;<br />            &lt;soap:operation<br />                soapAction="http://pro.ctlok.com/company/employeeLookup" /&gt;<br />            &lt;wsdl:input&gt;<br />                &lt;soap:body use="literal" /&gt;<br />            &lt;/wsdl:input&gt;<br />            &lt;wsdl:output&gt;<br />                &lt;soap:body use="literal" /&gt;<br />            &lt;/wsdl:output&gt;<br />        &lt;/wsdl:operation&gt;<br />    &lt;/wsdl:binding&gt;<br />    <br />    &lt;wsdl:service name="employeeLookupService"&gt;<br />        &lt;wsdl:port binding="tns:employeeLookupBinding" name="employeeLookupPort"&gt;<br />            &lt;soap:address location="http://localhost:9080/WebService" /&gt;<br />        &lt;/wsdl:port&gt;<br />    &lt;/wsdl:service&gt;<br />    <br />&lt;/wsdl:definitions&gt;<br /></pre><br />現在完成了 <b>Web Service</b> 的介面了，但要將 <b>Web Service</b> 的 <b>Object</b> 轉為 <b>Java Class</b> 才可以。幸好有工具可以替我們完成這項工作，不用一個一個手動建立。使用 <b>JAXB compiler</b> 幫我們將 <b>WSDL</b> 內用到的 <b>Object</b> 轉為 <b>Java Class</b>。在 <b>Windows</b> 打開 <b>CMD</b> 輸入以下指令:<br /><pre class="brush: bat">xjc -wsdl company.wsdl -p com.ctlok.pro.ws.model<br /></pre><br />*** 如果你不能執行 <b>xjc</b>，請查看 <b>System Path</b> 有沒有加入 <b>%JAVA_HOME%/bin</b> 。 ***<br /><br /><ul><li><b>-wsdl</b> 是 <b>wsdl</b> 檔案存放的位置</li><li><b>-p</b> 是產生出來的 <b>Java class</b> 所在 <b>package</b></li></ul><br />想知更多指令可參考: <a href="http://download.oracle.com/docs/cd/E17802_01/webservices/webservices/docs/1.6/tutorial/doc/JAXBUsing2.html">JAXB Using</a><br /><br />執行指令後會看到有 6 個 .java 檔案，分別是:<br /><ol><li>EmployeeIdWrapper</li><li>EmployeeInfo</li><li>EmployeeInfoWrapper</li><li>EmployeeTitle</li><li>ObjectFactory</li><li>package-info</li></ol><br /><b>EmployeeIdWrapper:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import java.util.ArrayList;<br />import java.util.List;<br />import javax.xml.bind.annotation.XmlAccessType;<br />import javax.xml.bind.annotation.XmlAccessorType;<br />import javax.xml.bind.annotation.XmlType;<br /><br /><br />/**<br /> * &lt;p&gt;Java class for EmployeeIdWrapper complex type.<br /> * <br /> * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.<br /> * <br /> * &lt;pre&gt;<br /> * &amp;lt;complexType name="EmployeeIdWrapper"&gt;<br /> *   &amp;lt;complexContent&gt;<br /> *     &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;<br /> *       &amp;lt;sequence&gt;<br /> *         &amp;lt;element name="eid" type="{http://pro.ctlok.com/company}EmployeeId" maxOccurs="unbounded" minOccurs="0"/&gt;<br /> *       &amp;lt;/sequence&gt;<br /> *     &amp;lt;/restriction&gt;<br /> *   &amp;lt;/complexContent&gt;<br /> * &amp;lt;/complexType&gt;<br /> * &lt;/pre&gt;<br /> * <br /> * <br /> */<br />@XmlAccessorType(XmlAccessType.FIELD)<br />@XmlType(name = "EmployeeIdWrapper", propOrder = {<br />    "eid"<br />})<br />public class EmployeeIdWrapper {<br /><br />    protected List&lt;String&gt; eid;<br /><br />    /**<br />     * Gets the value of the eid property.<br />     * <br />     * &lt;p&gt;<br />     * This accessor method returns a reference to the live list,<br />     * not a snapshot. Therefore any modification you make to the<br />     * returned list will be present inside the JAXB object.<br />     * This is why there is not a &lt;CODE&gt;set&lt;/CODE&gt; method for the eid property.<br />     * <br />     * &lt;p&gt;<br />     * For example, to add a new item, do as follows:<br />     * &lt;pre&gt;<br />     *    getEid().add(newItem);<br />     * &lt;/pre&gt;<br />     * <br />     * <br />     * &lt;p&gt;<br />     * Objects of the following type(s) are allowed in the list<br />     * {@link String }<br />     * <br />     * <br />     */<br />    public List&lt;String&gt; getEid() {<br />        if (eid == null) {<br />            eid = new ArrayList&lt;String&gt;();<br />        }<br />        return this.eid;<br />    }<br /><br />}<br /></pre><br /><b>EmployeeInfo:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import javax.xml.bind.annotation.XmlAccessType;<br />import javax.xml.bind.annotation.XmlAccessorType;<br />import javax.xml.bind.annotation.XmlSchemaType;<br />import javax.xml.bind.annotation.XmlType;<br /><br /><br />/**<br /> * &lt;p&gt;Java class for EmployeeInfo complex type.<br /> * <br /> * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.<br /> * <br /> * &lt;pre&gt;<br /> * &amp;lt;complexType name="EmployeeInfo"&gt;<br /> *   &amp;lt;complexContent&gt;<br /> *     &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;<br /> *       &amp;lt;sequence&gt;<br /> *         &amp;lt;element name="eid" type="{http://pro.ctlok.com/company}EmployeeId" minOccurs="0"/&gt;<br /> *         &amp;lt;element name="firstName" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;<br /> *         &amp;lt;element name="lastName" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;<br /> *         &amp;lt;element name="age" type="{http://www.w3.org/2001/XMLSchema}unsignedShort" minOccurs="0"/&gt;<br /> *         &amp;lt;element name="title" type="{http://pro.ctlok.com/company}EmployeeTitle" minOccurs="0"/&gt;<br /> *       &amp;lt;/sequence&gt;<br /> *     &amp;lt;/restriction&gt;<br /> *   &amp;lt;/complexContent&gt;<br /> * &amp;lt;/complexType&gt;<br /> * &lt;/pre&gt;<br /> * <br /> * <br /> */<br />@XmlAccessorType(XmlAccessType.FIELD)<br />@XmlType(name = "EmployeeInfo", propOrder = {<br />    "eid",<br />    "firstName",<br />    "lastName",<br />    "age",<br />    "title"<br />})<br />public class EmployeeInfo {<br /><br />    protected String eid;<br />    protected String firstName;<br />    protected String lastName;<br />    @XmlSchemaType(name = "unsignedShort")<br />    protected Integer age;<br />    protected EmployeeTitle title;<br /><br />    /**<br />     * Gets the value of the eid property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link String }<br />     *     <br />     */<br />    public String getEid() {<br />        return eid;<br />    }<br /><br />    /**<br />     * Sets the value of the eid property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link String }<br />     *     <br />     */<br />    public void setEid(String value) {<br />        this.eid = value;<br />    }<br /><br />    /**<br />     * Gets the value of the firstName property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link String }<br />     *     <br />     */<br />    public String getFirstName() {<br />        return firstName;<br />    }<br /><br />    /**<br />     * Sets the value of the firstName property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link String }<br />     *     <br />     */<br />    public void setFirstName(String value) {<br />        this.firstName = value;<br />    }<br /><br />    /**<br />     * Gets the value of the lastName property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link String }<br />     *     <br />     */<br />    public String getLastName() {<br />        return lastName;<br />    }<br /><br />    /**<br />     * Sets the value of the lastName property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link String }<br />     *     <br />     */<br />    public void setLastName(String value) {<br />        this.lastName = value;<br />    }<br /><br />    /**<br />     * Gets the value of the age property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link Integer }<br />     *     <br />     */<br />    public Integer getAge() {<br />        return age;<br />    }<br /><br />    /**<br />     * Sets the value of the age property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link Integer }<br />     *     <br />     */<br />    public void setAge(Integer value) {<br />        this.age = value;<br />    }<br /><br />    /**<br />     * Gets the value of the title property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link EmployeeTitle }<br />     *     <br />     */<br />    public EmployeeTitle getTitle() {<br />        return title;<br />    }<br /><br />    /**<br />     * Sets the value of the title property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link EmployeeTitle }<br />     *     <br />     */<br />    public void setTitle(EmployeeTitle value) {<br />        this.title = value;<br />    }<br /><br />}<br /></pre><br /><b>EmployeeInfoWrapper:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import java.util.ArrayList;<br />import java.util.List;<br />import javax.xml.bind.annotation.XmlAccessType;<br />import javax.xml.bind.annotation.XmlAccessorType;<br />import javax.xml.bind.annotation.XmlType;<br /><br /><br />/**<br /> * &lt;p&gt;Java class for EmployeeInfoWrapper complex type.<br /> * <br /> * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.<br /> * <br /> * &lt;pre&gt;<br /> * &amp;lt;complexType name="EmployeeInfoWrapper"&gt;<br /> *   &amp;lt;complexContent&gt;<br /> *     &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;<br /> *       &amp;lt;sequence&gt;<br /> *         &amp;lt;element name="employeeInfo" type="{http://pro.ctlok.com/company}EmployeeInfo" maxOccurs="unbounded" minOccurs="0"/&gt;<br /> *       &amp;lt;/sequence&gt;<br /> *     &amp;lt;/restriction&gt;<br /> *   &amp;lt;/complexContent&gt;<br /> * &amp;lt;/complexType&gt;<br /> * &lt;/pre&gt;<br /> * <br /> * <br /> */<br />@XmlAccessorType(XmlAccessType.FIELD)<br />@XmlType(name = "EmployeeInfoWrapper", propOrder = {<br />    "employeeInfo"<br />})<br />public class EmployeeInfoWrapper {<br /><br />    protected List&lt;EmployeeInfo&gt; employeeInfo;<br /><br />    /**<br />     * Gets the value of the employeeInfo property.<br />     * <br />     * &lt;p&gt;<br />     * This accessor method returns a reference to the live list,<br />     * not a snapshot. Therefore any modification you make to the<br />     * returned list will be present inside the JAXB object.<br />     * This is why there is not a &lt;CODE&gt;set&lt;/CODE&gt; method for the employeeInfo property.<br />     * <br />     * &lt;p&gt;<br />     * For example, to add a new item, do as follows:<br />     * &lt;pre&gt;<br />     *    getEmployeeInfo().add(newItem);<br />     * &lt;/pre&gt;<br />     * <br />     * <br />     * &lt;p&gt;<br />     * Objects of the following type(s) are allowed in the list<br />     * {@link EmployeeInfo }<br />     * <br />     * <br />     */<br />    public List&lt;EmployeeInfo&gt; getEmployeeInfo() {<br />        if (employeeInfo == null) {<br />            employeeInfo = new ArrayList&lt;EmployeeInfo&gt;();<br />        }<br />        return this.employeeInfo;<br />    }<br /><br />}<br /></pre><br /><b>EmployeeTitle:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import javax.xml.bind.annotation.XmlEnum;<br />import javax.xml.bind.annotation.XmlEnumValue;<br />import javax.xml.bind.annotation.XmlType;<br /><br /><br />/**<br /> * &lt;p&gt;Java class for EmployeeTitle.<br /> * <br /> * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.<br /> * &lt;p&gt;<br /> * &lt;pre&gt;<br /> * &amp;lt;simpleType name="EmployeeTitle"&gt;<br /> *   &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;<br /> *     &amp;lt;enumeration value="CEO"/&gt;<br /> *     &amp;lt;enumeration value="Manger"/&gt;<br /> *     &amp;lt;enumeration value="Supervisor"/&gt;<br /> *     &amp;lt;enumeration value="Clerk"/&gt;<br /> *   &amp;lt;/restriction&gt;<br /> * &amp;lt;/simpleType&gt;<br /> * &lt;/pre&gt;<br /> * <br /> */<br />@XmlType(name = "EmployeeTitle")<br />@XmlEnum<br />public enum EmployeeTitle {<br /><br />    CEO("CEO"),<br />    @XmlEnumValue("Manger")<br />    MANGER("Manger"),<br />    @XmlEnumValue("Supervisor")<br />    SUPERVISOR("Supervisor"),<br />    @XmlEnumValue("Clerk")<br />    CLERK("Clerk");<br />    private final String value;<br /><br />    EmployeeTitle(String v) {<br />        value = v;<br />    }<br /><br />    public String value() {<br />        return value;<br />    }<br /><br />    public static EmployeeTitle fromValue(String v) {<br />        for (EmployeeTitle c: EmployeeTitle.values()) {<br />            if (c.value.equals(v)) {<br />                return c;<br />            }<br />        }<br />        throw new IllegalArgumentException(v);<br />    }<br /><br />}<br /></pre><br /><b>ObjectFactory:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import javax.xml.bind.JAXBElement;<br />import javax.xml.bind.annotation.XmlElementDecl;<br />import javax.xml.bind.annotation.XmlRegistry;<br />import javax.xml.namespace.QName;<br /><br /><br />/**<br /> * This object contains factory methods for each <br /> * Java content interface and Java element interface <br /> * generated in the com.ctlok.pro.ws.model package. <br /> * &lt;p&gt;An ObjectFactory allows you to programatically <br /> * construct new instances of the Java representation <br /> * for XML content. The Java representation of XML <br /> * content can consist of schema derived interfaces <br /> * and classes representing the binding of schema <br /> * type definitions, element declarations and model <br /> * groups.  Factory methods for each of these are <br /> * provided in this class.<br /> * <br /> */<br />@XmlRegistry<br />public class ObjectFactory {<br /><br />    private final static QName _EmployeeIdList_QNAME = new QName("http://pro.ctlok.com/company", "EmployeeIdList");<br />    private final static QName _EmployeeInfoList_QNAME = new QName("http://pro.ctlok.com/company", "EmployeeInfoList");<br /><br />    /**<br />     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.ctlok.pro.ws.model<br />     * <br />     */<br />    public ObjectFactory() {<br />    }<br /><br />    /**<br />     * Create an instance of {@link EmployeeIdWrapper }<br />     * <br />     */<br />    public EmployeeIdWrapper createEmployeeIdWrapper() {<br />        return new EmployeeIdWrapper();<br />    }<br /><br />    /**<br />     * Create an instance of {@link EmployeeInfoWrapper }<br />     * <br />     */<br />    public EmployeeInfoWrapper createEmployeeInfoWrapper() {<br />        return new EmployeeInfoWrapper();<br />    }<br /><br />    /**<br />     * Create an instance of {@link EmployeeInfo }<br />     * <br />     */<br />    public EmployeeInfo createEmployeeInfo() {<br />        return new EmployeeInfo();<br />    }<br /><br />    /**<br />     * Create an instance of {@link JAXBElement }{@code &lt;}{@link EmployeeIdWrapper }{@code &gt;}}<br />     * <br />     */<br />    @XmlElementDecl(namespace = "http://pro.ctlok.com/company", name = "EmployeeIdList")<br />    public JAXBElement&lt;EmployeeIdWrapper&gt; createEmployeeIdList(EmployeeIdWrapper value) {<br />        return new JAXBElement&lt;EmployeeIdWrapper&gt;(_EmployeeIdList_QNAME, EmployeeIdWrapper.class, null, value);<br />    }<br /><br />    /**<br />     * Create an instance of {@link JAXBElement }{@code &lt;}{@link EmployeeInfoWrapper }{@code &gt;}}<br />     * <br />     */<br />    @XmlElementDecl(namespace = "http://pro.ctlok.com/company", name = "EmployeeInfoList")<br />    public JAXBElement&lt;EmployeeInfoWrapper&gt; createEmployeeInfoList(EmployeeInfoWrapper value) {<br />        return new JAXBElement&lt;EmployeeInfoWrapper&gt;(_EmployeeInfoList_QNAME, EmployeeInfoWrapper.class, null, value);<br />    }<br /><br />}<br /></pre><br /><b>package-info:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br />@javax.xml.bind.annotation.XmlSchema(namespace = "http://pro.ctlok.com/company", elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED)<br />package com.ctlok.pro.ws.model;<br /></pre><br />將這些 <b>Java Class</b> 複製到 <b>WAR project</b> 內。<br /><br />再建立一個 <b>Java Class - EmployeeLookupService:</b><br /><pre class="brush: java">package com.ctlok.pro.ws;<br /><br />import java.util.HashMap;<br />import java.util.Map;<br /><br />import javax.jws.WebMethod;<br />import javax.jws.WebParam;<br />import javax.jws.WebResult;<br />import javax.jws.WebService;<br />import javax.jws.soap.SOAPBinding;<br />import javax.xml.bind.annotation.XmlSeeAlso;<br /><br />import com.ctlok.pro.ws.model.EmployeeIdWrapper;<br />import com.ctlok.pro.ws.model.EmployeeInfo;<br />import com.ctlok.pro.ws.model.EmployeeInfoWrapper;<br />import com.ctlok.pro.ws.model.EmployeeTitle;<br />import com.ctlok.pro.ws.model.ObjectFactory;<br /><br />@WebService(<br />        name = "employeeLookupService", <br />        serviceName = "employeeLookupService", <br />        portName = "employeeLookupPort", <br />        targetNamespace= "http://pro.ctlok.com/company",<br />        wsdlLocation = "company.wsdl")<br />@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)<br />@XmlSeeAlso({ObjectFactory.class})<br />public class EmployeeLookupService {<br />    <br />    private Map&lt;String, EmployeeInfo&gt; infoMap;<br />    <br />    public EmployeeLookupService(){<br />        infoMap = new HashMap&lt;String, EmployeeInfo&gt;();<br />        <br />        EmployeeInfo info1 = new EmployeeInfo();<br />        info1.setEid("E1000000");<br />        info1.setFirstName("Lawrence");<br />        info1.setLastName("Cheung");<br />        info1.setAge(24);<br />        info1.setTitle(EmployeeTitle.CEO);<br />        <br />        EmployeeInfo info2 = new EmployeeInfo();<br />        info2.setEid("E1524125");<br />        info2.setFirstName("Tom");<br />        info2.setLastName("Wong");<br />        info2.setAge(22);<br />        info2.setTitle(EmployeeTitle.CLERK);<br />        <br />        EmployeeInfo info3 = new EmployeeInfo();<br />        info3.setEid("E7452145");<br />        info3.setFirstName("John");<br />        info3.setLastName("Lee");<br />        info3.setAge(29);<br />        info3.setTitle(EmployeeTitle.MANGER);<br />        <br />        EmployeeInfo info4 = new EmployeeInfo();<br />        info4.setEid("E6523547");<br />        info4.setFirstName("Katty");<br />        info4.setLastName("Choi");<br />        info4.setAge(24);<br />        info4.setTitle(EmployeeTitle.SUPERVISOR);<br />        <br />        <br />        infoMap.put(info1.getEid(), info1);<br />        infoMap.put(info2.getEid(), info2);<br />        infoMap.put(info3.getEid(), info3);<br />        infoMap.put(info4.getEid(), info4);<br />    }<br /><br />    @WebMethod(operationName="employeeLookup")<br />    @WebResult(name = "EmployeeInfoList", partName = "employeeInfoList")<br />    public EmployeeInfoWrapper employeeLookup(<br />            @WebParam(name = "EmployeeIdList", partName = "employeeIdList") <br />            EmployeeIdWrapper employeeIdWrapper){<br />        <br />        EmployeeInfoWrapper employeeInfoWrapper = new EmployeeInfoWrapper();<br />        <br />        for (String eid: employeeIdWrapper.getEid()){<br />            EmployeeInfo info = infoMap.get(eid);<br />            <br />            if (info == null)<br />                info = new EmployeeInfo();<br />            <br />            employeeInfoWrapper.getEmployeeInfo().add(info);<br />        }<br />        <br />        return employeeInfoWrapper;<br />        <br />    }<br /><br />}<br /></pre><br />完成了 <b>Web Service Provider</b>。<br /><br /><pre class="brush: java">@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)<br /></pre><br />以上這句注解很重要，預設是 <b>WRAPPED</b>，即是 <b>JAX-WS</b> 會替你自動包裝好 <b>List Object</b>，但我們在 <b>XML Schema</b> 已經設定了 <b>Wrapper</b>，所以不用設定為 <b>WRAPPED</b>。<br /><br />&#8212;&#8212;&#8212;&#8212;&#8211; 分隔線 &#8212;&#8212;&#8212;&#8212;&#8211;<br /><br /><pre class="brush: java">@XmlSeeAlso({ObjectFactory.class})<br /></pre><br />以上的注解則是確保 <b>JAXB</b> 正常運作，由 <b>XML</b> 轉為 <b>Object</b> 或 <b>Object</b> 轉為 <b>XML</b>。<br /><br />&#8212;&#8212;&#8212;&#8212;&#8211; 分隔線 &#8212;&#8212;&#8212;&#8212;&#8211;<br /><br /><pre class="brush: java">@WebResult(name = "EmployeeInfoList", partName = "employeeInfoList")<br /></pre><br />以上的注解對應 <b>WSDL</b> 內的:<br /><br /><pre class="brush: xml">&lt;wsdl:message name="employeeLookupRequest"&gt;<br />    &lt;wsdl:part element="tns:EmployeeIdList" name="employeeIdList" /&gt;<br />&lt;/wsdl:message&gt;<br /></pre><br />&#8212;&#8212;&#8212;&#8212;&#8211; 分隔線 &#8212;&#8212;&#8212;&#8212;&#8211;<br /><br /><pre class="brush: java">@WebResult(name = "EmployeeInfoList", partName = "employeeInfoList")<br /></pre><br />以上的注解則對應 <b>WSDL</b> 內的:<br /><br /><pre class="brush: xml">&lt;wsdl:message name="employeeLookupResponse"&gt;<br />    &lt;wsdl:part element="tns:EmployeeInfoList" name="employeeInfoList" /&gt;<br />&lt;/wsdl:message&gt;<br /></pre><br /><br />現在將 <b>WAR project</b> 放上 <b>Application Server</b> 並運行 <b>http://localhost/employeeLookupService?wsdl</b>。如果發現找不到 <b>wsdl</b> 檔案即是 <b>wsdl</b> 放的位置不正確。<br /><br />成功找到後可以使用 soapUI 去測試一下，傳送以下 <b>SOAP XML</b> 到 <b>Server</b>:<br /><pre class="brush: xml">&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:com="http://pro.ctlok.com/company"&gt;<br />   &lt;soapenv:Header/&gt;<br />   &lt;soapenv:Body&gt;<br />      &lt;com:EmployeeIdList&gt;<br />         &lt;!--Zero or more repetitions:--&gt;<br />         &lt;com:eid&gt;E1000000&lt;/com:eid&gt;<br />         &lt;com:eid&gt;E1524125&lt;/com:eid&gt;<br />      &lt;/com:EmployeeIdList&gt;<br />   &lt;/soapenv:Body&gt;<br />&lt;/soapenv:Envelope&gt;<br /></pre><br /><b>Server</b> 回傳以下 <b>XML</b> 即代表成功設定:<br /><pre class="brush: xml">&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;<br />   &lt;soapenv:Body&gt;<br />      &lt;EmployeeInfoList xmlns="http://pro.ctlok.com/company"&gt;<br />         &lt;employeeInfo&gt;<br />            &lt;eid&gt;E1000000&lt;/eid&gt;<br />            &lt;firstName&gt;Lawrence&lt;/firstName&gt;<br />            &lt;lastName&gt;Cheung&lt;/lastName&gt;<br />            &lt;age&gt;24&lt;/age&gt;<br />            &lt;title&gt;CEO&lt;/title&gt;<br />         &lt;/employeeInfo&gt;<br />         &lt;employeeInfo&gt;<br />            &lt;eid&gt;E1524125&lt;/eid&gt;<br />            &lt;firstName&gt;Tom&lt;/firstName&gt;<br />            &lt;lastName&gt;Wong&lt;/lastName&gt;<br />            &lt;age&gt;22&lt;/age&gt;<br />            &lt;title&gt;Clerk&lt;/title&gt;<br />         &lt;/employeeInfo&gt;<br />      &lt;/EmployeeInfoList&gt;<br />   &lt;/soapenv:Body&gt;<br />&lt;/soapenv:Envelope&gt;<br /></pre><br />有時間再講解一下 <b>Java Web Service Client</b> 如何設定。<br /><br />相閞書籍: <a href="http://www.amazon.com/Java-Web-Services-Up-Running/dp/059652112X?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Java Web Services: Up and Running" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=059652112X&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=059652112X" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Java-Soa-Cookbook-Eben-Hewitt/dp/0596520727?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Java Soa Cookbook" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0596520727&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596520727" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Java-Web-Services-Running-ebook/dp/B0026OR35I?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Java Web Services: Up and Running" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=B0026OR35I&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=B0026OR35I" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-8108643057802063028?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更新 Blogger 模板]]></title>
    <link href="http://pro.ctlok.com/2011/06/update-blogger-template.html"/>
    <updated>2011-06-22T15:14:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/06/update-blogger-template</id>
    <content type="html"><![CDATA[舊模板加了太多東西，令頁面載入的時間比較長。今次換了一個比較簡潔的模板，看上去的感覺比較舒服一點，再加上停用一些載入時間較長的 <b>Fancy box</b>，<b>Sexy Bookmark</b> 等等，並使用新的方法去載入 <b>Syntax Highlighter</b>， 希望令載入時間更加快。<br /><br /><div style="clear:both"></div><br />更新 Log:<br /><br /><ol><li>Add popular posts widget</li><li>Update jQuery to 1.6.1</li><li>Update Syntax Highlighter</li><li>Update Facebook javascript API</li><li>Update Facebook Like box (iframe -&gt; XFBML)</li><li>Update Facebook Like box style</li><li>Update Facebook Like (iframe -&gt; XFBML)</li><li>Update Google Adsense style</li><li>Update Google Adsense custom search</li><li>Remove Fancy Box</li><li>Remove BloggerAds banner</li></ol><br />相關書籍: <a href="http://www.amazon.com/Beginning-Google-Blogger-Heather-Wright-Porto/dp/1430230126?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Beginning Google Blogger" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1430230126&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1430230126" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Publishing-Blog-Blogger-Visual-QuickProject/dp/0321637526?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Publishing a Blog with Blogger: Visual QuickProject Guide (2nd Edition)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0321637526&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0321637526" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Blogger-Customize-templates-advertising-Technologies/dp/184719317X?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Blogger: Beyond the Basics: Customize and promote your blog with original templates, analytics, advertising, and SEO (From Technologies to Solutions)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=184719317X&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=184719317X" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-2348991239226884774?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 使用 Bottom Up 和 JAX-WS 來部署 Web Service Provider]]></title>
    <link href="http://pro.ctlok.com/2011/06/java-bottom-up-jax-ws-web-service.html"/>
    <updated>2011-06-17T17:52:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/06/java-bottom-up-jax-ws-web-service</id>
    <content type="html"><![CDATA[網路上關於 <b>Web Service</b> 的資訊不是很多，中文的 <b>Web Service</b> 資源更是少之有少，可能是因為部署 <b>Web Service</b> 是一件麻煩的事，而且性能又不是太好，但 <b>Web Service</b> 也有很多好處。不用同一種程式語言也可以互相交換數據，執行程序，有標準的格式，大多數語言都提供了 <b>Library</b> 去操作。<b>Web Service</b> 大多數用於對外的對像，例如: 銀行和銀行之間的數據交換亦可以通過 <b>Web Service</b> 做到。<br /><br />有 2 種主要的方式去設計一個 <b>Web Service</b>，就是 <b>Top Down</b> 和 <b>Bottom Up</b>，究竟有什麼分別呢?<br /><br /><b>Top Down</b> 是由定義 <b>Object</b> (物件) 和 <b>Interface</b> (介面) 做起的，<b>Object</b> (物件) 你可以想像為傳遞數據的一個容器，而這個物件是由 <b>XML Schema</b> <b>(XSD)</b> 去描述的。<b>Interface</b> (介面) 則是描述這個 <b>Web Service</b> 提供什麼服務，服務需要傳入一個什麼 <b>Object</b> (物件) 和 返回一個什麼 <b>Object</b> (物件)等等描述，這些都是由 <b>Web Services Description Language</b> <b>(WSDL)</b> 去描述的。做好這 2 項工作後就需要製作和 <b>XML Schema</b> 描述一樣的 <b>Object Class</b>，亦要製作和 <b>Web Services Description Language</b> 描述一樣的 <b>Functional Class</b>。最後當然要寫程式式碼和放上 <b>Application Server</b>。<br /><br /><b>Bottom Up</b> 就比較簡單了，是由 <b>Object Class</b> 和 <b>Functional Class</b> 先做起，做起後放上 <b>Application Server</b> 由 <b>Application Server</b> 自動產生出 <b>XML Schema</b> <b>(XSD)</b> 和 <b>Web Services Description Language</b> <b>(WSDL)</b>。不懂得 <b>XML Schema</b> 和 <b>Web Services Description Language</b> 也一樣可以製作出一個 <b>Web Service</b>。<br /><br />最好當然是對 <b>XML Schema</b> 和 <b>Web Services Description Language</b> 有一點認識。<br /><b>XML Schema</b>: <a href="http://www.w3schools.com/schema/default.asp">http://www.w3schools.com/schema/default.asp</a><br /><b>Web Services Description Language</b>: <br /><a href="http://www.w3schools.com/WSDL/default.asp">http://www.w3schools.com/WSDL/default.asp</a><br /><br />首先當然講解一下最簡單的 <b>Bottom Up</b> 方法，首先要在 <b>IDE</b> 建立一個 <b>WAR project</b>，加入一個 <b>Java Class</b>:<br /><pre class="brush: java">package sample.ws;<br /><br />import javax.jws.WebMethod;<br />import javax.jws.WebService;<br /><br />@WebService(<br />        name = &quot;CalculaterService&quot;, <br />        serviceName = &quot;CalculaterService&quot;, <br />        portName = &quot;CalculaterServicePort&quot;, <br />        targetNamespace = &quot;http://pro.ctlok.com/CalculaterService/&quot;)<br />public class CalculaterService {<br /><br />    @WebMethod<br />    public int add(int i, int k) {<br />        return i + k;<br />    }<br /><br />    @WebMethod<br />    public int subtract(int i, int k) {<br />        return i - k;<br />    }<br /><br />}<br /></pre><br />就這樣完成了一個最簡單的 <b>Web Service</b>。<br /><br /><pre class="brush: java">@WebService(<br />        name = &quot;CalculaterService&quot;, <br />        serviceName = &quot;CalculaterService&quot;, <br />        portName = &quot;CalculaterServicePort&quot;, <br />        targetNamespace = &quot;http://pro.ctlok.com/CalculaterService/&quot;)<br /></pre><br />用於通知 <b>Java EE</b> 容器識別這個 <b>Class</b> 是一個 <b>Web Service</b>。<br /><br /><ul><li><b>name</b>: 是在 <b>Application Server</b> 上的名稱</li><li><b>serviceName</b>: 是在 <b>URL</b> 和 <b>WSDL</b> 上顯示的名稱</li><li><b>portName</b>: 是在 <b>WSDL</b> 上顯示的名稱</li><li><b>targetNamespace </b>: 是在 <b>WSDL</b> 上顯示的命名空間，令 <b>XML</b> 內的名稱不會相同</li></ul><br /><pre class="brush: java">@WebMethod<br /></pre><br />是指定這個 <b>Method</b> 是 <b>Web Service</b> 的其中一個 <b>Function</b>。<br /><br /><b>CalculaterService</b> 亦可以是一個 <b>EJB Session Bean</b>:<br /><br /><pre class="brush: java">package sample.ws;<br /><br />@Local<br />public interface CalculaterService{<br /><br />    public int add(int i, int k);<br />    public int subtract(int i, int k);<br /><br />}<br /></pre><br /><pre class="brush: java">package sample.ws;<br /><br />import javax.jws.WebMethod;<br />import javax.jws.WebService;<br /><br />@Stateless<br />@WebService(<br />        name = &quot;CalculaterService&quot;, <br />        serviceName = &quot;CalculaterService&quot;, <br />        portName = &quot;CalculaterServicePort&quot;, <br />        targetNamespace = &quot;http://pro.ctlok.com/CalculaterService/&quot;)<br />public class CalculaterServiceBean implements CalculaterService{<br /><br />    @WebMethod<br />    public int add(int i, int k) {<br />        return i + k;<br />    }<br /><br />    @WebMethod<br />    public int subtract(int i, int k) {<br />        return i - k;<br />    }<br /><br />}<br /></pre><br />放上 Application Server 後使用瀏覽器開啟: <b>http://localhost/CalculaterService?wsdl</b> 會顯示出以下的 <b>WSDL</b><br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br />&lt;definitions name=&quot;CalculaterService&quot; targetNamespace=&quot;http://pro.ctlok.com/CalculaterService/&quot;<br />    xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;<br />    xmlns:tns=&quot;http://pro.ctlok.com/CalculaterService/&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot;&gt;<br /><br />    &lt;types&gt;<br />        &lt;xsd:schema&gt;<br />            &lt;xsd:import namespace=&quot;http://pro.ctlok.com/CalculaterService/&quot;<br />                schemaLocation=&quot;CalculaterService_schema1.xsd&quot; /&gt;<br />        &lt;/xsd:schema&gt;<br />    &lt;/types&gt;<br /><br />    &lt;message name=&quot;addResponse&quot;&gt;<br />        &lt;part name=&quot;parameters&quot; element=&quot;tns:addResponse&quot;&gt;<br />        &lt;/part&gt;<br />    &lt;/message&gt;<br /><br />    &lt;message name=&quot;add&quot;&gt;<br />        &lt;part name=&quot;parameters&quot; element=&quot;tns:add&quot;&gt;<br />        &lt;/part&gt;<br />    &lt;/message&gt;<br /><br />    &lt;message name=&quot;subtractResponse&quot;&gt;<br />        &lt;part name=&quot;parameters&quot; element=&quot;tns:subtractResponse&quot;&gt;<br />        &lt;/part&gt;<br />    &lt;/message&gt;<br /><br />    &lt;message name=&quot;subtract&quot;&gt;<br />        &lt;part name=&quot;parameters&quot; element=&quot;tns:subtract&quot;&gt;<br />        &lt;/part&gt;<br />    &lt;/message&gt;<br /><br />    &lt;portType name=&quot;CalculaterService&quot;&gt;<br />        &lt;operation name=&quot;add&quot;&gt;<br />            &lt;input message=&quot;tns:add&quot;&gt;<br />            &lt;/input&gt;<br />            &lt;output message=&quot;tns:addResponse&quot;&gt;<br />            &lt;/output&gt;<br />        &lt;/operation&gt;<br /><br />        &lt;operation name=&quot;subtract&quot;&gt;<br />            &lt;input message=&quot;tns:subtract&quot;&gt;<br />            &lt;/input&gt;<br />            &lt;output message=&quot;tns:subtractResponse&quot;&gt;<br />            &lt;/output&gt;<br />        &lt;/operation&gt;<br />    &lt;/portType&gt;<br /><br />    &lt;binding name=&quot;CalculaterServicePortBinding&quot; type=&quot;tns:CalculaterService&quot;&gt;<br />        &lt;soap:binding style=&quot;document&quot;<br />            transport=&quot;http://schemas.xmlsoap.org/soap/http&quot; /&gt;<br />        &lt;operation name=&quot;add&quot;&gt;<br />            &lt;soap:operation soapAction=&quot;&quot; /&gt;<br />            &lt;input&gt;<br />                &lt;soap:body use=&quot;literal&quot; /&gt;<br />            &lt;/input&gt;<br />            &lt;output&gt;<br />                &lt;soap:body use=&quot;literal&quot; /&gt;<br />            &lt;/output&gt;<br />        &lt;/operation&gt;<br />        &lt;operation name=&quot;subtract&quot;&gt;<br />            &lt;soap:operation soapAction=&quot;&quot; /&gt;<br />            &lt;input&gt;<br />                &lt;soap:body use=&quot;literal&quot; /&gt;<br />            &lt;/input&gt;<br />            &lt;output&gt;<br />                &lt;soap:body use=&quot;literal&quot; /&gt;<br />            &lt;/output&gt;<br />        &lt;/operation&gt;<br />    &lt;/binding&gt;<br /><br />    &lt;service name=&quot;CalculaterService&quot;&gt;<br />        &lt;port name=&quot;CalculaterServicePort&quot; binding=&quot;tns:CalculaterServicePortBinding&quot;&gt;<br />            &lt;soap:address<br />                location=&quot;http://localhost/CalculaterService&quot; /&gt;<br />        &lt;/port&gt;<br />    &lt;/service&gt;<br />&lt;/definitions&gt;<br /></pre><br /><b>Application Server</b> 除了自動產生出 <b>WSDL</b> 外，亦會產生出 <b>XML Schema</b>。<br /><br />使用瀏覽器開啟: <b>http://localhost/CalculaterService/CalculaterService_schema1.xsd</b> 會顯示出以下的 <b>XML Schema</b>:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;<br />    xmlns:tns=&quot;http://pro.ctlok.com/CalculaterService/&quot; version=&quot;1.0&quot;<br />    targetNamespace=&quot;http://pro.ctlok.com/CalculaterService/&quot;&gt;<br /><br />    &lt;xs:element name=&quot;add&quot; type=&quot;tns:add&quot;&gt;&lt;/xs:element&gt;<br />    &lt;xs:element name=&quot;addResponse&quot; type=&quot;tns:addResponse&quot;&gt;&lt;/xs:element&gt;<br />    &lt;xs:element name=&quot;subtract&quot; type=&quot;tns:subtract&quot;&gt;&lt;/xs:element&gt;<br />    &lt;xs:element name=&quot;subtractResponse&quot; type=&quot;tns:subtractResponse&quot;&gt;&lt;/xs:element&gt;<br /><br />    &lt;xs:complexType name=&quot;add&quot;&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name=&quot;arg0&quot; type=&quot;xs:int&quot;&gt;&lt;/xs:element&gt;<br />            &lt;xs:element name=&quot;arg1&quot; type=&quot;xs:int&quot;&gt;&lt;/xs:element&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:complexType name=&quot;addResponse&quot;&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name=&quot;return&quot; type=&quot;xs:int&quot;&gt;&lt;/xs:element&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:complexType name=&quot;subtract&quot;&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name=&quot;arg0&quot; type=&quot;xs:int&quot;&gt;&lt;/xs:element&gt;<br />            &lt;xs:element name=&quot;arg1&quot; type=&quot;xs:int&quot;&gt;&lt;/xs:element&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:complexType name=&quot;subtractResponse&quot;&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name=&quot;return&quot; type=&quot;xs:int&quot;&gt;&lt;/xs:element&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br />&lt;/xs:schema&gt;<br /></pre><br />看到這是資料即是成功部署到 <b>Web Service</b>，接下來使用 <a href="http://www.soapui.org/">soapUI</a> 來模擬 <b>Web Service Client</b>。<br /><br /><b>soapUI</b> 下載地址: <a href="http://sourceforge.net/projects/soapui/files/">http://sourceforge.net/projects/soapui/files/</a><br /><br />請選擇安裝程式去下載，完成安裝後打開 <b>soapUI</b>:<br /><ol><li><b>File</b> -> <b>New soapUI Project</b></li><li>在 <b>Project name</b> 輸入 <b>localhost</b> 後按 <b>OK</b></li><li>在 <b>Project</b> 上按滑鼠加鍵 -> <b>Add WSDL</b></li><li>在 <b>WSDL Location</b> 輸入 <b>http://localhost/CalculaterService/CalculaterService.wsdl</b></li></ol><br />現在應該看得到 2 個 Method 名稱，分別為 <b>add</b> 和 <b>subtract</b>。<br />打開 <b>add</b> 的 <b>Request 1</b> 左邊顯示以下資料:<br /><pre class="brush: xml">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;<br />    xmlns:ws=&quot;http://pro.ctlok.com/CalculaterService/&quot;&gt;<br />    &lt;soapenv:Header /&gt;<br />    &lt;soapenv:Body&gt;<br />        &lt;ws:add&gt;<br />            &lt;arg0&gt;?&lt;/arg0&gt;<br />            &lt;arg1&gt;?&lt;/arg1&gt;<br />        &lt;/ws:add&gt;<br />    &lt;/soapenv:Body&gt;<br />&lt;/soapenv:Envelope&gt;<br /></pre><br />改為:<br /><pre class="brush: xml">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;<br />    xmlns:ws=&quot;http://pro.ctlok.com/CalculaterService/&quot;&gt;<br />    &lt;soapenv:Header /&gt;<br />    &lt;soapenv:Body&gt;<br />        &lt;ws:add&gt;<br />            &lt;arg0&gt;1&lt;/arg0&gt;<br />            &lt;arg1&gt;2&lt;/arg1&gt;<br />        &lt;/ws:add&gt;<br />    &lt;/soapenv:Body&gt;<br />&lt;/soapenv:Envelope&gt;<br /></pre><br />然後傳送出去，右邊會顯示出以下 <b>XML</b> 即代表成功:<br /><pre class="brush: xml">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;<br />    &lt;soapenv:Body&gt;<br />        &lt;dlwmin:addResponse xmlns:dlwmin=&quot;http://pro.ctlok.com/CalculaterService/&quot;&gt;<br />            &lt;return&gt;3&lt;/return&gt;<br />        &lt;/dlwmin:addResponse&gt;<br />    &lt;/soapenv:Body&gt;<br />&lt;/soapenv:Envelope&gt;<br /></pre><br />其實在 <b>Web Service</b> 的 <b>Function</b> 不一定要傳入或返回基本型態 (short, int, long, float, double, char, byte, boolean)，可以傳入或返回 <b>Object</b> (物件)，例如:<br /><br /><b>Object Class</b>:<br /><pre class="brush: java">package sample.ws;<br /><br />public class Info{<br /><br />    private String firstName;<br />    private String lastName;<br /><br />    public String getFirstName(){<br />        return firstName;<br />    }<br /><br />    public String getLastName(){<br />        return lastName;<br />    }<br /><br />    public void setFirstName(String firstName){<br />        this.firstName = firstName;<br />    }<br /><br />    public void setLastName(String lastName){<br />        this.lastName = lastName;<br />    }<br /><br />}<br /></pre><br /><b>Web Service</b>:<br /><pre class="brush: java">@WebMethod<br />public String sayHello(Info info) {<br />    return &quot;Hello! &quot; + info.getFirstName() <br />            + &quot; &quot; + info.getLastName();<br />}<br /><br />@WebMethod<br />public Info getInfo(int id){<br />    return findInfo(id);<br />}<br /></pre><br />有時間會再講解 <b>Top Down</b> 的做法。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Java-Web-Services-Up-Running/dp/059652112X?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Java Web Services: Up and Running" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=059652112X&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=059652112X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Java-Soa-Cookbook-Eben-Hewitt/dp/0596520727?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Java Soa Cookbook" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596520727&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596520727" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Building-Web-Services-Java-Making/dp/0672326418?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Building Web Services with Java: Making Sense of XML, SOAP, WSDL, and UDDI (2nd Edition)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0672326418&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0672326418" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-3470714314351219743?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seam 2 in Websphere 7 EJB JNDI Setting]]></title>
    <link href="http://pro.ctlok.com/2011/06/seam-2-in-websphere-7-ejb-jndi-setting.html"/>
    <updated>2011-06-14T10:44:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/06/seam-2-in-websphere-7-ejb-jndi-setting</id>
    <content type="html"><![CDATA[<b>Seam</b> 在 <b>JBoss Application Server</b> 上將 <b>EJB session bean</b> 設為 <b>Seam Component</b> 根本不需要特地去設定 <b>JNDI</b>，<b>Seam</b> 自然地找到相對應的 <b>Session bean</b>。<br /><br />但在 <b>Websphere 7 Application Server</b> 上就不是這回事了，需要自行設定 <b>JNDI</b> 讓 <b>Seam</b> 找得到 (將 <b>EJB session bean</b> 設為 <b>Seam Component</b> 才需要更改 <b>JNDI</b>，純 <b>EJB session bean</b> 不需要作出任何更改)<br /><br />這篇文章只使用我認為最好的方法。<br /><br />首先到 <b>web.xml</b> 加上以下設定:<br /><br /><pre class="brush: xml">&lt;ejb-local-ref&gt;<br />    &lt;ejb-ref-name&gt;ejblocal:EjbSynchronizations&lt;/ejb-ref-name&gt;<br />    &lt;ejb-ref-type&gt;Session&lt;/ejb-ref-type&gt;<br />    &lt;local-home&gt;&lt;/local-home&gt;<br />    &lt;local&gt;org.jboss.seam.transaction.LocalEjbSynchronizations&lt;/local&gt;<br />&lt;/ejb-local-ref&gt;<br /></pre><br />然後在 <b>WEB-INF/classes</b> 加入一個 <b>seam-jndi.prpperties</b>:<br /><pre class="brush: text">com.ibm.websphere.naming.hostname.normalizer=com.ibm.ws.naming.util.DefaultHostnameNormalizer<br />java.naming.factory.initial=com.ibm.websphere.naming.WsnInitialContextFactory<br />com.ibm.websphere.naming.name.syntax=jndi<br />com.ibm.websphere.naming.namespace.connection=lazy<br />com.ibm.ws.naming.ldap.ldapinitctxfactory=com.sun.jndi.ldap.LdapCtxFactory<br />com.ibm.websphere.naming.jndicache.cacheobject=populated<br />com.ibm.websphere.naming.namespaceroot=defaultroot<br />com.ibm.ws.naming.wsn.factory.initial=com.ibm.ws.naming.util.WsnInitCtxFactory<br />com.ibm.websphere.naming.jndicache.maxcachelife=0<br />com.ibm.websphere.naming.jndicache.maxentrylife=0<br />com.ibm.websphere.naming.jndicache.cachename=providerURL<br />java.naming.provider.url=corbaloc:rir:/NameServiceServerRoot<br />java.naming.factory.url.pkgs=com.ibm.ws.runtime\:com.ibm.ws.naming<br /></pre><br />再將 <b>WEB-INF/components.xml</b> 內的 <b>jndi-pattern</b> 更改為:<br /><pre class="brush: xml">&lt;core:init <br />    jndi-pattern=&quot;ejblocal:#{ejbName}&quot; <br />    debug=&quot;false&quot; /&gt;<br /></pre><br />最後就是設定 <b>Websphere</b> 的 <b>EJB session bean JNDI</b>，在 <b>EJB Project</b> 內的 <b>META-INF</b> 加入 <b>ibm-ejb-jar-bnd.xml</b>:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br />&lt;ejb-jar-bnd xmlns=&quot;http://websphere.ibm.com/xml/ns/javaee&quot;<br />    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br />    xsi:schemaLocation=&quot;http://websphere.ibm.com/xml/ns/javaee <br />                      http://websphere.ibm.com/xml/ns/javaee/ibm-ejb-jar-bnd_1_0.xsd&quot;<br />    version=&quot;1.0&quot;&gt;<br /><br />    &lt;session name=&quot;MyBean&quot; simple-binding-name=&quot;MyBean&quot; /&gt;<br /><br />&lt;/ejb-jar-bnd&gt;<br /></pre><br /><b>simple-binding-name</b> 就是 <b>JNDI</b>，這樣 <b>Seam</b> 會照著 <b>components.xml</b> 內的 <b>jndi-pattern</b> 去使用以下的 <b>JNDI</b> 找到 <b>EJB session bean</b>:<br /><pre class="brush: text">ejblocal:MyBean<br /></pre><br />如果 <b>components.xml</b> 內的 <b>jndi-pattern</b> 改變了，亦要去更改 <b>simple-binding-name</b>。<br />例如:<br /><pre class="brush: xml">&lt;core:init <br />    jndi-pattern=&quot;ejblocal:myModule/#{ejbName}&quot; <br />    debug=&quot;false&quot; /&gt;<br /></pre><br /><b>simple-binding-name</b> 亦要更改為:<br /><pre class="brush: xml">&lt;session name=&quot;MyBean&quot; <br />    simple-binding-name=&quot;MyModule/myBean&quot; /&gt;<br /></pre><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Seam-Action-Dan-Allen/dp/1933988401?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Seam in Action" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1933988401&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1933988401" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Seam-Framework-Experience-Evolution-Java/dp/0137129394?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Seam Framework: Experience the Evolution of Java EE (2nd Edition)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0137129394&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0137129394" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/WebSphere-Application-Server-Internals-Professionals/dp/1430219580?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Pro IBM WebSphere Application Server 7 Internals (Books for Professionals by Professionals)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1430219580&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1430219580" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-7344194767850097008?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Xstream 程式庫去深層複製 Java 物件]]></title>
    <link href="http://pro.ctlok.com/2011/06/java-xstream-to-deep-clone-object.html"/>
    <updated>2011-06-13T15:54:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/06/java-xstream-to-deep-clone-object</id>
    <content type="html"><![CDATA[在某些時候，為免改寫原本 <b>Object</b> 的數據，而需要複製一個一模一樣的 <b>Object</b> 出來，例如記下當時的 <b>Object</b> 狀態，然後備份等等。如果使用 <b>Getter</b> 和 <b>Setter</b> 一個一個數據去複製，一定會大大增加程式碼行數，亦只能對已知的 <b>Object</b> 去複製。當這個 <b>Object</b> 新增一項數據時，便要再重寫複製方法，所以這方法是很沒有效率的。<br /><br /><b>Xstream</b> 原本是 <b>Java</b> 操作 <b>XML</b> 的一個 <b>Library</b>，除此之外亦可以使用 <b>Xstream</b> 去複製 <b>Object</b> (將 <b>Java Object</b> 轉換成 <b>XML</b> 再轉換為 <b>Java Object</b>)。<br /><br /><b>Xstream</b> 官方網址: <a href="http://xstream.codehaus.org/">http://xstream.codehaus.org/</a><br /><br />下載後將 <b>.jar</b> 加到 <b>class path</b>。<br /><br />假設現在有 <b>Parent</b> 和 <b>Info</b> 2 個 <b>Object</b>，這 2 個 <b>Object</b> 都是作為傳遞數據的 <b>Object</b>。<br /><br /><b>Parent</b>:<br /><pre class="brush: java">package xstream.sample;<br /><br />public class Parent {<br /><br />    private String firstName;<br />    private String lastName;<br /><br />    public String getFirstName() {<br />        return firstName;<br />    }<br /><br />    public void setFirstName(String firstName) {<br />        this.firstName = firstName;<br />    }<br /><br />    public String getLastName() {<br />        return lastName;<br />    }<br /><br />    public void setLastName(String lastName) {<br />        this.lastName = lastName;<br />    }<br /><br />    @Override<br />    public String toString() {<br />        return &quot;Parent [firstName=&quot; + firstName + &quot;, lastName=&quot; + lastName<br />                + &quot;]&quot;;<br />    }<br /><br />}<br /></pre><br /><b>Info</b>:<br /><pre class="brush: java">package xstream.sample;<br /><br />import java.util.LinkedList;<br />import java.util.List;<br /><br />public class Info {<br /><br />    private String firstName;<br />    private String lastName;<br />    private int age;<br />    private List&lt;String&gt; hobbies;<br />    private Parent parent;<br />    <br />    public String getFirstName() {<br />        return firstName;<br />    }<br /><br />    public void setFirstName(String firstName) {<br />        this.firstName = firstName;<br />    }<br /><br />    public String getLastName() {<br />        return lastName;<br />    }<br /><br />    public void setLastName(String lastName) {<br />        this.lastName = lastName;<br />    }<br /><br />    public int getAge() {<br />        return age;<br />    }<br /><br />    public void setAge(int age) {<br />        this.age = age;<br />    }<br /><br />    public List&lt;String&gt; getHobbies() {<br />        return hobbies;<br />    }<br /><br />    public void setHobbies(List&lt;String&gt; hobbies) {<br />        this.hobbies = hobbies;<br />    }<br /><br />    public void addHobby(String hobby) {<br />        if (hobbies == null)<br />            hobbies = new LinkedList&lt;String&gt;();<br />        hobbies.add(hobby);<br />    }<br />    <br />    public Parent getParent() {<br />        return parent;<br />    }<br /><br />    public void setParent(Parent parent) {<br />        this.parent = parent;<br />    }<br /><br />    @Override<br />    public String toString() {<br />        return &quot;Info [firstName=&quot; + firstName + &quot;, lastName=&quot; + lastName<br />                + &quot;, age=&quot; + age + &quot;, hobbies=&quot; + hobbies + &quot;, parent=&quot;<br />                + parent + &quot;]&quot;;<br />    }<br />    <br />}<br /></pre><br />付責複製的 <b>Function</b>:<br /><br /><pre class="brush: java">package xstream.sample;<br /><br />import com.thoughtworks.xstream.XStream;<br />import com.thoughtworks.xstream.io.xml.DomDriver;<br /><br />public class Main {<br /><br />    private static final XStream XSTREAM = new XStream(new DomDriver());<br />    <br />    @SuppressWarnings(&quot;unchecked&quot;)<br />    public static &lt;T&gt; T cloneObject(T src){<br />        return (T) XSTREAM.fromXML(XSTREAM.toXML(src));<br />    }<br /><br />}<br /></pre><br />測試的程式:<br /><pre class="brush: java">package xstream.sample;<br /><br />import com.thoughtworks.xstream.XStream;<br />import com.thoughtworks.xstream.io.xml.DomDriver;<br /><br />public class Main {<br /><br />    private static final XStream XSTREAM = new XStream(new DomDriver());<br />    <br />    public static void main(String[] args) {<br />        //Create info object<br />        Info info = new Info();<br />        Parent parent = new Parent();<br />        <br />        //Set data<br />        info.setFirstName(&quot;Lawrence&quot;);<br />        info.setFirstName(&quot;Cheung&quot;);<br />        info.setAge(24);<br />        info.addHobby(&quot;Sports&quot;);<br />        info.addHobby(&quot;Reading&quot;);<br />        <br />        parent.setFirstName(&quot;Tom&quot;);<br />        parent.setLastName(&quot;Cheung&quot;);<br />        info.setParent(parent);<br />        <br />        //Print my info<br />        System.out.println(&quot;Original object: &quot; + info);<br />        <br />        System.out.println(&quot;Now, we are going to clone info object&quot;);<br />        System.out.println();<br />        Info clonedInfo = cloneObject(info);<br />        <br />        //Print cloned info<br />        System.out.println(&quot;Cloned object: &quot; + clonedInfo);<br />        System.out.println();<br />        <br />        //Modify original info<br />        System.out.println(&quot;Change original info age to 25 and parent first name set to John.&quot;);<br />        info.setAge(25);<br />        info.getParent().setFirstName(&quot;John&quot;);<br />        <br />        System.out.println();<br />        System.out.println(&quot;Original object: &quot; + info);<br />        System.out.println(&quot;Cloned object: &quot; + clonedInfo);<br />    }<br />    <br />    @SuppressWarnings(&quot;unchecked&quot;)<br />    public static &lt;T&gt; T cloneObject(T src){<br />        return (T) XSTREAM.fromXML(XSTREAM.toXML(src));<br />    }<br /><br />}<br /><br /></pre><br />結果顯示如下:<br /><pre class="brush: text">Original object: Info [firstName=Cheung, lastName=null, age=24, hobbies=[Sports, Reading], parent=Parent [firstName=Tom, lastName=Cheung]]<br />Now, we are going to clone info object<br /><br />Cloned object: Info [firstName=Cheung, lastName=null, age=24, hobbies=[Sports, Reading], parent=Parent [firstName=Tom, lastName=Cheung]]<br /><br />Change original info age to 25 and parent first name set to John.<br /><br />Original object: Info [firstName=Cheung, lastName=null, age=25, hobbies=[Sports, Reading], parent=Parent [firstName=John, lastName=Cheung]]<br />Cloned object: Info [firstName=Cheung, lastName=null, age=24, hobbies=[Sports, Reading], parent=Parent [firstName=Tom, lastName=Cheung]]<br /></pre><br />可以看出連 <b>Parent</b> 在內也一起複製了，就算更改了原本的 <b>Info Object</b> 也不會改動到複製出來的 <b>Object</b>，即是 2 個變數的 <b>Pointer</b> 不是指向同一個位置。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Head First Java, 2nd Edition" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596009208&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596009208" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Effective Java (2nd Edition)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0321356683&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0321356683" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Sams-Teach-Yourself-Java-Hours/dp/0672330768?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Sams Teach Yourself Java in 24 Hours (5th Edition)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0672330768&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0672330768" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-4708286809936453118?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Apache Commons VFS 來操作 SFTP]]></title>
    <link href="http://pro.ctlok.com/2011/06/apache-commons-vfs-for-sftp.html"/>
    <updated>2011-06-13T12:35:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/06/apache-commons-vfs-for-sftp</id>
    <content type="html"><![CDATA[在 <b>Java</b> 使用 <b>FTP</b> 去上載檔案，下載檔案或去做其他操作也是很簡單，因為 <b>Java API</b> 已經包括了對 <b>FTP</b> 的支援。如果不是使用 <b>FTP</b>，而是使用 <b>SFTP: SSH File Transfer Protocol</b>，使用<b>Java API</b> 實作便有點麻煩了。<br /><br />幸好 <b>Apache Commons VFS</b> 替我們實作了 <b>SFTP</b> 的操作，<b>Apache Commons VFS</b> 配合 <a href="http://www.jcraft.com/jsch/">JSch</a> 使我們可以很簡單地使用 <b>SSH</b> 連接 <b>Server</b> 和上載檔案，下載檔案等等操作。<br /><br />廢話不多說，首先要準備 3 個 <b>Library</b>:<br /><ul><li>Apache Commons VFS - <a href="http://commons.apache.org/vfs/download_vfs.cgi">http://commons.apache.org/vfs/download_vfs.cgi</a><br /></li><li>Apache Commons Logging - <a href="http://commons.apache.org/logging/download_logging.cgi">http://commons.apache.org/logging/download_logging.cgi</a></li><li>JSch - <a href="http://www.jcraft.com/jsch/">http://www.jcraft.com/jsch/</a></li></ul><br />下載好後將 <b>.jar</b> 加到 <b>class path</b> 令程式找到這些 <b>Library</b>。<br /><br />再來就是寫程式，為了方便好看，我會將所有程式碼放到 <b>Main class</b> 內。<br /><br />第一步是製作一個 <b>Function</b> 去將 <b>Protocol</b>，<b>Host Name</b>，<b>Username</b>，<b>Password</b> 和 <b>Server</b> 上的檔案位置連接起來 (Factory Method)。令到 <b>Apache Commons VFS</b> 能讀得懂。<br /><pre class="brush: java">public static String createConnectionString(String hostName,<br />        String username, String password, String remoteFilePath) {<br />    // result: &quot;sftp://user:123456@domainname.com/resume.pdf<br />    return &quot;sftp://&quot; + username + &quot;:&quot; + password + &quot;@&quot; + hostName + &quot;/&quot;<br />            + remoteFilePath;<br />}<br /></pre><br />第二步是製作一個 <b>Function</b> 去製造出一個 <b>SFTP</b> 預設的設定 (Factory Method):<br /><pre class="brush: java">public static FileSystemOptions createDefaultOptions()<br />        throws FileSystemException {<br />    // Create SFTP options<br />    FileSystemOptions opts = new FileSystemOptions();<br /><br />    // SSH Key checking<br />    SftpFileSystemConfigBuilder.getInstance().setStrictHostKeyChecking(<br />            opts, &quot;no&quot;);<br /><br />    // Root directory set to user home<br />    SftpFileSystemConfigBuilder.getInstance().setUserDirIsRoot(opts, true);<br /><br />    // Timeout is count by Milliseconds<br />    SftpFileSystemConfigBuilder.getInstance().setTimeout(opts, 10000);<br /><br />    return opts;<br />}<br /></pre><br />第三步是製作一個上載檔案的 <b>Function</b>:<br /><pre class="brush: java">public static void upload(String hostName, String username,<br />        String password, String localFilePath, String remoteFilePath) {<br /><br />    File f = new File(localFilePath);<br />    if (!f.exists())<br />        throw new RuntimeException(&quot;Error. Local file not found&quot;);<br /><br />    StandardFileSystemManager manager = new StandardFileSystemManager();<br /><br />    try {<br />        manager.init();<br /><br />        // Create local file object<br />        FileObject localFile = manager.resolveFile(f.getAbsolutePath());<br /><br />        // Create remote file object<br />        FileObject remoteFile = manager.resolveFile(<br />                createConnectionString(hostName, username, password,<br />                        remoteFilePath), createDefaultOptions());<br /><br />        // Copy local file to sftp server<br />        remoteFile.copyFrom(localFile, Selectors.SELECT_SELF);<br /><br />        System.out.println(&quot;File upload success&quot;);<br />    } catch (Exception e) {<br />        throw new RuntimeException(e);<br />    } finally {<br />        manager.close();<br />    }<br />}<br /></pre><br />在這裡可以測試一下上載檔案的 <b>Function</b> 是否沒有問題:<br /><pre class="brush: java">/*<br /> * args[0]: hostName <br /> * args[1]: username <br /> * args[2]: password <br /> * args[3]:localFilePath <br /> * args[4]: remoteFilePath<br /> */<br />public static void main(String[] args) {<br />    if (args.length &lt; 5)<br />        throw new RuntimeException(<br />                &quot;Error. Please enter &quot;<br />                        + &quot;args[0]: hostName, args[1]: username, args[2]: password, &quot;<br />                        + &quot;args[3]: localFilePath, args[4]: remoteFilePath.&quot;);<br /><br />    upload(args[0], args[1], args[2], args[3], args[4]);<br />}<br /></pre><br />成功後 <b>Console</b> 會打印出 <b>File upload success</b>。<br /><br />再來是加下載檔案的 <b>Function</b>:<br /><pre class="brush: java">public static void download(String hostName, String username,<br />        String password, String localFilePath, String remoteFilePath) {<br /><br />    StandardFileSystemManager manager = new StandardFileSystemManager();<br /><br />    try {<br />        manager.init();<br /><br />        String downloadFilePath = localFilePath.substring(0,<br />                localFilePath.lastIndexOf(&quot;.&quot;))<br />                + &quot;_downlaod_from_sftp&quot;<br />                + localFilePath.substring(localFilePath.lastIndexOf(&quot;.&quot;),<br />                        localFilePath.length());<br /><br />        // Create local file object<br />        FileObject localFile = manager.resolveFile(downloadFilePath);<br /><br />        // Create remote file object<br />        FileObject remoteFile = manager.resolveFile(<br />                createConnectionString(hostName, username, password,<br />                        remoteFilePath), createDefaultOptions());<br /><br />        // Copy local file to sftp server<br />        localFile.copyFrom(remoteFile, Selectors.SELECT_SELF);<br /><br />        System.out.println(&quot;File download success&quot;);<br />    } catch (Exception e) {<br />        throw new RuntimeException(e);<br />    } finally {<br />        manager.close();<br />    }<br />}<br /></pre><br />測試檔案是否存在的 <b>Function</b>:<br /><pre class="brush: java">public static boolean exist(String hostName, String username,<br />        String password, String remoteFilePath) {<br />    StandardFileSystemManager manager = new StandardFileSystemManager();<br /><br />    try {<br />        manager.init();<br /><br />        // Create remote object<br />        FileObject remoteFile = manager.resolveFile(<br />                createConnectionString(hostName, username, password,<br />                        remoteFilePath), createDefaultOptions());<br /><br />        System.out.println(&quot;File exist: &quot; + remoteFile.exists());<br /><br />        return remoteFile.exists();<br />    } catch (Exception e) {<br />        throw new RuntimeException(e);<br />    } finally {<br />        manager.close();<br />    }<br />}<br /></pre><br />刪除 <b>Server</b> 檔案的 <b>Function</b>:<br /><pre class="brush: java">public static void delete(String hostName, String username,<br />        String password, String remoteFilePath) {<br />    StandardFileSystemManager manager = new StandardFileSystemManager();<br /><br />    try {<br />        manager.init();<br /><br />        // Create remote object<br />        FileObject remoteFile = manager.resolveFile(<br />                createConnectionString(hostName, username, password,<br />                        remoteFilePath), createDefaultOptions());<br /><br />        if (remoteFile.exists()) {<br />            remoteFile.delete();<br />            System.out.println(&quot;Delete remote file success&quot;);<br />        }<br />    } catch (Exception e) {<br />        throw new RuntimeException(e);<br />    } finally {<br />        manager.close();<br />    }<br />}<br /></pre><br />完整的程式:<br /><pre class="brush: java">package sftp.sample;<br /><br />import java.io.File;<br /><br />import org.apache.commons.vfs.FileObject;<br />import org.apache.commons.vfs.FileSystemException;<br />import org.apache.commons.vfs.FileSystemOptions;<br />import org.apache.commons.vfs.Selectors;<br />import org.apache.commons.vfs.impl.StandardFileSystemManager;<br />import org.apache.commons.vfs.provider.sftp.SftpFileSystemConfigBuilder;<br /><br />public class Main {<br /><br />    /*<br />     * args[0]: hostName <br />     * args[1]: username <br />     * args[2]: password<br />     * args[3]: localFilePath <br />     * args[4]: remoteFilePath<br />     */<br />    public static void main(String[] args) {<br />        if (args.length &lt; 5)<br />            throw new RuntimeException(<br />                    &quot;Error. Please enter &quot;<br />                            + &quot;args[0]: hostName, args[1]: username, args[2]: password, &quot;<br />                            + &quot;args[3]: localFilePath, args[4]: remoteFilePath.&quot;);<br /><br />        upload(args[0], args[1], args[2], args[3], args[4]);<br />        exist(args[0], args[1], args[2], args[4]);<br />        download(args[0], args[1], args[2], args[3], args[4]);<br />        delete(args[0], args[1], args[2], args[4]);<br />    }<br /><br />    public static void upload(String hostName, String username,<br />            String password, String localFilePath, String remoteFilePath) {<br /><br />        File f = new File(localFilePath);<br />        if (!f.exists())<br />            throw new RuntimeException(&quot;Error. Local file not found&quot;);<br /><br />        StandardFileSystemManager manager = new StandardFileSystemManager();<br /><br />        try {<br />            manager.init();<br /><br />            // Create local file object<br />            FileObject localFile = manager.resolveFile(f.getAbsolutePath());<br /><br />            // Create remote file object<br />            FileObject remoteFile = manager.resolveFile(<br />                    createConnectionString(hostName, username, password,<br />                            remoteFilePath), createDefaultOptions());<br /><br />            // Copy local file to sftp server<br />            remoteFile.copyFrom(localFile, Selectors.SELECT_SELF);<br /><br />            System.out.println(&quot;File upload success&quot;);<br />        } catch (Exception e) {<br />            throw new RuntimeException(e);<br />        } finally {<br />            manager.close();<br />        }<br />    }<br /><br />    public static void download(String hostName, String username,<br />            String password, String localFilePath, String remoteFilePath) {<br /><br />        StandardFileSystemManager manager = new StandardFileSystemManager();<br /><br />        try {<br />            manager.init();<br /><br />            String downloadFilePath = localFilePath.substring(0,<br />                    localFilePath.lastIndexOf(&quot;.&quot;))<br />                    + &quot;_downlaod_from_sftp&quot;<br />                    + localFilePath.substring(localFilePath.lastIndexOf(&quot;.&quot;),<br />                            localFilePath.length());<br /><br />            // Create local file object<br />            FileObject localFile = manager.resolveFile(downloadFilePath);<br /><br />            // Create remote file object<br />            FileObject remoteFile = manager.resolveFile(<br />                    createConnectionString(hostName, username, password,<br />                            remoteFilePath), createDefaultOptions());<br /><br />            // Copy local file to sftp server<br />            localFile.copyFrom(remoteFile, Selectors.SELECT_SELF);<br /><br />            System.out.println(&quot;File download success&quot;);<br />        } catch (Exception e) {<br />            throw new RuntimeException(e);<br />        } finally {<br />            manager.close();<br />        }<br />    }<br /><br />    public static void delete(String hostName, String username,<br />            String password, String remoteFilePath) {<br />        StandardFileSystemManager manager = new StandardFileSystemManager();<br /><br />        try {<br />            manager.init();<br /><br />            // Create remote object<br />            FileObject remoteFile = manager.resolveFile(<br />                    createConnectionString(hostName, username, password,<br />                            remoteFilePath), createDefaultOptions());<br /><br />            if (remoteFile.exists()) {<br />                remoteFile.delete();<br />                System.out.println(&quot;Delete remote file success&quot;);<br />            }<br />        } catch (Exception e) {<br />            throw new RuntimeException(e);<br />        } finally {<br />            manager.close();<br />        }<br />    }<br /><br />    public static boolean exist(String hostName, String username,<br />            String password, String remoteFilePath) {<br />        StandardFileSystemManager manager = new StandardFileSystemManager();<br /><br />        try {<br />            manager.init();<br /><br />            // Create remote object<br />            FileObject remoteFile = manager.resolveFile(<br />                    createConnectionString(hostName, username, password,<br />                            remoteFilePath), createDefaultOptions());<br /><br />            System.out.println(&quot;File exist: &quot; + remoteFile.exists());<br /><br />            return remoteFile.exists();<br />        } catch (Exception e) {<br />            throw new RuntimeException(e);<br />        } finally {<br />            manager.close();<br />        }<br />    }<br /><br />    public static String createConnectionString(String hostName,<br />            String username, String password, String remoteFilePath) {<br />        // result: &quot;sftp://user:123456@domainname.com/resume.pdf<br />        return &quot;sftp://&quot; + username + &quot;:&quot; + password + &quot;@&quot; + hostName + &quot;/&quot;<br />                + remoteFilePath;<br />    }<br /><br />    public static FileSystemOptions createDefaultOptions()<br />            throws FileSystemException {<br />        // Create SFTP options<br />        FileSystemOptions opts = new FileSystemOptions();<br /><br />        // SSH Key checking<br />        SftpFileSystemConfigBuilder.getInstance().setStrictHostKeyChecking(<br />                opts, &quot;no&quot;);<br /><br />        // Root directory set to user home<br />        SftpFileSystemConfigBuilder.getInstance().setUserDirIsRoot(opts, true);<br /><br />        // Timeout is count by Milliseconds<br />        SftpFileSystemConfigBuilder.getInstance().setTimeout(opts, 10000);<br /><br />        return opts;<br />    }<br /><br />}<br /></pre><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Jakarta-Commons-Cookbook-Timothy-OBrien/dp/059600706X?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Jakarta Commons Cookbook" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=059600706X&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=059600706X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Pro-Jakarta-Commons-Harshad-Oak/dp/1590592832?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Pro Jakarta Commons" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1590592832&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1590592832" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/SSH-Secure-Shell-Definitive-Guide/dp/0596008953?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="SSH, The Secure Shell: The Definitive Guide" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596008953&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596008953" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-7245793115940246788?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse Web Development Plugin - Aptana Studio]]></title>
    <link href="http://pro.ctlok.com/2011/03/eclipse-web-development-plugin-aptana.html"/>
    <updated>2011-03-12T00:10:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/03/eclipse-web-development-plugin-aptana</id>
    <content type="html"><![CDATA[介紹一款非常好用的 <b>Web</b> 開發工具 - <b>Aptana Studio</b>。(其實我用了很久，以為已經發過文章介紹&#8230;）<br /><br />這款工具對編寫 <b>HTML</b>，<b>CSS</b> 和 <b>Javascript</b> 都非常有幫助，而且對 <b>Javascript Framework</b> (例如 <b>jQuery</b> 和 <b>Prototype</b> 等等) 有題示功能(需要再安裝 Plugin)，比起 Eclipse 預設的工具好用多了。<br /><br />除了 <b>HTML</b>，<b>CSS</b> 和 <b>Javascript</b> 外。<b>Aptana Studio</b> 亦支援 <b>Ruby</b>，<b>Python</b> 和 <b>PHP</b> 的開發 (<b>PHP</b> 支援已經停止更新)。<br /><br />官方網址: <a href="http://www.aptana.com/">http://www.aptana.com/</a><br /><br />下載頁面: <a href="http://www.aptana.com/products/studio2/download">http://www.aptana.com/products/studio2/download</a><br /><br />進入下載頁面後只需選擇 <b>Eclipse Plugin</b>，然後按 <b>Download</b>，就會出現 <b>Eclipse</b> 的 <b>Update Site URL</b>。<br /><br />如果不喜歡作為 <b>Eclipse Plugin</b> 去使用，亦可以下載安裝版本去使用 (我覺得安裝版沒有那麼方便&#8230;)。 <br /><br />亦可以試用開發版本的 <b>Aptana Studio 3</b>。現在的版本已經很穩定，我用的時候亦沒發現什麼 Bug 了。<br />下載頁面: <a href="http://www.aptana.com/products/studio3/download">http://www.aptana.com/products/studio3/download</a><br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Dynamic-Web-Programming-Beginners-Osborne/dp/0071633448?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Dynamic Web Programming: A Beginner&#39;s Guide (Beginner&#39;s Guide (Osborne Mcgraw Hill))" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0071633448&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0071633448" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Pro-Javascript-RIA-Techniques-Presentation/dp/1430219343?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Pro Javascript RIA Techniques: Best Practices, Performance and Presentation" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1430219343&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1430219343" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Aptana-RadRails-Development-comprehensive-professional/dp/1847193986?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Aptana RadRails: An IDE for Rails Development: A comprehensive guide to using RadRails to develop your Ruby on Rails projects in a professional and productive manner" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1847193986&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1847193986" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-1902012302779561873?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven 使用 Jboss Embedded 去測試 Seam 元件 (Unit Test)]]></title>
    <link href="http://pro.ctlok.com/2011/01/maven-jboss-embedded-seam-unit-test.html"/>
    <updated>2011-01-07T15:24:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/01/maven-jboss-embedded-seam-unit-test</id>
    <content type="html"><![CDATA[在 <b>Maven</b> 的測試中要測試 <b>Seam</b> 元件是需要一個 <b>Java EE</b> 的環境去運行 <b>Seam</b>，而 <b>Jboss</b> 亦提供了一個 Java EE 的環境去幫助我們去測試 Seam 元件，這個就是 <b>Jboss Embedded</b>。使用 <b>Jboss Embedded</b> 加上 <b>TestNG</b> 這一套 <b>Testing Framework</b>，很簡單就可以做到全自動測試。<br /><br />首先要在 <b>pom.xml</b> 去加入以下的 <b>dependency</b>:<br /><pre class="brush: xml">&lt;dependency&gt;<br />    &lt;groupId&gt;org.testng&lt;/groupId&gt;<br />    &lt;artifactId&gt;testng&lt;/artifactId&gt;<br />    &lt;version&gt;5.14.2&lt;/version&gt;<br />    &lt;type&gt;jar&lt;/type&gt;<br />    &lt;scope&gt;test&lt;/scope&gt;<br />&lt;/dependency&gt;<br /><br />&lt;dependency&gt;<br />    &lt;groupId&gt;org.jboss.seam.embedded&lt;/groupId&gt;<br />    &lt;artifactId&gt;jboss-embedded-api&lt;/artifactId&gt;<br />    &lt;version&gt;beta3.SP12&lt;/version&gt;<br />    &lt;type&gt;jar&lt;/type&gt;<br />    &lt;scope&gt;test&lt;/scope&gt;<br />    &lt;exclusions&gt;<br />        &lt;exclusion&gt;<br />            &lt;groupId&gt;org.jboss.microcontainer&lt;/groupId&gt;<br />            &lt;artifactId&gt;jboss-deployers-client-spi&lt;/artifactId&gt;<br />        &lt;/exclusion&gt;<br />        &lt;exclusion&gt;<br />            &lt;groupId&gt;org.jboss.microcontainer&lt;/groupId&gt;<br />            &lt;artifactId&gt;jboss-deployers-core-spi&lt;/artifactId&gt;<br />        &lt;/exclusion&gt;<br />    &lt;/exclusions&gt;<br />&lt;/dependency&gt;<br /><br />&lt;dependency&gt;<br /> &lt;groupId&gt;org.jboss.seam.embedded&lt;/groupId&gt;<br /> &lt;artifactId&gt;jboss-embedded-all&lt;/artifactId&gt;<br /> &lt;version&gt;beta3.SP12&lt;/version&gt;<br /> &lt;type&gt;jar&lt;/type&gt;<br /> &lt;scope&gt;test&lt;/scope&gt;<br />&lt;/dependency&gt;<br /><br />&lt;dependency&gt;<br /> &lt;groupId&gt;org.jboss.seam.embedded&lt;/groupId&gt;<br /> &lt;artifactId&gt;thirdparty-all&lt;/artifactId&gt;<br /> &lt;version&gt;beta3.SP12&lt;/version&gt;<br /> &lt;type&gt;jar&lt;/type&gt;<br /> &lt;scope&gt;test&lt;/scope&gt;<br />&lt;/dependency&gt;<br /><br />&lt;dependency&gt;<br /> &lt;groupId&gt;org.jboss.seam.embedded&lt;/groupId&gt;<br /> &lt;artifactId&gt;hibernate-all&lt;/artifactId&gt;<br /> &lt;version&gt;beta3.SP12&lt;/version&gt;<br /> &lt;type&gt;jar&lt;/type&gt;<br /> &lt;scope&gt;test&lt;/scope&gt;<br />&lt;/dependency&gt;<br /><br />&lt;dependency&gt;<br /> &lt;groupId&gt;javax.faces&lt;/groupId&gt;<br /> &lt;artifactId&gt;jsf-api&lt;/artifactId&gt;<br /> &lt;version&gt;1.2_13&lt;/version&gt;<br /> &lt;type&gt;jar&lt;/type&gt;<br /> &lt;scope&gt;test&lt;/scope&gt;<br />&lt;/dependency&gt;<br /></pre><br />加入後就到在 <b>Seam</b> 的下載檔案內找出 <b>bootstrap</b> 這個資料夾，然將這個資料夾複製到 <b>Maven Project</b> 的 src/test/resource 下，這個資料夾是起動 <b>Jboss Embedded</b> 的設定檔案。<br /><br />再到 <b>pom.xml</b> 加入以下的 <b>plugin</b>:<br /><pre class="brush: xml">&lt;plugin&gt;<br />    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br />    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;<br />    &lt;configuration&gt;<br />        &lt;useManifestOnlyJar&gt;false&lt;/useManifestOnlyJar&gt;<br />        &lt;forkMode&gt;once&lt;/forkMode&gt;<br />        &lt;argLine&gt;-Dsun.lang.ClassLoader.allowArraySyntax=true&lt;/argLine&gt;<br />        &lt;additionalClasspathElements&gt;<br />            &lt;additionalClasspathElement&gt;${basedir}/src/resource/bootstrap&lt;/additionalClasspathElement&gt;<br />        &lt;/additionalClasspathElements&gt;<br />        &lt;suiteXmlFiles&gt;<br />            &lt;suiteXmlFile&gt;${project.build.testOutputDirectory}/testing.xml&lt;/suiteXmlFile&gt;<br />        &lt;/suiteXmlFiles&gt;<br />        &lt;classpathDependencyExcludes&gt;<br />            &lt;classpathDependencyExclude&gt;javaee:javaee-api&lt;/classpathDependencyExclude&gt;<br />            &lt;classpathDependencyExclude&gt;javax.ejb:ejb-api&lt;/classpathDependencyExclude&gt;<br />        &lt;/classpathDependencyExcludes&gt;<br />    &lt;/configuration&gt;<br />&lt;/plugin&gt;<br /></pre><br />如果你的 <b>pom.xml</b> 有加入到 <b>javaee-api</b> 或 <b>ejb-api</b> 的 dependency，在測試時不要將這 2 個 <b>JAR</b> 加到 <b>Classpath</b> 中，<b>Jboss Embedded</b> 會不能起動的。<br /><br />如果要連接 <b>Database</b>，可以在 src/test/resource/META-INF 加入一個 xxx-ds.xml 去設定 <b>Data Source</b>，<b>Jboss Embedded</b> 會自動加入此 <b>Data Source</b>。<br /><br /><b>Data Source</b> 的大概是以下的樣子:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br />&lt;!DOCTYPE datasources<br />    PUBLIC &quot;-//JBoss//DTD JBOSS JCA Config 1.5//EN&quot;<br />    &quot;http://www.jboss.org/j2ee/dtd/jboss-ds_1_5.dtd&quot;&gt;<br />&lt;datasources&gt;<br /><br />    &lt;local-tx-datasource&gt;<br />        &lt;jndi-name&gt;jdbc/ctlok&lt;/jndi-name&gt;<br />        &lt;use-java-context&gt;true&lt;/use-java-context&gt;<br />        &lt;connection-url&gt;jdbc:oracle:thin:@pro.ctlok.com:1521:ctlok&lt;/connection-url&gt;<br />        &lt;driver-class&gt;oracle.jdbc.OracleDriver&lt;/driver-class&gt;<br />        &lt;user-name&gt;ctlok&lt;/user-name&gt;<br />        &lt;password&gt;ctlok&lt;/password&gt;<br />    &lt;/local-tx-datasource&gt;<br /><br />&lt;/datasources&gt;<br /></pre><br />在 <b>persistence.xml</b> 使用 <b>java:jdbc/ctlok</b> 的 <b>JNDI</b> 就可以找到 <b>Data Source</b> 了。<br /><br />設定大致上完成了，可以寫一些 <b>Test Class</b> 去測試一下。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Seam-Action-Dan-Allen/dp/1933988401?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Seam in Action" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1933988401&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1933988401" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Seam-Framework-Experience-Evolution-Java/dp/0137129394?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Seam Framework: Experience the Evolution of Java EE (2nd Edition)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0137129394&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0137129394" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Practical-JBoss%C3%82%C2%AE-Seam-Projects-Farley/dp/1590598636?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Practical JBoss® Seam Projects" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1590598636&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1590598636" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-1166507011383147875?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[將 Seam 的 Hibernate Persistence Provider 轉為 EclipseLink]]></title>
    <link href="http://pro.ctlok.com/2010/10/seam-eclipselink-persistence-provider.html"/>
    <updated>2010-10-07T11:51:00+08:00</updated>
    <id>http://pro.ctlok.com/2010/10/seam-eclipselink-persistence-provider</id>
    <content type="html"><![CDATA[<b>JBoss Seam Framework</b> 預設的 <b>Persistence Provider</b> 是 <b>Hibernate</b>，但 <b>Hibernate</b> 未必能夠滿足不同 <b>Database</b> 的需求，Seam 亦提供了一種方法將 <b>Hibernate</b> 轉為 <b>OpenJPA</b> 或其他 <b>Persistence Provider</b>。<br /><br />如果你需要將 <b>Hibernate</b> 轉為使用 <b>OpenJPA</b> 可參考這篇: <a href="http://seamframework.org/Documentation/UsingOpenJPAAsPersistenceProviderInsteadOfHibernate">http://seamframework.org/Documentation/UsingOpenJPAAsPersistenceProviderInsteadOfHibernate</a><br /><br />以下的是將 <b>Hibernate</b> 轉為使用 <b>EclipseLink</b> 的方法。<br /><br />首先要更改 <b>persistence.xml</b>:<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence"<br /> xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"<br /> xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"<br /> version="1.0"&gt;<br /> &lt;persistence-unit name="ctlok" transaction-type="RESOURCE_LOCAL"&gt;<br />  &lt;provider&gt;org.eclipse.persistence.jpa.PersistenceProvider&lt;/provider&gt;<br />  &lt;non-jta-data-source&gt;jdbc/oracle&lt;/non-jta-data-source&gt;<br />  &lt;class&gt;com.ctlok.pro.entity.User&lt;/class&gt;<br />  &lt;class&gt;com.ctlok.pro.entity.UserInfo&lt;/class&gt;<br />  &lt;exclude-unlisted-classes&gt;false&lt;/exclude-unlisted-classes&gt;<br />  &lt;properties&gt;<br />   &lt;property name="eclipselink.target-server" value="Websphere" /&gt;<br />   &lt;property name="eclipselink.target-database" value="Oracle" /&gt;<br />   &lt;property name="eclipselink.logging.level" value="INFO" /&gt;<br />   &lt;property name="eclipselink.logging.timestamp" value="true" /&gt;<br />   &lt;property name="eclipselink.logging.session" value="true" /&gt;<br />   &lt;property name="eclipselink.logging.thread" value="false" /&gt;<br />   &lt;property name="eclipselink.logging.exceptions" value="true" /&gt;<br />   &lt;property name="eclipselink.cache.type.default" value="NONE" /&gt;<br />  &lt;/properties&gt;<br /> &lt;/persistence-unit&gt;<br />&lt;/persistence&gt;<br /></pre><br /><b>properties</b> 的設定請自行更改。<br /><br />重要的是: <br /><ul><li><b>transaction-type</b> 一定要是 <b>RESOURCE_LOCAL</b></li><li><b>provider</b> 改成是 <b>EclipseLink</b> 的 <b>PersistenceProvider</b></li><li>一定要是 <b>non-jta-data-source</b></li><li>將所有 <b>Entity Class</b> 也加到 <b>persistence.xml</b> 中</li></ul><br />設定好 <b>persistence.xml</b> 後，要設定 <b>components.xml</b>:<br /><br />在 <b>components.xml</b> 加入以下的設定:<br /><pre class="brush: xml">&lt;transaction:entity-transaction<br /> entity-manager=&quot;#{entityManager}&quot; /&gt;<br /><br />&lt;persistence:entity-manager-factory<br /> persistence-unit-name=&quot;ctlok&quot; name=&quot;entityManagerFactory&quot; startup=&quot;false&quot; /&gt;<br /><br />&lt;persistence:managed-persistence-context<br /> name=&quot;entityManager&quot; auto-create=&quot;true&quot; entity-manager-factory=&quot;#{entityManagerFactory}&quot; /&gt;<br /><br />&lt;component class=&quot;org.jboss.seam.persistence.PersistenceProvider&quot;<br /> name=&quot;org.jboss.seam.persistence.persistenceProvider&quot; scope=&quot;stateless&quot; /&gt;<br /></pre><br />請記得要更改 <b>persistence-unit-name</b> 為 <b>persistence.xml</b> 所設定的名稱。<br /><br />這樣就可以將 <b>Hibernate</b> 轉為使用 <b>EclipseLink</b> 了。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/JBoss-Seam-Simplicity-Power-Beyond/dp/0131347969?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="JBoss(R) Seam: Simplicity and Power Beyond Java(TM) EE" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0131347969&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0131347969" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Beginning-trade-JBoss-Experts-Voice/dp/143021922X?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Beginning JSF&amp;trade; 2 APIs and JBoss® Seam (Expert&#39;s Voice in Java)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=143021922X&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=143021922X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Beginning-trade-APIs-JBoss-ebook/dp/B003U89104?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Beginning JSF&amp;trade; 2 APIs and JBoss® Seam" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=B003U89104&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=B003U89104" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-6176392827455301235?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
</feed>
