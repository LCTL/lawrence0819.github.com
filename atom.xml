<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Programming Design Notes]]></title>
  <link href="http://pro.ctlok.com/atom.xml" rel="self"/>
  <link href="http://pro.ctlok.com/"/>
  <updated>2012-04-02T14:46:53+08:00</updated>
  <id>http://pro.ctlok.com/</id>
  <author>
    <name><![CDATA[Lawrence Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design Pattern - Factory]]></title>
    <link href="http://pro.ctlok.com/blog/2012/04/02/design-pattern-factory.html"/>
    <updated>2012-04-02T10:32:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/04/02/design-pattern-factory</id>
    <content type="html"><![CDATA[<p>Factory Pattern 可以將創造實例的程式碼分離，令原本核心的程式碼不必太過依賴於某一個物件，
並可以令其他要用到同一物件的地方使用同一套程式碼，方便集中管理。</p>

<p>看看以下例子應該有助你明白這個模式：</p>

<hr />

<p>公司要你開發一個 Logger (記錄器)，用於記錄程式內的變化，你一開始可能會設計成以下這樣:</p>

<p><img src="http://pro.ctlok.com/downloads/code/design-pattern-factory/sample1/uml.png"></p>

<figure class='code'><figcaption><span> (Logger.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample1/Logger.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Logger</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">debug</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">warn</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">error</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (ConsoleLogger.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample1/ConsoleLogger.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConsoleLogger</span> <span class="kd">implements</span> <span class="n">Logger</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ConsoleLogger</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">clazz</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">debug</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;DEBUG&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;INFO&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">warn</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;WARN&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">error</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;ERROR&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="n">String</span> <span class="n">level</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; [&quot;</span> <span class="o">+</span> <span class="n">level</span> <span class="o">+</span> <span class="s">&quot;] &quot;</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其他程式要使用時會直接使用 <code>new ConsoleLogger()</code> 來取得 ConsoleLogger 的 Instance (實例)。</p>

<figure class='code'><figcaption><span> (AService.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample1/AService.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConsoleLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;doSomething start&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// code...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;doSomething end&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (BService.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample1/BService.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConsoleLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;doSomething start&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// code...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;doSomething end&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有沒有發現什麼問題? 如果使用 Logger 的物件超過 100 個，要轉換 ConsoleLogger 為其他 Logger 就要更改 100 次程式碼。</p>

<hr />

<p>我們可以使用 Factory Pattern 來解決這個問題:</p>

<p><img src="http://pro.ctlok.com/downloads/code/design-pattern-factory/sample2/uml.png"></p>

<figure class='code'><figcaption><span> (Logger.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample2/Logger.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Logger</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">debug</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">warn</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">error</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (ConsoleLogger.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample2/ConsoleLogger.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConsoleLogger</span> <span class="kd">implements</span> <span class="n">Logger</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ConsoleLogger</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">clazz</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">debug</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;DEBUG&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;INFO&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">warn</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;WARN&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">error</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;ERROR&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="n">String</span> <span class="n">level</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; [&quot;</span> <span class="o">+</span> <span class="n">level</span> <span class="o">+</span> <span class="s">&quot;] &quot;</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (FileLogger.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample2/FileLogger.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileLogger</span> <span class="kd">implements</span> <span class="n">Logger</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">FileLogger</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">clazz</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">debug</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;DEBUG&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;INFO&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">warn</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;WARN&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">error</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="s">&quot;ERROR&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="n">String</span> <span class="n">level</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">log</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Date</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; [&quot;</span> <span class="o">+</span> <span class="n">level</span> <span class="o">+</span> <span class="s">&quot;] &quot;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="n">FileWriter</span><span class="o">(</span><span class="s">&quot;application.log&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">));</span>
</span><span class='line'>            <span class="n">bw</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">log</span><span class="o">);</span>
</span><span class='line'>            <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (LoggerFactory.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample2/LoggerFactory.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoggerFactory</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="nf">createLogger</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span><span class="o">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">FileLogger</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>新增一個 LoggerFactory，用來建立 Logger 。</p>

<figure class='code'><figcaption><span> (AService.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample2/AService.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">createLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;doSomething start&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// code...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;doSomething end&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (BService.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample2/BService.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">createLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;doSomething start&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// code...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;doSomething end&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以後要使用 Logger 時不必知道實際是使用 ConsoleLogger 或 FileLogger，只要物件實現了 Logger 這個介面就可以了。
這個 Factory Pattern 解決了一些問題，但仍然差一點，例如: 在測試環境中我想使用 ConsoleLogger，
但在正常環境中是使用 FileLogger，但以上的方法並不能解決這個問題。</p>

<hr />

<p>將 LoggerFactory 的 createLogger 變更為 Non-Static:</p>

<figure class='code'><figcaption><span> (LoggerFactory.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample3/LoggerFactory.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoggerFactory</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Logger</span> <span class="nf">createLogger</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span><span class="o">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">FileLogger</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>新増一個 MockLoggerFactory 在測試環境:</p>

<figure class='code'><figcaption><span> (MockLoggerFactory.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample3/MockLoggerFactory.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MockLoggerFactory</span> <span class="kd">extends</span> <span class="n">LoggerFactory</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Logger</span> <span class="nf">createLogger</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">ConsoleLogger</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (AService.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample3/AService.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Logger</span> <span class="n">logger</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">AService</span><span class="o">(</span><span class="n">LoggerFactory</span> <span class="n">loggerFactory</span><span class="o">){</span>
</span><span class='line'>        <span class="n">logger</span> <span class="o">=</span> <span class="n">loggerFactory</span><span class="o">.</span><span class="na">createLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;doSomething start&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// code...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;doSomething end&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (BService.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample3/BService.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Logger</span> <span class="n">logger</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BService</span><span class="o">(</span><span class="n">LoggerFactory</span> <span class="n">loggerFactory</span><span class="o">){</span>
</span><span class='line'>        <span class="n">logger</span> <span class="o">=</span> <span class="n">loggerFactory</span><span class="o">.</span><span class="na">createLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;doSomething start&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// code...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;doSomething end&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (Main.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-factory/sample3/Main.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LoggerFactory</span> <span class="n">loggerFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LoggerFactory</span><span class="o">();</span>
</span><span class='line'>        <span class="n">AService</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AService</span><span class="o">(</span><span class="n">loggerFactory</span><span class="o">);</span>
</span><span class='line'>        <span class="n">BService</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BService</span><span class="o">(</span><span class="n">loggerFactory</span><span class="o">);</span>
</span><span class='line'>        <span class="n">a</span><span class="o">.</span><span class="na">doSomething</span><span class="o">();</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="na">doSomething</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Unit Test</span>
</span><span class='line'>        <span class="n">loggerFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MockLoggerFactory</span><span class="o">();</span>
</span><span class='line'>        <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AService</span><span class="o">(</span><span class="n">loggerFactory</span><span class="o">);</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BService</span><span class="o">(</span><span class="n">loggerFactory</span><span class="o">);</span>
</span><span class='line'>        <span class="n">a</span><span class="o">.</span><span class="na">doSomething</span><span class="o">();</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="na">doSomething</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣就可以在不同環境替換 LoggerFactory 來建立不同的 Logger。</p>

<hr />

<p>以下的圖片是描述 Factory Pattern 的 Class Diagram。（From Wiki）</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a3/FactoryMethod.svg/349px-FactoryMethod.svg.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Setup Jetty Development Server]]></title>
    <link href="http://pro.ctlok.com/blog/2012/03/30/maven-setup-jetty-dev-server.html"/>
    <updated>2012-03-30T14:38:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/03/30/maven-setup-jetty-dev-server</id>
    <content type="html"><![CDATA[<p>在 Maven 使用 Jetty 作為 Web Server 是非常簡單，在 <code>pom.xml</code> 加入以下設定:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.mortbay.jetty<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>maven-jetty-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>6.1.26<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;stopPort&gt;</span>9966<span class="nt">&lt;/stopPort&gt;</span>
</span><span class='line'>        <span class="nt">&lt;stopKey&gt;</span>stop<span class="nt">&lt;/stopKey&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>以後只需要輸入 <code>mvn jetty:run</code> 就會啟動 Jetty Web Server，輸入 <code>mvn jetty:stop</code> 則關閉，
非常方便。啟動後打開 <code>http://localhost:8080</code> 就可以用了。</p>

<hr />

<p>如果要在 Unit Test 測試 URL 或版面的 HTML 是否正確，可以參考以下的 <code>pom.xml</code> 設定:</p>

<figure class='code'><figcaption><span> (pom.xml)</span> <a href='http://pro.ctlok.com/downloads/code/maven-setup-jetty-dev-server/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'><span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>pro.ctlok.com<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jetty<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.0.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>jetty<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url&gt;</span>http://maven.apache.org<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.5<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>javax.servlet.jsp<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>jsp-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>4.10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;build&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>2.0.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;source&gt;</span>1.5<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;target&gt;</span>1.5<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-surefire-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>2.12<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.mortbay.jetty<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-jetty-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>6.1.26<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;stopPort&gt;</span>9966<span class="nt">&lt;/stopPort&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;stopKey&gt;</span>stop<span class="nt">&lt;/stopKey&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                    <span class="c">&lt;!-- Before test class execute, start Jetty web server first --&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;id&gt;</span>start-jetty<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;phase&gt;</span>test-compile<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;goal&gt;</span>run<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;scanIntervalSeconds&gt;</span>0<span class="nt">&lt;/scanIntervalSeconds&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;daemon&gt;</span>true<span class="nt">&lt;/daemon&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>                    <span class="c">&lt;!-- After test, stop Jetty web server --&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;id&gt;</span>stop-jetty<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;phase&gt;</span>test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;goal&gt;</span>stop<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/build&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上設定可以在測試前啟動 Jetty Web Server，測試完畢就會自動關閉。</p>

<figure class='code'><figcaption><span> (HelloServlet.java)</span> <a href='http://pro.ctlok.com/downloads/code/maven-setup-jetty-dev-server/HelloServlet.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">pro</span><span class="o">.</span><span class="na">ctlok</span><span class="o">.</span><span class="na">com</span><span class="o">.</span><span class="na">jetty</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">6496751289098922589L</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span>
</span><span class='line'>          <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (UrlTest.java)</span> <a href='http://pro.ctlok.com/downloads/code/maven-setup-jetty-dev-server/UrlTest.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">pro</span><span class="o">.</span><span class="na">ctlok</span><span class="o">.</span><span class="na">com</span><span class="o">.</span><span class="na">jetty</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.HttpURLConnection</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UrlTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://localhost:8080/jetty/index&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">HttpURLConnection</span> <span class="n">conn</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpURLConnection</span><span class="o">)</span> <span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">assert</span> <span class="n">conn</span><span class="o">.</span><span class="na">getResponseCode</span><span class="o">()</span> <span class="o">==</span> <span class="mi">200</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">BufferedReader</span> <span class="n">rd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">conn</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">try</span><span class="o">{</span>
</span><span class='line'>          <span class="k">assert</span> <span class="n">rd</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">rd</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (web.xml)</span> <a href='http://pro.ctlok.com/downloads/code/maven-setup-jetty-dev-server/web.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;web-app</span> <span class="na">version=</span><span class="s">&quot;2.5&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee&quot;</span>
</span><span class='line'><span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'><span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;display-name&gt;</span>jetty<span class="nt">&lt;/display-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;session-config&gt;</span>
</span><span class='line'>        <span class="nt">&lt;session-timeout&gt;</span>30<span class="nt">&lt;/session-timeout&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/session-config&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>        <span class="nt">&lt;display-name&gt;</span>IndexServlet<span class="nt">&lt;/display-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>IndexServlet<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-class&gt;</span>pro.ctlok.com.jetty.HelloServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>IndexServlet<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url-pattern&gt;</span>/index<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;welcome-file-list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;welcome-file&gt;</span>index<span class="nt">&lt;/welcome-file&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/welcome-file-list&gt;</span>
</span><span class='line'><span class="nt">&lt;/web-app&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Pattern - Observer]]></title>
    <link href="http://pro.ctlok.com/blog/2012/03/29/design-pattern-observer.html"/>
    <updated>2012-03-29T22:08:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/03/29/design-pattern-observer</id>
    <content type="html"><![CDATA[<p>Observer Pattern 有 2 個重要角色「主題」和「觀察者」，觀察者希望主題狀態有變更時會立即被告知。</p>

<p>你可以想像 Blog 上的 Email 訂閱服務（本 Blog 沒有），當你對這個 Blog 有興趣時，
你會用你的 Email 地址去訂閱服務，當有更新時你會立即收到通知，題示你有更新了，請去看看。
當你對 Blog 上千篇一律的內容感到無聊時，你亦可以取消這個訂閱，那以後有更新亦不會再通知你。</p>

<p>看看以下例子應該有助你明白這個模式：</p>

<hr />

<p>公司要你開發一個即時新聞平台，用戶只需要打開程式就能夠看到即時新聞。</p>

<p>你一開始可能會用 Pull 的方法，每隔一段時間會主動去向主題拿取新的內容：</p>

<p><img src="http://pro.ctlok.com/downloads/code/design-pattern-observer/sample1/uml.png"></p>

<figure class='code'><figcaption><span> (NewsTopic.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-observer/sample1/NewsTopic.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.UUID</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NewsTopic</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">messages</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">getMessages</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messages</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Assign unique ID to each message for determine is it old message.</span>
</span><span class='line'>        <span class="n">messages</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (Client.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-observer/sample1/Client.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map.Entry</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.TimerTask</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="kd">extends</span> <span class="n">TimerTask</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">displayedIds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">NewsTopic</span> <span class="n">topic</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Client</span><span class="o">(</span><span class="n">NewsTopic</span> <span class="n">topic</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">topic</span> <span class="o">=</span> <span class="n">topic</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">displayNews</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">topic</span><span class="o">.</span><span class="na">getMessages</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">displayedIds</span><span class="o">.</span><span class="na">containsAll</span><span class="o">(</span><span class="n">messages</span><span class="o">.</span><span class="na">keySet</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">messages</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">displayedIds</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
</span><span class='line'>                            <span class="s">&quot;Client %s display message: %s at time: %s&quot;</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()),</span>
</span><span class='line'>                            <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Date</span><span class="o">()));</span>
</span><span class='line'>                    <span class="n">displayedIds</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">displayNews</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (Main.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-observer/sample1/Main.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Timer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NewsTopic</span> <span class="n">topic</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NewsTopic</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Client</span> <span class="n">client1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Client</span><span class="o">(</span><span class="n">topic</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Client</span> <span class="n">client2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Client</span><span class="o">(</span><span class="n">topic</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Client</span> <span class="n">client3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Client</span><span class="o">(</span><span class="n">topic</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Timer</span> <span class="n">timer1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Timer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">timer1</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="n">client1</span><span class="o">,</span> <span class="mi">50</span><span class="o">,</span> <span class="mi">3000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Timer</span> <span class="n">timer2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Timer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">timer2</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="n">client2</span><span class="o">,</span> <span class="mi">50</span><span class="o">,</span> <span class="mi">5000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Timer</span> <span class="n">timer3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Timer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">timer3</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="n">client3</span><span class="o">,</span> <span class="mi">50</span><span class="o">,</span> <span class="mi">7000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">topic</span><span class="o">.</span><span class="na">addMessage</span><span class="o">(</span><span class="s">&quot;News &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">5000</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">timer1</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</span><span class='line'>        <span class="n">timer2</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</span><span class='line'>        <span class="n">timer3</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>執行結果</span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='text'><span class='line'>Client 109a4c display message: News 0 at time: Fri Mar 30 00:41:23 CST 2012
</span><span class='line'>Client c40c80 display message: News 0 at time: Fri Mar 30 00:41:25 CST 2012
</span><span class='line'>Client c40c80 display message: News 1 at time: Fri Mar 30 00:41:25 CST 2012
</span><span class='line'>Client 109a4c display message: News 2 at time: Fri Mar 30 00:41:26 CST 2012
</span><span class='line'>Client 109a4c display message: News 1 at time: Fri Mar 30 00:41:26 CST 2012
</span></code></pre></td></tr></table></div></figure>


<p>每個 Client 接收到訊息的時間不一。</p>

<hr />

<p>有客戶抱怨，股票新聞不夠實時，害他掉了錢。公司要你改善一下程式，盡量減少延遲。</p>

<p>現在是 Observer Pattern 大派用場的時候，因為一有更新就會主動通知觀察者，大大減低新聞延遲的問題。</p>

<p>你可能會問，使用舊方法但將間隔縮短不就可以了嗎？
這個方法雖然可以解決延遲的問題，但如果客戶多達 10000 人時，每一個也不停重覆去檢查資料是非常浪費系統資源，
CPU 長期高工作量，會拖跨了系統的其他程式。</p>

<p><img src="http://pro.ctlok.com/downloads/code/design-pattern-observer/sample2/uml.png"></p>

<figure class='code'><figcaption><span> (Subject.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-observer/sample2/Subject.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerObserver</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">unregisterObserver</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (Observer.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-observer/sample2/Observer.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Observer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notify</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (NewsTopic.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-observer/sample2/NewsTopic.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NewsTopic</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Observer</span><span class="o">&gt;</span> <span class="n">obervers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Observer</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pushMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>        <span class="n">notifyObservers</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerObserver</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">obervers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">unregisterObserver</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">obervers</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Observer</span> <span class="nl">observer:</span> <span class="n">obervers</span><span class="o">){</span>
</span><span class='line'>            <span class="n">observer</span><span class="o">.</span><span class="na">notify</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (Client.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-observer/sample2/Client.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="kd">implements</span> <span class="n">Observer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notify</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
</span><span class='line'>                <span class="s">&quot;Client %s display message: %s at time: %s&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()),</span> <span class="n">message</span><span class="o">,</span> <span class="k">new</span> <span class="n">Date</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (Main.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-observer/sample2/Main.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NewsTopic</span> <span class="n">topic</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NewsTopic</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Client</span> <span class="n">client1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Client</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Client</span> <span class="n">client2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Client</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Client</span> <span class="n">client3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Client</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">topic</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="n">client1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">topic</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="n">client2</span><span class="o">);</span>
</span><span class='line'>        <span class="n">topic</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="n">client3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">topic</span><span class="o">.</span><span class="na">pushMessage</span><span class="o">(</span><span class="s">&quot;News &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">5000</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>執行結果</span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='text'><span class='line'>Client 10b30a7 display message: News 0 at time: Fri Mar 30 00:54:03 CST 2012
</span><span class='line'>Client ca0b6 display message: News 0 at time: Fri Mar 30 00:54:03 CST 2012
</span><span class='line'>Client 14318bb display message: News 0 at time: Fri Mar 30 00:54:03 CST 2012
</span><span class='line'>Client 10b30a7 display message: News 1 at time: Fri Mar 30 00:54:07 CST 2012
</span><span class='line'>Client ca0b6 display message: News 1 at time: Fri Mar 30 00:54:07 CST 2012
</span><span class='line'>Client 14318bb display message: News 1 at time: Fri Mar 30 00:54:07 CST 2012
</span><span class='line'>Client 10b30a7 display message: News 2 at time: Fri Mar 30 00:54:09 CST 2012
</span><span class='line'>Client ca0b6 display message: News 2 at time: Fri Mar 30 00:54:09 CST 2012
</span><span class='line'>Client 14318bb display message: News 2 at time: Fri Mar 30 00:54:09 CST 2012
</span></code></pre></td></tr></table></div></figure>


<p>現在每一次發佈訊息時，每一個客戶都同時收到，大大減低了延遲和系統負荷。</p>

<hr />

<p>以下的圖片是描述 Observer Pattern 的 Class Diagram。（From Wiki）</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/Observer.svg/500px-Observer.svg.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Pattern - Strategy]]></title>
    <link href="http://pro.ctlok.com/blog/2012/03/28/design-pattern-strategy-pattern.html"/>
    <updated>2012-03-28T22:34:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/03/28/design-pattern-strategy-pattern</id>
    <content type="html"><![CDATA[<p>近日拿出 Design Pattern 的書重溫，順便和大家分享一下。</p>

<p>Strategy Pattern 主要的目的是將一些有很大機會轉變的行為或演算法封裝起來，並抽出來，
令到在執行期間也可以替換。這樣做的好處是不用變動核心程式碼，而又做到變更行為等等功能。</p>

<p>以下的例子可能令你更明白這個模式的用途。</p>

<hr />

<p>你的公司要你開發一個遊戲，這個遊戲是一個古代戰爭遊戲，每個人扮演一個特定角色。
公司希望可以隨時增加角色，你一開始的設計可能會這樣:</p>

<p><img src="http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample1/uml.png"></p>

<figure class='code'><figcaption><span> (Character.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample1/Character.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Character</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">hp</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mp</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Character</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hp</span><span class="o">,</span> <span class="kt">int</span> <span class="n">mp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">hp</span> <span class="o">=</span> <span class="n">hp</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mp</span> <span class="o">=</span> <span class="n">mp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Attack&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getHp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">hp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setHp</span><span class="o">(</span><span class="kt">int</span> <span class="n">hp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">hp</span> <span class="o">=</span> <span class="n">hp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMp</span><span class="o">(</span><span class="kt">int</span> <span class="n">mp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mp</span> <span class="o">=</span> <span class="n">mp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (Human.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample1/Human.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Human</span> <span class="kd">extends</span> <span class="n">Character</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Human</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (Dwarve.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample1/Dwarve.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dwarve</span> <span class="kd">extends</span> <span class="n">Character</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Dwarve</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="mi">150</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣的設計原本符合公司規格，隨時可以新增角色，亦利用了 OO 的特性。</p>

<hr />

<p>公司高層認為每個角色的攻擊都一樣，太乏味了，建議你改一改程式去令每一個角色都拿不同武器去攻擊。
你可能會更改程式成為這樣:</p>

<p><img src="http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample2/uml.png"></p>

<figure class='code'><figcaption><span> (Character.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample2/Character.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Character</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">hp</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mp</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Character</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hp</span><span class="o">,</span> <span class="kt">int</span> <span class="n">mp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">hp</span> <span class="o">=</span> <span class="n">hp</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mp</span> <span class="o">=</span> <span class="n">mp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">attack</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getHp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">hp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setHp</span><span class="o">(</span><span class="kt">int</span> <span class="n">hp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">hp</span> <span class="o">=</span> <span class="n">hp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMp</span><span class="o">(</span><span class="kt">int</span> <span class="n">mp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mp</span> <span class="o">=</span> <span class="n">mp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (Human.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample2/Human.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Human</span> <span class="kd">extends</span> <span class="n">Character</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Human</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Sword attack&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (Dwarve.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample2/Dwarve.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dwarve</span> <span class="kd">extends</span> <span class="n">Character</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Dwarve</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="mi">150</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Axe attack&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Character 內的 attack() 改為 abstract ，每個角色自己實現自己的攻擊模式。
這樣看好像沒有什麼問題，但如果以後增加角色，而這個角色和現有角色的武器一樣，那不是要將程式碼複製出來？
同樣的程式碼可能會在不同角色內出現，以後維護起來便加倍困難。複製一次程式碼 = 連 Bug 也一起複製了。</p>

<hr />

<p>公司高層又想改一下遊戲，今次改動是可以令角色選擇不同武器。
上次的程式是不容許角色更換武器，因為在 attack() 內限制了角色使用的武器。
今次需要使用 Strategy Pattern 令程式更具彈性:</p>

<p><img src="http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample3/uml.png"></p>

<figure class='code'><figcaption><span> (Character.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample3/Character.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Character</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">hp</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mp</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">AttackBehavior</span> <span class="n">attackBehavior</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Character</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hp</span><span class="o">,</span> <span class="kt">int</span> <span class="n">mp</span><span class="o">,</span> <span class="n">AttackBehavior</span> <span class="n">attackBehavior</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">hp</span> <span class="o">=</span> <span class="n">hp</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mp</span> <span class="o">=</span> <span class="n">mp</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">attackBehavior</span> <span class="o">=</span> <span class="n">attackBehavior</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">attackBehavior</span><span class="o">.</span><span class="na">attack</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getHp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">hp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setHp</span><span class="o">(</span><span class="kt">int</span> <span class="n">hp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">hp</span> <span class="o">=</span> <span class="n">hp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMp</span><span class="o">(</span><span class="kt">int</span> <span class="n">mp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mp</span> <span class="o">=</span> <span class="n">mp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">AttackBehavior</span> <span class="nf">getAttackBehavior</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">attackBehavior</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAttackBehavior</span><span class="o">(</span><span class="n">AttackBehavior</span> <span class="n">attackBehavior</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">attackBehavior</span> <span class="o">=</span> <span class="n">attackBehavior</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (Human.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample3/Human.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Human</span> <span class="kd">extends</span> <span class="n">Character</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Human</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">AttackBehavior</span> <span class="n">attackBehavior</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="n">attackBehavior</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (Dwarve.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample3/Dwarve.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dwarve</span> <span class="kd">extends</span> <span class="n">Character</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Dwarve</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">AttackBehavior</span> <span class="n">attackBehavior</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="mi">150</span><span class="o">,</span> <span class="mi">50</span><span class="o">,</span> <span class="n">attackBehavior</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (AttackBehavior.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample3/AttackBehavior.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AttackBehavior</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attack</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (SwordAttackBehavior.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample3/SwordAttackBehavior.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SwordAttackBehavior</span> <span class="kd">implements</span> <span class="n">AttackBehavior</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Sword attack&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (AxeAttackBehavior.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample3/AxeAttackBehavior.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AxeAttackBehavior</span> <span class="kd">implements</span> <span class="n">AttackBehavior</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Axe attack&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (Main.java)</span> <a href='http://pro.ctlok.com/downloads/code/design-pattern-strategy/sample3/Main.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Character</span> <span class="n">character1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Human</span><span class="o">(</span><span class="s">&quot;Lawrence&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">AxeAttackBehavior</span><span class="o">());</span>
</span><span class='line'>        <span class="n">Character</span> <span class="n">character2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Human</span><span class="o">(</span><span class="s">&quot;Tony&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">SwordAttackBehavior</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">character1</span><span class="o">.</span><span class="na">attack</span><span class="o">();</span>
</span><span class='line'>        <span class="n">character2</span><span class="o">.</span><span class="na">attack</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">character1</span><span class="o">.</span><span class="na">setAttackBehavior</span><span class="o">(</span><span class="k">new</span> <span class="n">SwordAttackBehavior</span><span class="o">());</span>
</span><span class='line'>        <span class="n">character1</span><span class="o">.</span><span class="na">attack</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>現在只需要在建立角色時將攻擊行為也一起加到角色中就可以了，而且可以隨時更改攻擊行為。</p>

<hr />

<p>以下的圖片是描述 Strategy Pattern 的 Class Diagram。（From Wiki）</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/08/StrategyPatternClassDiagram.svg/400px-StrategyPatternClassDiagram.svg.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Windows 設定 Octopress]]></title>
    <link href="http://pro.ctlok.com/blog/2012/03/26/windows-install-octopress.html"/>
    <updated>2012-03-26T12:13:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/03/26/windows-install-octopress</id>
    <content type="html"><![CDATA[<p>因為公司的電腦是 Windows，又想閒來沒事時可以寫寫文章，所以需要在 Windows 上設定 Octopress。
在 Windows 上要設定好 <a href="http://octopress.org/">Octopress</a> 是比在 Mac 上麻煩得多。</p>

<h3>Install Ruby</h3>

<p>首先要安裝 <a href="http://www.ruby-lang.org">Ruby</a>，Windows 上使用 RubyInstaller 安裝 Ruby，
RubyInstaller 已經包括了 <a href="http://rubygems.org/">Gem</a>。</p>

<p>RubyInstaller 在這裡下載: <a href="http://rubyinstaller.org/downloads/">http://rubyinstaller.org/downloads/</a></p>

<p>我安裝的版本是 Ruby 1.9.3-p125</p>

<p>順便下載 Ruby 的 Development Kit: <code>DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe</code></p>

<p>安裝好 Ruby 後解壓 Development Kit，再到 Development Kit 資料夾內執行以下指令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='sh'><span class='line'>ruby dk.rb init
</span><span class='line'>ruby dk.rb install
</span></code></pre></td></tr></table></div></figure>


<h3>Install Python</h3>

<p>安裝 Python 是因為 Octopress 處理文章內的程式碼是會用到 <a href="http://pygments.org/">Pygments syntax highlighting</a>。</p>

<p>Python 在這裡下載: <a href="http://www.python.org/getit/">http://www.python.org/getit/</a></p>

<p>版本是 2.7.2</p>

<p>更新: 我在 64bit 的 Windows 7 上安裝 64bit 的 Python 2.7.2 在執行 <code>rake generate</code> 時會出現找不到 <code>.dll</code> 的問題，轉了 32bit 的 Python 2.7.2 就沒有問題了。(奇怪)</p>

<h3>Install Git</h3>

<p>msysgit: <a href="http://code.google.com/p/msysgit/">http://code.google.com/p/msysgit/</a></p>

<h3>Setup Octopress</h3>

<p>輸入以下指令設定 Octopress:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='sh'><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>gem install bundle
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>令 Octopress 支援中文，要將語言環境設定為台灣，編碼是 <code>UTF-8</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='sh'><span class='line'><span class="nb">set </span><span class="nv">LC_ALL</span><span class="o">=</span>zh_TW.UTF-8
</span><span class='line'><span class="nb">set </span><span class="nv">LANG</span><span class="o">=</span>zh_TW.UTF-8
</span></code></pre></td></tr></table></div></figure>


<h3>Setup Deploy Setting</h3>

<p>最後就是設定整個 Blog 會放置的地方。</p>

<p>放到 Github Page 上:</p>

<ol>
<li>到 Github 新增一個 Repo</li>
<li>名稱輸入 <code>\&lt;username\&gt;.github.com</code></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='sh'><span class='line'>rake setup_github_pages  <span class="c">#enter git@github.com:&lt;username&gt;/&lt;username&gt;.github.com.git</span>
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[由 Blogspot 搬家到 Octopress Github Page]]></title>
    <link href="http://pro.ctlok.com/blog/2012/03/25/blogger-migrate-to-octopress-github-page.html"/>
    <updated>2012-03-25T15:41:00+08:00</updated>
    <id>http://pro.ctlok.com/blog/2012/03/25/blogger-migrate-to-octopress-github-page</id>
    <content type="html"><![CDATA[<p><img src="http://octopress.org/images/logo.png"></p>

<p>由於在 Blogspot 的 Blog 頁面引入太多的 Javascript、CSS 和圖片，令到瀏覽速度援慢。反正要來一個大修改，倒不如連平台亦一起換掉。</p>

<p>現在這個 Blog 是使用 Octopress Blogging Framework 管理文章並放到 Github page 上，速度算不錯，順便將廣告和一些不必要的功能全部移除掉，令整個版面更簡潔，閱讀起來比較舒服。</p>

<p>Octopress 對比 Blogspot 的好處:</p>

<ul>
<li>方便插入程式碼，支援 Gist</li>
<li>使用 Markdown 來編排交章格式，比 HTML 簡單得多</li>
<li>快速，因為所有頁面都是靜態 HTML 內容</li>
<li>方便使用 Git 管理</li>
<li>高度自由，可自己寫一些 Plugin 或更改原有程式碼，製作 Theme 亦很簡單（我到現在亦不懂製作 Blogspot Theme）</li>
<li>放到 Github page 或 Heroku 上，中國網民都可以瀏覽得到</li>
</ul>


<p>當然 Octopress 對比 Blogspot 亦有一些壞處:</p>

<ul>
<li>不能隨時隨地修改文章（因為沒有 Web admin console）</li>
<li>對於普通用家來說，設定非常複雜</li>
</ul>


<p>其實要將 Blogspot 上的文章轉換成 Octopress 的文章格式亦很容易，已經有好心人提供了 Script 去轉換了。</p>

<p>但這個 Script 有一個限制，就是最多支援 500 篇文章，所有文章都是 HTML 格式，而不是 Markdown。</p>

<figure class='code'><figcaption><span>Blogspot posts migrate to Octopress posts</span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone git://gist.github.com/1807781
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>1807781
</span><span class='line'><span class="nv">$ </span>./bloggerImport.sh &lt;blogname&gt; <span class="c"># &lt;blogname&gt;.blogspot.com</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你的 Blogspot 使用了其他 Domain name，你需要修改 bloggerImport.sh:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span> -z <span class="s2">&quot;$WGET&quot;</span> <span class="o">]</span> <span class="o">||</span> wget <span class="s2">&quot;http://${BLOGGER}.blogspot.com/feeds/posts/full?alt=rss&amp;max-results=500&quot;</span> -O <span class="k">${</span><span class="nv">BLOGGER</span><span class="k">}</span>.xml
</span><span class='line'><span class="o">[</span> -z <span class="s2">&quot;$CURL&quot;</span> <span class="o">]</span> <span class="o">||</span> curl <span class="s2">&quot;http://${BLOGGER}.blogspot.com/feeds/posts/full?alt=rss&amp;max-results=500&quot;</span> -o <span class="k">${</span><span class="nv">BLOGGER</span><span class="k">}</span>.xml
</span></code></pre></td></tr></table></div></figure>


<p>換為</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span> -z <span class="s2">&quot;$WGET&quot;</span> <span class="o">]</span> <span class="o">||</span> wget <span class="s2">&quot;http://&lt;your_domain&gt;/feeds/posts/full?alt=rss&amp;max-results=500&quot;</span> -O <span class="k">${</span><span class="nv">BLOGGER</span><span class="k">}</span>.xml
</span><span class='line'><span class="o">[</span> -z <span class="s2">&quot;$CURL&quot;</span> <span class="o">]</span> <span class="o">||</span> curl <span class="s2">&quot;http://&lt;your_domain&gt;/feeds/posts/full?alt=rss&amp;max-results=500&quot;</span> -o <span class="k">${</span><span class="nv">BLOGGER</span><span class="k">}</span>.xml
</span></code></pre></td></tr></table></div></figure>


<p>執行後會多了一個 _posts 的資料夾，將這個資料夾放左 source 就可以了。</p>

<p>以下是轉換程式的 Source Code:</p>

<div><script src='https://gist.github.com/1807781.js?file='></script>
<noscript><pre><code>jekyll
</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shacial 的資料庫設計]]></title>
    <link href="http://pro.ctlok.com/2012/03/shacial-database-design.html"/>
    <updated>2012-03-23T14:40:00+08:00</updated>
    <id>http://pro.ctlok.com/2012/03/shacial-database-design</id>
    <content type="html"><![CDATA[<a href="http://www.shacial.com">Shacial</a> 上線時間差不多有 4 星期了，雖然使用的人並不多，但仍然想再將這個服務做得更加好。<br />在這裡我先公開資料庫設計給大家看看。以後可能會再公開程式碼。(Open Source Project ?)<br /><br />以下就是 <a href="http://www.shacial.com">Shacial</a> 的 ERD:<br /><br /><a href="http://3.bp.blogspot.com/-IuTFgpUweFM/T2wZLbHTBhI/AAAAAAAAA94/r_OJn2IS4Cc/s1600/ERD.png" imageanchor="1" style=""><img border="0" height="345" width="400" src="http://3.bp.blogspot.com/-IuTFgpUweFM/T2wZLbHTBhI/AAAAAAAAA94/r_OJn2IS4Cc/s400/ERD.png" /></a><br /><br />已經設計好支援檔案版本控制。下一步應該要想想如何支援 <b>News Feed</b>，即時的信息傳遞。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-987543225069631026?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自行開發的檔案分享應用程式 - Shacial]]></title>
    <link href="http://pro.ctlok.com/2012/02/shacial-web-application.html"/>
    <updated>2012-02-28T18:21:00+08:00</updated>
    <id>http://pro.ctlok.com/2012/02/shacial-web-application</id>
    <content type="html"><![CDATA[用了 3 個多月時間，終於完成了這個應用程式。<br /><br />這個應用程式是一個網路硬碟，但不像一般網路硬碟只是拿來備份東西或發放某些東西，<b>Shacial</b> 著重於分享的功能，雖然現在還有很大部份功能仍然開發中，但基本的功能如: 共同協作、傳送檔案、圖片空間或公開檔案等等已經完成。<br /><br />背後儲存檔案的是 <b>Amazon S3</b> 加上 <b>EC2</b> 作為 <b>Web Server</b>，速度有一定保證。<br /><br />希望各位網友能夠試用這個應用程式並給小弟一點點意見。<br /><br />現時測試為每一個用戶提供 <b>2GB</b> 的空間，並不設類型限制和單一檔案容量上限 (只要不超過配額就可以上載)。<br /><br /><a href="http://www.shacial.com/">http://www.shacial.com/</a><br /><br />如有任何問題可用電子郵件聯絡我。<br /><br />2012-03-11: 提供 Facebook 和 Google account 登入<br /><br />測試貼圖:<br />193 KB<br /><a href="http://www.shacial.com/f/12/logo-java-blue.png"><img src="http://www.shacial.com/f/12/logo-java-blue.png" style="width:30%;height:30%" /></a><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-3995517410954114390?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[介紹一款 CSS 模組化工具 - LESS]]></title>
    <link href="http://pro.ctlok.com/2012/01/css.html"/>
    <updated>2012-01-31T16:38:00+08:00</updated>
    <id>http://pro.ctlok.com/2012/01/css</id>
    <content type="html"><![CDATA[<a href="http://1.bp.blogspot.com/-VdakltfXtKs/TyejMYxi6VI/AAAAAAAAA9I/3b5zk3zpi-4/s1600/logo%255B1%255D.png" imageanchor="1" style=""><img border="0" height="81" width="199" src="http://1.bp.blogspot.com/-VdakltfXtKs/TyejMYxi6VI/AAAAAAAAA9I/3b5zk3zpi-4/s400/logo%255B1%255D.png" /></a><br /><br />網站需要一個漂亮的介面來將資訊帶給用戶，開發這個介面除了要使用 <b>HTML Tag</b> 外，亦需要使用 <b>Cascading Style Sheets (CSS)</b> 去令這個介面更美觀。有人說: 你只要複製一次程式碼其實亦是複製了一個 <b>Bug</b>，所以我們在設計程式時也盡量不要將相同的程式碼複製到不同地方，在 <b>Java</b> 可以將一些程式碼包裝成 <b>Object</b> 以便不同地方也使用同一組程式碼，但在 <b>CSS</b> 又怎麼辦? 使用外部的 <b>CSS</b> 檔案其實已經很大程度地減少重複的外觀設置程式碼，但這仍然不足夠。<br /><br />今次介紹的工具能夠在 <b>CSS</b> 設置一些常用參數，外觀設置程式碼的組合，簡單的算法和使用 <b>Javascript</b> 功能等等。這款工具就是 <b>LESS</b> 了。<br /><br />以下例子可以對比普通 <b>CSS</b> 和 <b>LESS CSS</b> 的不同。<br /><br />參數:<br /><br />普通 <b>CSS</b>:<br /><pre class="brush:css">.header{<br />    background-color: #777;<br />    color: #f5f5f5;<br />}<br /><br />a{<br />    color: #777;<br />}<br /><br />p.desc{<br />    border: solid 1px #777;<br />    color: #777;<br />}<br /></pre><br />以上的 <b>CSS</b> 出現了好幾次 <b>#777</b> 這個顏色設置，如果網頁樣式改變了，需要將灰色設置為淺一點的灰色，只好一個一個 <b>#777</b> 找出來加以修改。<br /><br />使用 <b>LESS</b> 可以:<br /><pre class="brush:css">@gray: #777;<br />@smoke-white: #f5f5f5;<br />.header{<br />    background-color: @gray;<br />    color: @smoke-white;<br />}<br /><br />a{<br />    color: @gray;<br />}<br /><br />p.desc{<br />    border: solid 1px @gray;<br />    color: @gray;<br />}<br /></pre><br />這樣只需將 @gray 參數改變就可以一次轉換所有灰色了。<br /><br />除了參數還可以組合外觀設置程式碼:<br /><br />普通 <b>CSS</b>:<br /><pre class="brush:css">.header{<br />    border-radius: 5px;<br />    -moz-border-radius: 5px;<br />    -webkit-border-radius: 5px;<br />}<br /><br />ul.stack li{<br />    border-radius: 3px;<br />    -moz-border-radius: 3px;<br />    -webkit-border-radius: 3px;<br />}<br /></pre><br /><b>LESS CSS</b>:<br /><pre class="brush:css">.border-radius (@radius 5px) {<br />    border-radius: @radius;<br />    -moz-border-radius: @radius;<br />    -webkit-border-radius: @radius;<br />}<br /><br />.header{<br />    .border-radius;<br />}<br /><br />ul.stack li{<br />    .border-radius(3px);<br />}<br /></pre><br />因為不同的瀏覽器設置圓角的程式碼也不同，如果以後又有一款新瀏覽器提供圓角的樣式，就可以加一句到 .border-radius 就完成所有設置，方便得多。<br /><b>LESS</b> 的組合外觀設置程式碼提供了傳入參數和默認參數。<br /><br /><b>LESS</b> 可以令 <b>CSS</b> 程式碼更直觀:<br /><br />普通 <b>CSS</b>:<br /><pre class="brush:css">.header p{<br />    background-color: #777;<br />}<br /><br />.header p span{<br />    font-size: 18px;<br />}<br /><br />.header p span.brand a{<br />    color: #ccc;<br />}<br /><br />.header p span.brand a:hover{<br />    color: #f5f5f5;<br />}<br /></pre><br /><b>LESS CSS</b>:<br /><pre class="brush:css">.header{<br />    p{<br />        background-color: #777;<br /><br />        span{<br />            font-size: 18px;<br /><br />            &.brand{<br />                a{<br />                    color: #ccc;<br /><br />                    &:hover{<br />                        color: #f5f5f5;<br />                    }<br />                }<br />            }<br />        }<br />    }<br />}<br /></pre><br />這樣可以更加清楚知道 <b>.header</b> 內的所有風格。<br /><br />如要使用 <b>LESS</b> 有 <b>2</b> 種方法:<br /><ul><li>使用 <b>less.js</b> 在瀏覽器將 <b>LESS CSS</b> 轉換為普通 <b>CSS</b></li><li>下載 <b>Node.js</b> 然後使用 <b>npm</b> 去下載 <b>LESS</b> 並使用 <b>Command</b> 將 <b>LESS CSS</b> 轉換為普通 <b>CSS</b></li></ul><br />第一個方法在開發環境使用還好，在真實環境建議使用第 2 種方法。<br /><br />我弄了一個 <b>Node.js</b> 的 <b>script</b> 以方便大量轉換 <b>CSS</b>，有興趣可拿去用:<br /><pre class="brush:js">#!/usr/bin/env node<br /><br />var sys = require(&#39;util&#39;)<br />var fs = require(&#39;fs&#39;);<br />var less = require(&#39;less&#39;);<br /><br />var targetDir = &#39;public&#39;;<br />var currentDir = &#39;source&#39;;<br /><br />convertResource(currentDir);<br /><br />function convertResource(dirName){<br />    fs.readdir(dirName, function(err, files){<br />        if (err){<br />            console.log(err);<br />            return;<br />        }<br />        for (var i = 0; i &lt; files.length; i++){<br />            (function(){<br />                var sourceFile = dirName + &quot;/&quot; + files[i];<br />                var targetFile = sourceFile.replace(currentDir, targetDir);<br />                fs.lstat(sourceFile, function(e, stats){<br />                    if (stats.isDirectory()){<br />                        if (!isFileExist(targetFile)){<br />                            fs.mkdirSync(targetFile);<br />                        }<br />                        convertResource(sourceFile);<br />                    }else{<br />                        if (sourceFile.match(/^(.*)(\.css|\.less)$/i)){<br />                            complieCss(sourceFile, targetFile.replace(/^(.*)(\.css|\.less)$/i, &quot;$1.css&quot;));<br />                        }else{<br />                            var is = fs.createReadStream(sourceFile)<br />                            var os = fs.createWriteStream(targetFile);<br />                            sys.pump(is, os);<br />                        }<br />                    }<br />                });<br />            })();<br />        }<br />    });<br />}<br /><br />function complieCss(sourceFile, targetFile){<br />    fs.readFile(sourceFile, &quot;utf-8&quot;, function(e, data){<br />        new(less.Parser)({<br />            paths: [&quot;.&quot;, sourceFile.substring(0, sourceFile.lastIndexOf(&#39;/&#39;))],<br />            filename: sourceFile<br />        }).parse(data, function (err, tree) {<br />            if (err) {<br />                console.log(err);<br />            } else {<br />                try {<br />                    css = tree.toCSS({<br />                        yuicompress: true<br />                    });<br />                    if (targetFile) {<br />                        if (isFileExist(targetFile)){<br />                            fs.unlinkSync(targetFile);<br />                        }<br />                        var fd = fs.openSync(targetFile, &quot;w&quot;);<br />                        fs.writeSync(fd, css, 0, &quot;utf8&quot;);<br />                    }else{<br />                        sys.print(css);<br />                    }<br />                } catch (e) {<br />                    console.log(&quot;CSS file complie error. Ignore file: &quot; + sourceFile);<br />                }<br />            }<br />        });<br />    });<br />}<br /><br />function isFileExist (path) { <br />    try { <br />        fs.statSync(path); <br />        return true;<br />    } catch (e) { <br />        return false;<br />    } <br />}<br /></pre><br />更多的用法可在 <b>LESS</b> 官網找到:<br />官網: <a href="http://lesscss.org/">http://lesscss.org/</a><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5259934493976644480?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[助你快速開發網站的 Twitter Bootstrap]]></title>
    <link href="http://pro.ctlok.com/2011/12/speed-up-develop-web-site-twitter.html"/>
    <updated>2011-12-28T23:00:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/12/speed-up-develop-web-site-twitter</id>
    <content type="html"><![CDATA[<a href="http://a1.twimg.com/profile_images/1540251533/bootstrap-avatar_reasonably_small.png" imageanchor="1" style=""><img border="0" height="72" width="72" src="http://a1.twimg.com/profile_images/1540251533/bootstrap-avatar_reasonably_small.png" /></a><br /><br /><b>Twitter Bootstrap</b> 有點像以前曾經介紹過的 <a href="http://pro.ctlok.com/2010/07/css-framework-blueprint.html">Blueprint</a> 和 <a href="http://960.gs/">960 Grid System</a> 這類的 <b>CSS Framework</b>。<b>Twitter Bootstrap</b> 一樣是能夠幫助你快速設置好網頁佈局的一個 <b>Framework</b>，那這個 <b>Twitter Bootstrap</b> 和前 2 者有什麼分別呢？<br /><br />介面對一個網站是極奇重要的，就算你背後的程式有多強多勁，但沒有一個好的介面也是會把用戶趕走的。<b>Twitter Bootstrap</b> 不單只幫助你設置網頁佈局，亦提供了一體化的介面及一些常用的網頁元件，這些元件都經過精心設計，就算不懂任何任何圖像軟件也能砌出一個美觀的網站（我一直最對網站設計最感頭痛的就是整體一致化）。<br /><b>CSS</b> 元件方面有：<br /><ol><li>網頁佈局的 <b>Grid</b> (有 <b>Fixed layout</b> 和 <b>Fluid layout</b>）</li><li>常用標題大小設置 <b>Typography</b></li><li>列舉 <b>List</b></li><li>提示貼紙 <b>Inline labels</b></li><li>媒體框架 <b>Media grid</b></li><li><b>Table</b></li><li><b>Input box</b></li><li><b>Select box</b></li><li>按鈕 <b>Button</b></li><li>導航列 <b>Navigation bar</b></li><li>標籤 <b>Taps</b></li><li>顯示層級目錄的元件 <b>Breadcrumbs</b></li><li>頁數工具 <b>Pagination</b></li><li>提示 <b>Alerts & Errors</b></li></ol><br />除了 <b>CSS</b> 外元件外，<b>Twitter Bootstrap</b> 亦包括了一些 <b>Javascript</b> 元件：<br /><ol><li>對話框 <b>Modals</b></li><li><b>Tooltips</b></li><li><b>Popovers</b></li></ol><br />元件方面真的比其他 <b>CSS Framework</b> 多太多了，使用了 <b>Twitter Bootstrap</b> 都可以做出一個不太差的網站。<br /><br />因為有些元件和我現有的 <b>CSS</b> 相衝，還是看示範比較好。<br /><br />有興趣可到 <a href="http://twitter.github.com/bootstrap/">http://twitter.github.com/bootstrap/</a> 玩玩看示範。<br />下載可到 <a href="https://github.com/twitter/bootstrap">https://github.com/twitter/bootstrap</a>。<br />到目前為止最新穩定版本是 <b>1.4</b>。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-6552671825896734268?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自訂 EclipseLink Logger]]></title>
    <link href="http://pro.ctlok.com/2011/12/customize-eclipselink-logger.html"/>
    <updated>2011-12-19T16:02:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/12/customize-eclipselink-logger</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"><a href="http://www.eclipse.org/eclipselink/images/logos/eclipselink-logo.png" imageanchor="1" style=""><img border="0" height="71" width="242" src="http://www.eclipse.org/eclipselink/images/logos/eclipselink-logo.png" /></a></div><br /><br />預設的 <b>EclipseLink logger</b> 是會將所有訊息都會打印到 <b>System.out</b> 去，但 <b>System.out</b> 的記錄通常很難查找。如果不同的應用程式都在同一台 <b>Server</b> 上運行就更加混亂，不同的應用程式都會向 <b>System.out</b> 送出資料，根本不能拿來分析特定一個應用程式的行為。通常做法是會將不同的應用程式都設定不同的日誌檔案，以便分析。<br /><br />要將 <b>EclipseLink</b> 的日誌寫到自己的日誌檔案是很簡單的，只需 <b>Extend</b> <b>org.eclipse.persistence.logging.AbstractSessionLog</b> 這個 <b>class</b>，並且實現 <b>public void log(SessionLogEntry sessionLogEntry)</b> 就可以了，以下有一個例子是將 <b>EclipseLink</b> 的日誌經由 <b>Slf4j</b> 傳送到自訂的日誌檔案中。<br /><br /><pre class="brush: java">package com.ctlok.pro.log<br /><br />import org.eclipse.persistence.logging.AbstractSessionLog;<br />import org.eclipse.persistence.logging.SessionLogEntry;<br /><br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br /><br />public class MyEclipseLinkLogger extends AbstractSessionLog {<br />    <br />    private static final Logger logger = LoggerFactory.getLogger(MyEclipseLinkLogger.class);<br />    <br />    @Override<br />    public void log(SessionLogEntry sessionLogEntry) {<br />        switch (sessionLogEntry.getLevel()) {<br />        case SEVERE:<br />            logger.error(sessionLogEntry.getMessage());<br />            break;<br />        case WARNING:<br />            logger.warn(sessionLogEntry.getMessage());<br />            break;<br />        case INFO:<br />            logger.info(sessionLogEntry.getMessage());<br />            break;<br />        case FINE:<br />        default:<br />            logger.debug(sessionLogEntry.getMessage());<br />        }<br />    }<br />    <br />}<br /></pre><br />然後在 persistence.xml 的 propertiese 中加上:<br /><pre class="brush:xml">&lt;property name=&quot;eclipselink.logging.logger&quot; value=&quot;com.ctlok.pro.log.MyEclipseLinkLogger &quot;/&gt;<br /></pre><br />這樣就可以令 <b>EclipseLink</b> 使用自訂的 <b>Logger</b> 去打印日誌了。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5255208762444246598?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP CodeIgniter 根據瀏覽器語言來顯示語言]]></title>
    <link href="http://pro.ctlok.com/2011/12/php-codeigniter-i18n-browser-locale.html"/>
    <updated>2011-12-18T16:48:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/12/php-codeigniter-i18n-browser-locale</id>
    <content type="html"><![CDATA[<a href="http://smashingweb.ge6.org/wp-content/uploads/2009/08/codeigniter-lg.gif" imageanchor="1" style=""><img border="0" height="200" width="200" src="http://smashingweb.ge6.org/wp-content/uploads/2009/08/codeigniter-lg.gif" /></a><br /><br /><br />近排為客戶製作一個網頁，因為客戶已經買下了虛擬主機空間，不能用 <b>Java</b> 去作 <b>Server side language</b>，只好使用 <b>PHP + CodeIgniter</b>。他要求有轉換語言的功能，但發覺 <b>CodeIgniter</b> 本身的 <b>i18n</b> 功能不太完善，只好自己製作一個。<br /><br />這個 <b>i18n</b> 有點像 <b>JSF</b> 的<b>i18n</b> 功能，是根據用戶的瀏覽器語言來判定顯示那一種語言，並且對 <b>Controller</b> 控制語言的程式碼減少(可以 1 行程式碼也不用寫就能夠自動設換各種語言)。這可以減少重複的程式碼和減低 <b>Controller</b> 的複雜性。<br /><br />我己經將這個 <b>Library</b> 放上 <b>github</b> 了，有興趣可以下載來試試 <a href="https://github.com/lawrence0819/php-ci-internationalization">https://github.com/lawrence0819/php-ci-internationalization</a>。<br /><br />以下就是 <b>I18n.php (Core)</b>，放到 <b>application/libraries/I18n.php</b>。<br /><pre class="brush:php">&lt;?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');<br /><br />/**<br /> * I18n class<br /> *<br /> * @package     CodeIgniter<br /> * @subpackage  Libraries<br /> * @category    Libraries<br /> * @author      Lawrence Cheung<br /> * @version     1.0<br /> * @link        https://github.com/lawrence0819<br /> */<br />class I18n{<br />    <br />    protected $CI;<br />    protected $auto = TRUE;<br />    protected $loaded = FALSE;<br />    protected $locale;<br />    <br />    /**<br />     * Constructor - get CI instance<br />     *<br />     */<br />    public function __construct(){<br />        $this -&gt; CI = get_instance(); <br />    }<br />    <br />    /**<br />     * Auto load language for CI HOOK<br />     *<br />     * @access  public<br />     * @return  void<br />     */<br />    public function auto_load_language(){<br />        if ($this -&gt; auto){<br />            $this -&gt; load_language();<br />        }<br />    }<br />    <br />    /**<br />     * Manual load language file<br />     *<br />     * @access  public<br />     * @return  void<br />     */<br />    public function load_language() {<br />        $lang = $this -&gt; get_current_locale();<br />        $language = $this -&gt; get_language_config();<br />        <br />        if (!$this -&gt; loaded) {<br />            $files = $language['files'];<br />            $locale = $language['locale'];<br /><br />            if (array_key_exists($lang, $locale)) {<br />                $folder = $locale[$lang];<br />            } else {<br />                $shortLang = substr($lang, 0, 2);<br />                if (array_key_exists($shortLang, $locale)) {<br />                    $folder = $locale[$shortLang];<br />                } else {<br />                    $folder = $locale['default'];<br />                }<br />            }<br /><br />            foreach ($files as $file) {<br />                $this -&gt; CI -&gt; lang -&gt; load($file, $folder);<br />            }<br />            <br />            $this -&gt; loaded = TRUE;<br />        }<br />    }<br />    <br />    /**<br />     * Prevent CI Hook to auto load language file<br />     *<br />     * @access  public<br />     * @return  void<br />     */<br />    public function prevent_auto(){<br />        $this -&gt; auto = FALSE;<br />    }<br />    <br />    /**<br />     * Set current user locale and save locale to cookies<br />     *<br />     * @access  public<br />     * @Param   string      the locale string: en-US, en-UK, zh-TW, zh-CN<br />     * @Param   integer     the cookies value expire time, default is 30 day<br />     * @Param   string      cookies key<br />     * @return  void<br />     */<br />    public function set_current_locale($locale, $expire = 259200, $cookie_key = 'locale') {<br />        setcookie($cookie_key, $locale, time() + $expire);<br />        $this -&gt; locale = $locale;<br />    }<br />    <br />    /**<br />     * Get current user locale<br />     *<br />     * @access  public<br />     * @Param   string      cookies key, if you changed the key at set_current_locale, please assign it<br />     * @return  string<br />     */<br />    public function get_current_locale($cookie_key = 'locale') {<br />        if (!$this -&gt; locale){<br />            if (isset($_COOKIE[$cookie_key])) {<br />                $lang = $_COOKIE[$cookie_key];<br />            } else {<br />                if (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {<br />                    $lang = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 5);<br />                } else {<br />                    $language = $this -&gt; get_language_config();<br />                    $lang = $language['default_locale'];<br />                }<br />            }<br />            $this -&gt; locale = $lang;<br />        }<br />        return $this -&gt; locale;<br />    }<br />    <br />    /**<br />     * Get configuration values<br />     *<br />     * @access  default<br />     * @return  array<br />     */<br />    function get_language_config(){<br />        $this -&gt; CI -&gt; config -&gt; load('i18n');<br />        return $this -&gt; CI -&gt; config -&gt; item('language');<br />    }<br />    <br />}<br /><br />/* End of file I18n.php */<br />/* Location: ./application/libraries/I18N.php */<br /></pre><br />以下的是所需要的設定檔案 <b>i18n.php (Core)</b>，放到 <b>application/config/i18n.php</b>。<br /><pre class="brush:php">&lt;?php if (!defined('BASEPATH')) exit('No direct script access allowed');<br /><br />/**<br /> * I18n library configuration file<br /> *<br /> * @package     CodeIgniter<br /> * @subpackage  Libraries<br /> * @category    Libraries<br /> * @author      Lawrence Cheung<br /> * @version     1.0<br /> * @link        https://github.com/lawrence0819<br /> */<br /><br />//Add file in this array, if you want I18n library auto load them<br />$config['language']['files'] = array('messages');<br /><br />//If user locale not found, set this valus as a defaul user locale<br />$config['language']['default_locale'] = 'en';<br /><br />//Default language folder, if locale folder not found<br />$config['language']['locale']['default'] = 'tchinese';<br /><br />//zh-CN locale mapped to schinese folder<br />$config['language']['locale']['zh-CN'] = 'schinese';<br /><br />//zh-TW locale mapped to tchinese folder<br />$config['language']['locale']['zh-TW'] = 'tchinese';<br /><br />//en locale mapped to schinese folder<br />$config['language']['locale']['en'] = 'english';<br /><br />/* End of file i18n.php */<br />/* Location: ./application/config/i18n.php */<br /></pre><br />英文語言檔 <b>messages_lang.php</b>，放到 <b>application/language/english/messages_lang.php</b><br /><pre class="brush:php">&lt;?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');<br /><br />$lang['site_name'] = 'Example site';<br />$lang['message'] = 'Hello World!';<br /><br />/* End of file messages_lang.php */<br />/* Location: ./application/language/english/messages_lang.php */<br /></pre><br />正體中文語言檔 <b>messages_lang.php</b>，放到 <b>application/language/tchinese/messages_lang.php</b><br /><pre class="brush:php">&lt;?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');<br /><br />$lang['site_name'] = '範例網站';<br />$lang['message'] = '世界，你好！';<br /><br />/* End of file messages_lang.php */<br />/* Location: ./application/language/tchinese/messages_lang.php */<br /></pre><br />簡體中文語言檔 <b>messages_lang.php</b>，放到 <b>application/language/schinese/messages_lang.php</b><br /><pre class="brush:php">&lt;?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');<br /><br />$lang['site_name'] = '范例网站';<br />$lang['message'] = '世界，你好！';<br /><br />/* End of file messages_lang.php */<br />/* Location: ./application/language/schinese/messages_lang.php */<br /></pre><br /><br />設定就完成了，如果你有更多語言或不使用 <b>english</b>，<b>tchinese</b>，<b>schinese</b> 的名稱，請更改 <b>application/config/i18n.php</b>。<br /><br /><br />使用方法如下:<br /><br />手動選擇語言的 <b>Controller</b>:<br /><pre class="brush:php">&lt;?php if (!defined('BASEPATH')) exit('No direct script access allowed');<br /><br />class I18nmanual extends CI_Controller{<br /><br />    public function __construct(){<br />        parent::__construct();<br />        $this -&gt; load -&gt; library('i18n');<br />    }<br />    <br />    public function index(){<br />        $this -&gt; i18n -&gt; load_language();<br />        $this -&gt; load -&gt; view('i18ntest');<br />    }<br />    <br />}<br /><br />/* End of file i18nmanual.php */<br />/* Location: ./application/controller/i18nmanual.php */<br /></pre><br /><b>View</b>:<br /><pre class="brush:php">&lt;html&gt;<br />    &lt;head&gt;<br />        &lt;title&gt;&lt;?php echo $this-&gt;lang-&gt;line('site_name'); ?&gt;&lt;/title&gt;<br />    &lt;/head&gt;<br />    &lt;body&gt;<br />        &lt;?php echo $this-&gt;lang-&gt;line('message'); ?&gt;<br />    &lt;/body&gt;<br />&lt;/html&gt;<br /></pre><br />將會見到和 <b>Browser</b> 相對應的語言。<br /><br />如果覺得要在 __construct 內加上<br /><pre class="brush:php">$this -&gt; load -&gt; library('i18n');<br /></pre><br />太麻煩，可以在 <b>application/config/autoload.php</b> 自動載入 <b>i18n library</b>:<br /><pre class="brush:php">$autoload['libraries'] = array('i18n');<br /></pre><br />開啟全自動的功能要先在 <b>application/config/config.php</b> 更改以下程式碼:<br /><pre class="brush:php">$config['enable_hooks'] = TRUE;<br /></pre><br />再將 <b>application/config/hooks.php</b> 加入以下程式碼:<br /><pre class="brush:php">$hook['post_controller_constructor'][] = array(<br />                                'class'    =&gt; 'I18n',<br />                                'function' =&gt; 'auto_load_language',<br />                                'filename' =&gt; 'I18n.php',<br />                                'filepath' =&gt; 'libraries'<br />                                );<br /></pre><br /><b>Controller</b>:<br /><pre class="brush:php">&lt;?php if (!defined('BASEPATH')) exit('No direct script access allowed');<br /><br />class I18nauto extends CI_Controller{<br /><br />    public function __construct(){<br />        parent::__construct();<br />        $this -&gt; load -&gt; library('i18n');<br />    }<br />    <br />    public function index(){<br />        $this -&gt; load -&gt; view('i18ntest');<br />    }<br />    <br />}<br /><br />/* End of file i18nauto.php */<br />/* Location: ./application/controller/i18nauto.php */<br /></pre><br />如果有設定自動載入 <b>i18n library</b>，就連 <b>__construct</b> 也不需要。<br /><br />如果開啟了全自動的功能，但有些 <b>Controller</b> 又不想自動選擇語言，可以在 <b>__construct</b> 加上:<br /><pre class="brush:php">&lt;?php if (!defined('BASEPATH')) exit('No direct script access allowed');<br /><br />class I18nmanual extends CI_Controller{<br /><br />    public function __construct(){<br />        parent::__construct();<br />        $this -&gt; load -&gt; library('i18n');<br />        //prevent auto load language<br />        $this -&gt; i18n -&gt; prevent_auto();<br />    }<br />    <br />    public function index(){<br />        $this -&gt; i18n -&gt; set_current_locale('zh-TW');<br />        $this -&gt; i18n -&gt; load_language();<br />        $this -&gt; load -&gt; view('i18ntest');<br />    }<br />    <br />}<br /><br />/* End of file i18nmanual.php */<br />/* Location: ./application/controller/i18nmanual.php */<br /></pre><br />一經切換的語系，就會自動將此更改儲存到 <b>Cookies</b>，下一次就會以 <b>Cookies</b> 的語系來選擇語言檔。<br /><br />說明完畢，有什麼問題可以留言給我。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5619452461244676124?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[放棄 Google App Engine 轉投 Amazon Web Service]]></title>
    <link href="http://pro.ctlok.com/2011/10/gae-aws.html"/>
    <updated>2011-10-25T18:06:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/10/gae-aws</id>
    <content type="html"><![CDATA[自從 <b>Google App Engine</b> 轉換收費模式後，已經計劃將現有的 <b>Project</b> 放到 <b>Amazon Web Service</b> 上，以前選用 <b>GAE</b> 的原因是因為便宜，而且有免費使用量。雖然限制很多，但我並不介意這些限制。例如將現有的 <b>Application</b> 移植到上 <b>GAE</b> 上是一件非常痛苦的事，<b>JPA</b> 有一大堆東西不能用，大部份 <b>Entity</b> 要重新規劃，資料移植又是另一件痛苦的事。因為每一個 <b>HTTP Request</b> 也有 30 秒限制，上傳檔案又要另外寫一次。因為價錢便宜，我不介意改。<br /><br />現在 <b>GAE</b> 有新的收費模式，不是以前只計 <b>CPU Hour</b> 的方式，是一個小時一個小時地計算。向 <b>Datasource</b> 存取資料又另外收費，新的收費模式:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-EJYNRtkgUws/TqaCTBMCXnI/AAAAAAAAA5M/68-DSN20SMk/s1600/Google%2Bcloud%2Bservices%2B%25E2%2580%2593%2BApp%2BEngine.png" imageanchor="1" style=""><img border="0" height="357" width="400" src="http://3.bp.blogspot.com/-EJYNRtkgUws/TqaCTBMCXnI/AAAAAAAAA5M/68-DSN20SMk/s400/Google%2Bcloud%2Bservices%2B%25E2%2580%2593%2BApp%2BEngine.png" /></a></div><br />新的收費模式很像 <b>Amazon Web Service</b>，我最不能接受的是 <b>GAE</b> 也跟 <b>AWS EC2</b> 以小時計算費用，<b>EC2</b> 收費如下:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-xGJOT4CKWDI/TqaEhWPZ77I/AAAAAAAAA5Y/XAQWvmUiCYM/s1600/Amazon%2BElastic%2BCompute%2BCloud%2B%2528Amazon%2BEC2%2529.png" imageanchor="1" style=""><img border="0" height="291" width="400" src="http://3.bp.blogspot.com/-xGJOT4CKWDI/TqaEhWPZ77I/AAAAAAAAA5Y/XAQWvmUiCYM/s400/Amazon%2BElastic%2BCompute%2BCloud%2B%2528Amazon%2BEC2%2529.png" /></a></div><br /><b>EC2</b> 一個小型 <b>(Small) Virtual Machine</b> 一小時才 <b>$0.085 USD</b>，<b>GAE</b> 一小時也要 <b>$0.080 USD</b>，但 <b>GAE</b> 的 <b>Virtual Machine</b> 全自動起動的，即是說你不能控制機器數目，雖然你可以設定 <b>Max Idle Instances</b> 數目，但系統在需要時也一樣會新增比你設定的最大數目還多的機器 (我試過好幾次)。如果你起動了 2 台機器，就是 <b>$0.080 USD * 2</b>，一小時收費 <b>$ 0.16 USD</b>。<b>EC2</b> 是可以一台機器放置多個 應用程式，而 <b>GAE</b> 只可以一台機器放置一個應用程式，還是 <b>EC2</b> 比較化算。<br /><br />最後如果你仍然選擇留守 <b>GAE</b>，這裡有幾個方法可幫助你省錢:<br /><br />1. 在 <b>appengine-web.xml</b> 加上:<br /><pre class="brush: xml">&lt;threadsafe&gt;true&lt;/threadsafe&gt;<br /></pre><br />可以令你的機器同時處理多個請求 <b>(Request)</b><br /><br />2. 設定 <b>Max Idle Instances</b> 令 <b>GAE</b> 盡量不起動超過這個數量的機器<br />3. 設定 <b>Min Pending Latency</b> 在機器處理一個請求超過這一個時間才新增機器 (其實我覺得這個設定很雞肋，每一個請求時間也不一樣，又不可以設定太高，亦不能設定太低)<br />4. 盡量用多一點 <b>Cache</b> ，減少存取 <b>Datasource</b><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-5183712475670212955?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Google Closure Compiler 在執行期間壓縮 Javascript]]></title>
    <link href="http://pro.ctlok.com/2011/10/closure-compiler-run-time-compress.html"/>
    <updated>2011-10-21T14:16:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/10/closure-compiler-run-time-compress</id>
    <content type="html"><![CDATA[趁有空又寫寫文章，今次介紹的是 <b>Google Closure Compiler</b>，其實之前已經介紹過一次: <a href="http://pro.ctlok.com/2010/01/javascript_22.html">線上 <b>Javascript</b> 工具</a>，這個工具可以將 <b>Javascript</b> 的大小大幅降低。<br /><br />使用線上工具去壓縮有一個缺點就是要將 <b>Javascript</b> 檔案儲存成 <b>2</b> 份，1 份是原始檔案，另 1 份是經壓縮內容的 <b>Javascript</b>，因為不可能更改經壓縮過的內容，每一次更改檔案就需要更改原始檔案，然後利用 <b>Google Closure Compiler</b> 線上工具再壓縮一次，再更新壓縮內容，而且經壓縮的 <b>Javascript</b> 在瀏覽器 <b>debug</b> 亦比較困難。雖然你可以在 <b>HTML</b> 將引入的 <b>Javascript</b> 檔案改為未經壓縮然後 <b>debug</b>，但萬一忘記改回就麻煩了。<br /><br />幸好 <b>Google Closure Compiler</b> 有提供到 <b>Java</b> 使用的 <b>API</b> 來達到執行期間 <b>(Run Time)</b> 將 <b>Javascript</b> 壓縮。<br /><br />首先到 <b>Google Code</b> 下載: <a href="http://code.google.com/p/closure-compiler/downloads/list">Google Closure Compiler</a><br /><br />可用以下其中一個方法去壓縮:<br /><pre class="brush: java">protected String compress(InputStream inputStream) throws IOException{<br />    Compiler compiler = new Compiler();<br />    <br />    CompilerOptions options = new CompilerOptions();<br />    CompilationLevel.SIMPLE_OPTIMIZATIONS<br />            .setOptionsForCompilationLevel(options);<br />    <br />    JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot; &quot;);<br />    JSSourceFile input = JSSourceFile.fromInputStream(&quot;origin.js&quot;, inputStream);<br />    compiler.compile(extern, input, options);<br />    <br />    return compiler.toSource();<br />}<br /><br />protected String compress(String str) throws IOException{<br />    Compiler compiler = new Compiler();<br />    <br />    CompilerOptions options = new CompilerOptions();<br />    CompilationLevel.SIMPLE_OPTIMIZATIONS<br />            .setOptionsForCompilationLevel(options);<br />    <br />    JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot; &quot;);<br />    JSSourceFile input = JSSourceFile.fromCode(&quot;origin.js&quot;, str);<br />    compiler.compile(extern, input, options);<br />    <br />    return compiler.toSource();<br />}<br /></pre><br />其中 CompilationLevel 分別有 3 個選項:<br /><ul><li>CompilationLevel.WHITESPACE_ONLY</li><li>CompilationLevel.SIMPLE_OPTIMIZATIONS</li><li>CompilationLevel.ADVANCED_OPTIMIZATIONS</li></ul><br /><b>WHITESPACE_ONLY</b> 只會移除 <b>Javascript</b> 的空白。<br /><br /><b>SIMPLE_OPTIMIZATIONS</b> 是最常用的一種，移除 <b>Javascript</b> 的空白，而且將一些 <b>Local Variable</b> 或 <b>Local Function</b> 名稱改變，並將一些沒有用到的 <b>Variable</b> 移除，大幅提高 <b>Javascript</b> 的壓縮率。<br /><br /><b>ADVANCED_OPTIMIZATIONS</b> 是最高壓縮率的模式，將所有 <b>Variable</b> 或 <b>Function</b> 的名稱改變，有使用 <b>Javascript Framework</b> 不建議使用這個選項。<br /><br />在真實環境中我們可以加入一個 <b>Filter</b> 去將 <b>Javascript</b> 壓縮:<br /><pre class="brush: js">package com.ctlok.pro.filter;<br /><br />import java.io.IOException;<br />import java.io.InputStream;<br />import java.util.HashMap;<br />import java.util.Map;<br />import java.util.logging.Level;<br /><br />import javax.servlet.Filter;<br />import javax.servlet.FilterChain;<br />import javax.servlet.FilterConfig;<br />import javax.servlet.ServletException;<br />import javax.servlet.ServletRequest;<br />import javax.servlet.ServletResponse;<br />import javax.servlet.http.HttpServletRequest;<br />import javax.servlet.http.HttpServletResponse;<br /><br />import com.google.javascript.jscomp.CompilationLevel;<br />import com.google.javascript.jscomp.Compiler;<br />import com.google.javascript.jscomp.CompilerOptions;<br />import com.google.javascript.jscomp.JSSourceFile;<br />import com.google.javascript.jscomp.WarningLevel;<br /><br />public class ClosureCompilerFilter implements Filter {<br /><br />    //for cache<br />    private final Map&lt;String, String&gt; compressedJs = new HashMap&lt;String, String&gt;();<br />    private FilterConfig filterConfig;<br />    <br />    public void init(FilterConfig filterConfig) throws ServletException {<br />        this.filterConfig = filterConfig;<br />        <br />        //Turn off the compiler log<br />        Compiler.setLoggingLevel(Level.OFF);<br />    }<br /><br />    public void destroy() {<br /><br />    }<br /><br />    public void doFilter(ServletRequest request, ServletResponse response,<br />            FilterChain chain) throws IOException, ServletException {<br />        <br />        HttpServletRequest req = (HttpServletRequest) request;<br />        HttpServletResponse resp = (HttpServletResponse) response;<br />        <br />        String uri = req.getRequestURI();<br />        <br />        //Prevent compress the compressed Javascript, such as jquery.min.js, mootools.min.js, etc.<br />        if (!uri.matches(&quot;.*\\.min\\.js$&quot;)){<br />            String js = null;<br />            <br />            if (compressedJs.containsKey(uri)){<br />                //get from cache<br />                js = compressedJs.get(uri);<br />            }else{<br />                String contextPath = req.getContextPath();<br />                String jsPath = uri.substring(contextPath.length());<br />                <br />                //get javascript file as stream<br />                //getResourceAsStream cannot include context path<br />                InputStream inputStream = filterConfig.getServletContext().getResourceAsStream(jsPath);<br />                js = compress(inputStream);<br />                <br />                //put to cache<br />                compressedJs.put(uri, js);<br />            }<br />            <br />            resp.getWriter().write(js);<br />            return;<br />        }<br />        <br />        chain.doFilter(request, response);<br />    }<br />    <br />    protected String compress(InputStream inputStream) throws IOException{<br />        Compiler compiler = new Compiler();<br />        <br />        CompilerOptions options = new CompilerOptions();<br />        CompilationLevel.SIMPLE_OPTIMIZATIONS<br />                .setOptionsForCompilationLevel(options);<br />        WarningLevel.QUIET.setOptionsForWarningLevel(options);<br />        <br />        JSSourceFile extern = JSSourceFile.fromCode(&quot;externs.js&quot;, &quot;&quot;);<br />        JSSourceFile input = JSSourceFile.fromInputStream(&quot;origin.js&quot;, inputStream);<br />        compiler.compile(extern, input, options);<br /><br />        return compiler.toSource();<br />    }<br /><br />}<br /></pre><br />在 web.xml 加上:<br /><pre class="brush: xml">&lt;filter&gt;<br />    &lt;display-name&gt;ClosureCompilerFilter&lt;/display-name&gt;<br />    &lt;filter-name&gt;ClosureCompilerFilter&lt;/filter-name&gt;<br />    &lt;filter-class&gt;com.ctlok.pro.filter.ClosureCompilerFilter&lt;/filter-class&gt;<br />&lt;/filter&gt;<br />&lt;filter-mapping&gt;<br />    &lt;filter-name&gt;ClosureCompilerFilter&lt;/filter-name&gt;<br />    &lt;url-pattern&gt;*.js&lt;/url-pattern&gt;<br />&lt;/filter-mapping&gt;<br /></pre><br />這樣就可以令到 <b>.js</b> 結尾的 <b>Javascript</b> 檔案經壓縮再傳出去，又不會將 <b>.min.js</b> 已經壓縮過的 <b>Javascript</b> 又再壓縮一次。<br />經過壓縮後會儲存在 <b>Map</b> 內，畢竟壓縮的時間也不短。<br /><br />例如我有一個 /js/myjs.js 的檔案:<br /><pre class="brush: js">function ctlok() {<br />    var self = this;<br />    var $ = jQuery;<br /><br />     this.publicFunction = function() {<br />           localFunction();<br />      };<br /><br />     var localFunction = function() {<br />          var aaaaa = &#39;aaaaa&#39;;<br />          $(&#39;:input&#39;).val(aaaaa);<br />     };<br />}<br /></pre><br />經壓縮後變成:<br /><pre class="brush: js">function ctlok(){var a=jQuery;this.publicFunction=function(){a(&quot;:input&quot;).val(&quot;aaaaa&quot;)}};<br /></pre><br />範例下載:: <a href="https://sites.google.com/site/lawrencespace/lawpronotes/download/Google-Closure-Compiler.zip">Google-Closure-Compiler.zip</a><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-3261921414800777822?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[試用 Google Cloud SQL]]></title>
    <link href="http://pro.ctlok.com/2011/10/google-cloud-sql.html"/>
    <updated>2011-10-12T15:25:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/10/google-cloud-sql</id>
    <content type="html"><![CDATA[<br /><b>Google</b> 剛剛出的新服務 - <b>Google Cloud SQL</b>，可能有太多人抱怨認為 <b>Google App Engine</b> 的 <b>Datastore</b> 太難用，而且現有的 <b>App</b> 移植到 <b>Google App Engine</b> 最大問題也是 <b>Datastore</b>。傳統的應用程式大多數使用 <b>Relational Database Management System (RDBMS)</b> 關聯式資料庫管理系統作為儲存資料的系統，但 RDBMS 是比較難去擴展整個系統，起初可以靠升級系統硬件去加強效能，但硬件升級愈高，性價比愈低。而 <b>Google App Engine</b> 的 <b>Datastore</b> 是 <b>NoSQL Database</b>，擴展系統是一件很容易的事，可以買 5 台中級機器去組成整個系統，不夠可以再加上去，可以無限地伸延 (理論上)。<b>NoSQL Database</b> 是沒有 <b>Join Table</b> 之類的語法，你只能靠應用程式層面實現 <b>Join Table</b>，這會提高應用程式開發難度。<br /><br /><b>Google Cloud SQL</b> 是用來解決傳統的應用程式移植或對使用 <b>RDBMS</b> 有開發經驗的程式員有多一個選擇。而 <b>Google Cloud SQL</b> 底層是使用 <b>MySQL</b> 實作的。<br /><br />打開 <b>Google Cloud SQL</b> 的 <b>Console</b> 是這個樣子:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-AFL_B5qOkts/TpU1gdRFDbI/AAAAAAAAA2w/w9ChEdPHgbA/s1600/Google%2BAPIs%2BConsole.png" imageanchor="1"><img border="0" height="271" src="http://2.bp.blogspot.com/-AFL_B5qOkts/TpU1gdRFDbI/AAAAAAAAA2w/w9ChEdPHgbA/s400/Google%2BAPIs%2BConsole.png" width="400" /></a></div>而容量方面有三個選擇，分別是 <b>1GB, 5GB</b> 和 <b>10GB</b><br /><div class="separator" style="clear: both; text-align: center;"><br /><a href="http://2.bp.blogspot.com/-GwMRdzzAYHc/TpU13HyeQsI/AAAAAAAAA28/JmzTqt_Vp-8/s1600/create.png" imageanchor="1"><img border="0" height="259" src="http://2.bp.blogspot.com/-GwMRdzzAYHc/TpU13HyeQsI/AAAAAAAAA28/JmzTqt_Vp-8/s400/create.png" width="400" /></a></div>試試新增一個 <b>MySQL Instance</b> (暫時只有 <b>Google App Engine</b> 可以存取到，只需加入 <b>GAE</b> 的 <b>ID</b> 就可以了):<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-Iv86h1Z3L2U/TpU2Jl8OyMI/AAAAAAAAA3I/orPzKAOFaCg/s1600/create2png.png" imageanchor="1"><img border="0" height="259" src="http://4.bp.blogspot.com/-Iv86h1Z3L2U/TpU2Jl8OyMI/AAAAAAAAA3I/orPzKAOFaCg/s400/create2png.png" width="400" /></a></div><br />處理中:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-IxvqvjC8jpY/TpU2m2NxVFI/AAAAAAAAA3U/FJl6SQ7Y9sU/s1600/proccess.png" imageanchor="1"><img border="0" height="259" src="http://4.bp.blogspot.com/-IxvqvjC8jpY/TpU2m2NxVFI/AAAAAAAAA3U/FJl6SQ7Y9sU/s400/proccess.png" width="400" /></a></div><br />完成後看一看 <b>Log</b>:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-LjLRu5ATrJA/TpU255TptoI/AAAAAAAAA3g/bNREUDBB72Y/s1600/log.png" imageanchor="1"><img border="0" height="243" src="http://4.bp.blogspot.com/-LjLRu5ATrJA/TpU255TptoI/AAAAAAAAA3g/bNREUDBB72Y/s400/log.png" width="400" /></a></div><br />再到 <b>Prompt</b> 看看:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-49KpC4a39f0/TpU3Fnw6LqI/AAAAAAAAA3s/qnBGRoU4PGI/s1600/prompt.png" imageanchor="1"><img border="0" height="259" src="http://4.bp.blogspot.com/-49KpC4a39f0/TpU3Fnw6LqI/AAAAAAAAA3s/qnBGRoU4PGI/s400/prompt.png" width="400" /></a></div><br />新增一個 <b>Database</b>，命名為 <b>mydb</b>:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-I9VIUW3JCT4/TpU3hqVeZ2I/AAAAAAAAA34/10YramRrLy0/s1600/create%2Bdb.png" imageanchor="1"><img border="0" height="259" src="http://4.bp.blogspot.com/-I9VIUW3JCT4/TpU3hqVeZ2I/AAAAAAAAA34/10YramRrLy0/s400/create%2Bdb.png" width="400" /></a></div><br />再新增一個 <b>Table</b> 命名為 <b>User:</b><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-r-8wljKeA54/TpU4nTtEIlI/AAAAAAAAA4E/JzBBbwSHiFg/s1600/create%2Buser.png" imageanchor="1"><img border="0" height="243" src="http://1.bp.blogspot.com/-r-8wljKeA54/TpU4nTtEIlI/AAAAAAAAA4E/JzBBbwSHiFg/s400/create%2Buser.png" width="400" /></a></div><br />我發現每一次只可以輸入一行指令，有分號隔著也不行，希望遲點會改善。<br />當然 <b>Google Cloud SQL</b> 有提供 <b>Import</b> 的功能，但檔案一定要存放在 <b>Google Cloud Storage</b> 上。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-i504Lpps5q4/TpU7RL21tbI/AAAAAAAAA4c/NBmd8t3NNmg/s1600/import.png" imageanchor="1"><img border="0" height="243" src="http://1.bp.blogspot.com/-i504Lpps5q4/TpU7RL21tbI/AAAAAAAAA4c/NBmd8t3NNmg/s400/import.png" width="400" /></a></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-kDvbhJ22Js0/TpU7fXmKaeI/AAAAAAAAA4o/uAjXgZ-Be78/s1600/import-sql.png" imageanchor="1"><img border="0" height="243" src="http://3.bp.blogspot.com/-kDvbhJ22Js0/TpU7fXmKaeI/AAAAAAAAA4o/uAjXgZ-Be78/s400/import-sql.png" width="400" /></a></div><br /><br /><b>Import</b> 成功後就試試旗選取一埋資料:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-hVGDFOcJiSg/TpU82Jy9o4I/AAAAAAAAA40/quEBAuWWfiM/s1600/select%2Bcustomers.png" imageanchor="1" style=""><img border="0" height="400" width="116" src="http://1.bp.blogspot.com/-hVGDFOcJiSg/TpU82Jy9o4I/AAAAAAAAA40/quEBAuWWfiM/s400/select%2Bcustomers.png" /></a></div><br />再試試 <b>Join Table</b>:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-6nsvacH9BV0/TpU93-bZ4wI/AAAAAAAAA5A/SDrou4QGvHU/s1600/join%2Btable%2Border%2Border%2Bdetail.png" imageanchor="1" style=""><img border="0" height="400" width="74" src="http://4.bp.blogspot.com/-6nsvacH9BV0/TpU93-bZ4wI/AAAAAAAAA5A/SDrou4QGvHU/s400/join%2Btable%2Border%2Border%2Bdetail.png" /></a></div><br />一樣沒有問題。<br /><br /><b>SQL</b> 檔案: <a href="https://sites.google.com/site/lawrencespace/lawpronotes/download/sampledatabase.sql">sampledatabase.sql</a><br /><br />要申請 <b>Google Cloud SQL</b> 可到 <a href="https://code.google.com/apis/console/">https://code.google.com/apis/console/</a>，然後選取 <b>Service</b> 再在 <b>Google Cloud SQL</b> 按一下 <b>Request access</b>，填好表格後就等 <b>Google</b> 回覆就可以用了 (我是等了兩天才有回覆)。<br />遲一點再在 <b>GAE</b> 上試用。<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-8575963009302117038?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guice + Jersey 打造 RESTful 應用程式]]></title>
    <link href="http://pro.ctlok.com/2011/09/guice-jersey-restful-application.html"/>
    <updated>2011-09-08T14:46:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/09/guice-jersey-restful-application</id>
    <content type="html"><![CDATA[以前我喜歡使用 <b>Spring + Spring Web MVC</b> 來打造 <b>RESTful</b> 應用程式，但 <b>Spring</b> 的起動有點慢，如果放上 <b>Google App Engine</b> 上經常令用戶等待很久才載入到頁面。<br /><br />今次選用了 <b>Guice + Jersey</b> 的組合。<b>Guice</b> 是一個輕量級的容器，設定上比起 <b>Spring</b> 更簡單，起動或注入速度亦比 <b>Spring</b> 快。而 <b>Jersey</b> 則是一個為 <b>RESTful web service</b> 而設的一個 <b>Framework</b>。<br /><br /><b>Gucie</b> 官方網址: <a href="http://code.google.com/p/google-guice/">http://code.google.com/p/google-guice/</a><br /><b>Jersey</b> 官方網址: <a href="http://jersey.java.net/">http://jersey.java.net/</a><br /><br />因為手上的電腦沒有安裝 <b>Application Server</b>，只好拿 <b>GAE</b> 的 <b>Development Server</b> 來測試。<br /><br />首先下載 <b>Guice</b> : <a href="http://code.google.com/p/google-guice/downloads/detail?name=guice-3.0.zip&can=2&q=">http://code.google.com/p/google-guice/downloads/detail?name=guice-3.0.zip&can=2&q=</a> (現時為止最新版本為 3.0)<br /><br />打開後將 <b>aopalliance.jar, guice-3.0.jar, guice-servlet-3.0.jar</b> 和 <b>javax.inject.jar</b> 加到 <b>WEB-INF/lib</b> 中並加到 <b>Class path</b>。<br /><br />然後下載 <b>Jersey</b> 所需的 <b>Jar</b> (現時為止最新版本為 1.9):<br /><ol><li><a href="https://maven.java.net/service/local/artifact/maven/redirect?r=releases&g=com.sun.jersey&a=jersey-server&v=1.9&e=jar">jersey-server.jar</a></li><li><a href="https://maven.java.net/service/local/artifact/maven/redirect?r=releases&g=com.sun.jersey&a=jersey-core&v=1.9&e=jar">jersey-core.jar</a></li><li><a href="http://repo1.maven.org/maven2/asm/asm/3.1/asm-3.1.jar">asm.jar</a></li><li><a href="http://download.java.net/maven/2/com/sun/jersey/contribs/jersey-guice/1.9-SNAPSHOT/jersey-guice-1.9-SNAPSHOT.jar">jersey-guice-1.9-SNAPSHOT.jar</a></li></ol><br />將以上的檔案一樣是放到 WEB-INF/lib 並加到 <b>Class path</b>。<br /><br />首先建立一個 <b>class</b>，每一次連接 <b>http://www.xyzdomainname.com</b> 都會顯示 <b>I am Index page</b>:<br /><pre class="brush: java">package com.ctlok.pro.controller;<br /><br />import javax.ws.rs.GET;<br />import javax.ws.rs.Path;<br />import javax.ws.rs.Produces;<br />import javax.ws.rs.core.MediaType;<br /><br />@Path(&quot;/&quot;)<br />public class CommonController {<br /><br />    @GET<br />    @Produces(MediaType.TEXT_PLAIN)<br />    public String index(){<br />        return &quot;I am Index page&quot;;<br />    }<br />    <br />}<br /></pre><br /><b>@Path</b> 是設定這個 <b>class</b> 會處理的 <b>URL</b>，可以放在 <b>Class</b> 或 <b>Method</b>。而 <b>Jersey</b> 會搜尋出在 <b>Class</b> 上有 <b>@Path</b> 的類別然後處理。<br /><b>@GET</b> 是設定這個 <b>Method</b> 處理那一種請求，一共有 5 種方式: <b>GET, POST, HEAD, PUT, DELETE</b>。<br /><b>@Produces</b> 則是回傳資料的類型，可以是 Text, XML, JSON, HTML 等等。<br /><br />然後再去建立一個 <b>Guice</b> 的 <b>Module class</b> 並設定 <b>Jersey</b>:<br /><pre class="brush:java">package com.ctlok.pro;<br /><br />import java.util.HashMap;<br />import java.util.Map;<br /><br />import com.ctlok.pro.controller.CommonController;<br />import com.google.inject.servlet.RequestScoped;<br />import com.google.inject.servlet.ServletModule;<br />import com.sun.jersey.guice.spi.container.servlet.GuiceContainer;<br /><br />public class WebModule extends ServletModule {<br /><br />    @Override<br />    protected void configureServlets(){<br />        bind(CommonController.class).in(RequestScoped.class);<br />        <br />        Map&lt;String, String&gt; parameters = new HashMap&lt;String, String&gt;(); <br />        parameters.put(&quot;com.sun.jersey.config.property.packages&quot;, &quot;com.ctlok.pro.controller&quot;);<br />        serve(&quot;/*&quot;).with(GuiceContainer.class, parameters);<br />    }<br />    <br />}<br /></pre><br />然後設定 <b>Guice</b> 起動時的注入器:<br /><pre class="brush: java">package com.ctlok.pro;<br /><br />import com.google.inject.Guice;<br />import com.google.inject.Injector;<br />import com.google.inject.servlet.GuiceServletContextListener;<br /><br />public class AppConfig extends GuiceServletContextListener{<br /><br />    @Override<br />    protected Injector getInjector() {<br />        return Guice.createInjector(new WebModule());<br />    }<br /><br />}<br /></pre><br />在 web.xml 設定好 <b>Guice Filter</b>和 <b>Listener</b>:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br />xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;<br />xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;<br />xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee<br />http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; version=&quot;2.5&quot;&gt;<br /> &lt;listener&gt;<br />  &lt;listener-class&gt;com.ctlok.pro.AppConfig&lt;/listener-class&gt;<br /> &lt;/listener&gt;<br /> &lt;filter&gt;<br />  &lt;filter-name&gt;guiceFilter&lt;/filter-name&gt;<br />  &lt;filter-class&gt;com.google.inject.servlet.GuiceFilter&lt;/filter-class&gt;<br /> &lt;/filter&gt;<br /> &lt;filter-mapping&gt;<br />  &lt;filter-name&gt;guiceFilter&lt;/filter-name&gt;<br />  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;<br /> &lt;/filter-mapping&gt;<br />&lt;/web-app&gt;<br /></pre><br />打開 http://localhost:8888 後即可看到 &#8220;I am Index page&#8221;.<br /><br />如要增加 URL，可以在 CommonController 加入:<br /><pre class="brush: java">@GET<br />@Path(&quot;user/{userId}/{userName}&quot;)<br />@Produces(MediaType.TEXT_PLAIN)<br />public String getUser(@PathParam(&quot;userId&quot;) String userId, @PathParam(&quot;userName&quot;) String userName){<br />    return &quot;User ID: &quot; + userId + &quot;, user name: &quot; + userName;<br />}<br /></pre><br />你可能有點疑問，<b>@Path</b> 在 Class 已經設家了，現在又有一個 <b>@Path</b> 在 <b>method</b> 上，那 Jersey 會怎麼決定。<br />其實 <b>Jersey</b> 會將 <b>class</b> 的 <b>@Path value</b> 加上 method 的 <b>@Path value</b>，即是 &#8220;/&#8221; + &#8220;user/{userId}/{userName}&#8221;。<br /><br />打開 http://localhost:8888/user/123/lawrence 顯示:User ID: 123, user name: lawrence<br /><br />其實 <b>Jersey</b> 的 <b>Method</b> 不一定返回 <b>String</b> 可以是一個 <b>Object</b> 或 <b>Jersey</b> 定義 的 <b>Response</b>。以下例字示範如何顯示一個 <b>JSP</b> 頁面，並由 <b>Controller</b> 將 <b>Model</b> 傳給 <b>View (JSP)</b>:<br /><br />先在 WEB-INF 新增一個 <b>views</b> 資料夾並新增一個 <b>example.jsp</b>，<b>JSP</b> 內容如下:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;<br />&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;<br />&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;<br />&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;<br /> &lt;head&gt;<br />  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;<br />  &lt;title&gt;Guice + Jersey + JSP&lt;/title&gt;<br /> &lt;/head&gt;<br /> &lt;body&gt;<br />  &lt;c:out value=&quot;${it.msg}&quot; /&gt;<br /> &lt;/body&gt;<br />&lt;/html&gt;<br /></pre><br />在 <b>Controller</b> 內也增加一個 <b>Method</b>:<br /><pre class="brush: java">@GET<br />@Path(&quot;jsp&quot;)<br />@Produces(MediaType.TEXT_HTML)<br />public Response getJsp(){<br />    Map&lt;String, Object&gt; model = new HashMap&lt;String, Object&gt;();<br />    model.put(&quot;msg&quot;, &quot;Hello World!&quot;);<br />    return Response.ok(new Viewable(&quot;/WEB-INF/views/example.jsp&quot;, model)).build();<br />}<br /></pre><br />打開 http://localhost:8888/jsp 顯示: Hello World!<br /><br />完整的 CommonController:<br /><pre class="brush: java">package com.ctlok.pro.controller;<br /><br />import java.util.HashMap;<br />import java.util.Map;<br /><br />import javax.ws.rs.GET;<br />import javax.ws.rs.Path;<br />import javax.ws.rs.PathParam;<br />import javax.ws.rs.Produces;<br />import javax.ws.rs.core.MediaType;<br />import javax.ws.rs.core.Response;<br /><br />import com.sun.jersey.api.view.Viewable;<br /><br />@Path(&quot;/&quot;)<br />public class CommonController {<br /><br />    @GET<br />    @Produces(MediaType.TEXT_PLAIN)<br />    public String index() {<br />        return &quot;I am Index page&quot;;<br />    }<br /><br />    @GET<br />    @Path(&quot;user/{userId}/{userName}&quot;)<br />    @Produces(MediaType.TEXT_PLAIN)<br />    public String getUser(@PathParam(&quot;userId&quot;) String userId,<br />            @PathParam(&quot;userName&quot;) String userName) {<br />        return &quot;User ID: &quot; + userId + &quot;, user name: &quot; + userName;<br />    }<br /><br />    @GET<br />    @Path(&quot;jsp&quot;)<br />    @Produces(MediaType.TEXT_HTML)<br />    public Response getJsp() {<br />        Map&lt;String, Object&gt; model = new HashMap&lt;String, Object&gt;();<br />        model.put(&quot;msg&quot;, &quot;Hello World!&quot;);<br />        return Response.ok(new Viewable(&quot;/WEB-INF/views/example.jsp&quot;, model))<br />                .build();<br />    }<br /><br />}<br /></pre><br />範例: <a href="https://sites.google.com/site/lawrencespace/lawpronotes/download/Guice-Jersey.zip?attredirects=0&d=1">Guice-Jersey.zip</a><br />密碼: <b>pro.ctlok.com</b>  相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Dependency-Injection-Dhanji-R-Prasanna/dp/193398855X?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Dependency Injection" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=193398855X&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=193398855X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Google-Guice-Lightweight-Dependency-ebook/dp/B001BYBU80?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Google Guice: Agile Lightweight Dependency Injection Framework" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=B001BYBU80&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=B001BYBU80" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/RESTful-Java-Jax-RS-Animal-Guide/dp/0596158041?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="RESTful Java with Jax-RS (Animal Guide)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596158041&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596158041" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-4420115334139656989?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSF + RichFaces 做成 Session Memory Leak]]></title>
    <link href="http://pro.ctlok.com/2011/06/jsf-richfaces-session-memory-leak.html"/>
    <updated>2011-06-24T11:34:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/06/jsf-richfaces-session-memory-leak</id>
    <content type="html"><![CDATA[在公司有個項目是使用 <b>JSF</b> 作為 <b>View</b>，感覺十分差。<b>JSF</b> 給我的感覺: 運行慢，吃資源，限制又多。實在不太喜歡 <b>JSF</b>。<br /><br />在進行 <b>Street Test</b> 時，發覺 <b>Server</b> 上的 <b>Memory</b> 用得異常地多。經調查後發現 <b>RichFaces</b> 其中一個 <b>Object - AjaxStateHolder</b> 佔用大量 <b>Memory</b>。如果是使用 <b>3.2.0.SR1</b> 之前的版本更加嚴重，<b>Session</b> 隨時佔用 <b>1 Gigabytes</b> 的 <b>Memory</b>。<br /><br />解決方法就是在 <b>web.xml</b> 加入以下設定:<br /><pre class="brush: xml">&lt;context-param&gt;<br />    &lt;param-name&gt;com.sun.faces.numberOfViewsInSession&lt;/param-name&gt;<br />    &lt;param-value&gt;1&lt;/param-value&gt;<br />&lt;/context-param&gt;<br /><br />&lt;context-param&gt;<br />    &lt;param-name&gt;com.sun.faces.numberOfLogicalViews&lt;/param-name&gt;<br />    &lt;param-value&gt;1&lt;/param-value&gt;<br />&lt;/context-param&gt;<br /></pre><br />因為每運行一次 <b>JSF</b> 的 <b>View</b> 時都會將這個 <b>View</b> 放到 <b>Session</b> 內，而且同一個 <b>View</b> 亦會再儲存多一次在 <b>Session</b>，因為這些 <b>Session</b> 仍然在使用中，<b>JVM GC</b> 無法將不用的 <b>View</b> 回收，做成 <b>Memory</b> 使用量不斷增加。<br /><br />限制 <b>View</b> 數量後就可以解決這個問題。<br /><br />RichFaces bug: <a href="https://issues.jboss.org/browse/RF-3878">https://issues.jboss.org/browse/RF-3878</a><br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Core-JavaServer-Faces-David-Geary/dp/0137012896?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Core JavaServer Faces (3rd Edition)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0137012896&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0137012896" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/JavaServer-Faces-2-0-Complete-Reference/dp/0071625097?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="JavaServer Faces 2.0, The Complete Reference" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0071625097&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0071625097" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Beginning-JSP-JSF-Tomcat-Development/dp/1590599047?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Beginning JSP, JSF and Tomcat Web Development: From Novice to Professional" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=1590599047&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=1590599047" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-1311980917431620043?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 使用 Top Down 和 JAX-WS 來部署 Web Service Provider]]></title>
    <link href="http://pro.ctlok.com/2011/06/top-down-jax-ws-web-service-provider.html"/>
    <updated>2011-06-23T17:38:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/06/top-down-jax-ws-web-service-provider</id>
    <content type="html"><![CDATA[上一篇已經介紹過使用 <b>Bottom Up</b> 的方法來開發 <b>Web Service</b>: <a href="http://pro.ctlok.com/2011/06/java-bottom-up-jax-ws-web-service.html">Java 使用 Bottom Up 和 JAX-WS 來部署 Web Service</a>。今次當然是使用 <b>Top Down</b> 的方法，個人認為 <b>Top Down</b> 其實比 <b>Bottom Up</b> 方法更好，原因是自動產生出來的 <b>XML Schema</b> 和 <b>WSDL</b> 不太好。雖然是方便，但有很多細節地方不能自己操作到，所以我是比較喜歡 <b>Top Down</b> 的。<br /><br /><div style="clear: both;"></div><br />使用 <b>Top Down</b> 一定要懂 <b>XML Schema</b> 和 <b>Web Services Description Language</b>。<br /><br /><b>XML Schema</b>: <a href="http://www.w3schools.com/schema/default.asp">http://www.w3schools.com/schema/default.asp</a><br /><b>Web Services Description Language</b>: <a href="http://www.w3schools.com/WSDL/default.asp">http://www.w3schools.com/WSDL/default.asp</a><br /><br />這次的 <b>Web Service</b> 功能是客戶端 (<b>Web service client</b>) 送出一個 Employee Id list 到 服務器端 (<b>Web service provider</b>)。<br /><br />首先建立一個 <b>WAR project</b>，然後在 <b>web root</b> 目錄 加入 <b>company.xsd</b> 和 <b>company.wsdl</b>。<br /><br />以下是 <b>company.xsd</b>:<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"<br />    targetNamespace="http://pro.ctlok.com/company" xmlns:tns="http://pro.ctlok.com/company"<br />    elementFormDefault="qualified"&gt;<br /><br />    &lt;xs:simpleType name="EmployeeId"&gt;<br />        &lt;xs:restriction base="xs:string"&gt;<br />            &lt;xs:length value="7" /&gt;<br />            &lt;xs:pattern value="E[0-9]{7}" /&gt;<br />        &lt;/xs:restriction&gt;<br />    &lt;/xs:simpleType&gt;<br /><br />    &lt;xs:simpleType name="EmployeeTitle"&gt;<br />        &lt;xs:restriction base="xs:string"&gt;<br />            &lt;xs:enumeration value="CEO" /&gt;<br />            &lt;xs:enumeration value="Manger" /&gt;<br />            &lt;xs:enumeration value="Supervisor" /&gt;<br />            &lt;xs:enumeration value="Clerk" /&gt;<br />        &lt;/xs:restriction&gt;<br />    &lt;/xs:simpleType&gt;<br /><br />    &lt;xs:complexType name="EmployeeInfo"&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name="eid" type="tns:EmployeeId"<br />                minOccurs="0" nillable="false" /&gt;<br />            &lt;xs:element name="firstName" type="xs:string"<br />                minOccurs="0" nillable="false" /&gt;<br />            &lt;xs:element name="lastName" type="xs:string"<br />                minOccurs="0" nillable="false" /&gt;<br />            &lt;xs:element name="age" type="xs:unsignedShort"<br />                minOccurs="0" nillable="false" /&gt;<br />            &lt;xs:element name="title" type="tns:EmployeeTitle"<br />                minOccurs="0" nillable="false" /&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:complexType name="EmployeeInfoWrapper"&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name="employeeInfo" type="tns:EmployeeInfo"<br />                minOccurs="0" maxOccurs="unbounded" nillable="false" /&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:complexType name="EmployeeIdWrapper"&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name="eid" type="tns:EmployeeId"<br />                minOccurs="0" maxOccurs="unbounded" nillable="false" /&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:element name="EmployeeIdList" type="tns:EmployeeIdWrapper" /&gt;<br />    &lt;xs:element name="EmployeeInfoList" type="tns:EmployeeInfoWrapper" /&gt;<br /><br />&lt;/xs:schema&gt;<br /></pre><br />以下則是 <b>company.wsdl</b>:<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;wsdl:definitions name="Company" targetNamespace="http://pro.ctlok.com/company"<br />    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://pro.ctlok.com/company"<br />    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;<br />    <br />    &lt;wsdl:types&gt;<br />        &lt;xsd:schema&gt;<br />            &lt;xsd:import namespace="http://pro.ctlok.com/company"<br />                schemaLocation="company.xsd" /&gt;<br />        &lt;/xsd:schema&gt;<br />    &lt;/wsdl:types&gt;<br />    <br />    &lt;wsdl:message name="employeeLookupRequest"&gt;<br />        &lt;wsdl:part element="tns:EmployeeIdList" name="employeeIdList" /&gt;<br />    &lt;/wsdl:message&gt;<br />    <br />    &lt;wsdl:message name="employeeLookupResponse"&gt;<br />        &lt;wsdl:part element="tns:EmployeeInfoList" name="employeeInfoList" /&gt;<br />    &lt;/wsdl:message&gt;<br />    <br />    &lt;wsdl:portType name="employeeLookupService"&gt;<br />        &lt;wsdl:operation name="employeeLookup"&gt;<br />            &lt;wsdl:input message="tns:employeeLookupRequest" /&gt;<br />            &lt;wsdl:output message="tns:employeeLookupResponse" /&gt;<br />        &lt;/wsdl:operation&gt;<br />    &lt;/wsdl:portType&gt;<br />    <br />    &lt;wsdl:binding name="employeeLookupBinding" type="tns:employeeLookupService"&gt;<br />        &lt;soap:binding style="document"<br />            transport="http://schemas.xmlsoap.org/soap/http" /&gt;<br />        &lt;wsdl:operation name="employeeLookup"&gt;<br />            &lt;soap:operation<br />                soapAction="http://pro.ctlok.com/company/employeeLookup" /&gt;<br />            &lt;wsdl:input&gt;<br />                &lt;soap:body use="literal" /&gt;<br />            &lt;/wsdl:input&gt;<br />            &lt;wsdl:output&gt;<br />                &lt;soap:body use="literal" /&gt;<br />            &lt;/wsdl:output&gt;<br />        &lt;/wsdl:operation&gt;<br />    &lt;/wsdl:binding&gt;<br />    <br />    &lt;wsdl:service name="employeeLookupService"&gt;<br />        &lt;wsdl:port binding="tns:employeeLookupBinding" name="employeeLookupPort"&gt;<br />            &lt;soap:address location="http://localhost:9080/WebService" /&gt;<br />        &lt;/wsdl:port&gt;<br />    &lt;/wsdl:service&gt;<br />    <br />&lt;/wsdl:definitions&gt;<br /></pre><br />現在完成了 <b>Web Service</b> 的介面了，但要將 <b>Web Service</b> 的 <b>Object</b> 轉為 <b>Java Class</b> 才可以。幸好有工具可以替我們完成這項工作，不用一個一個手動建立。使用 <b>JAXB compiler</b> 幫我們將 <b>WSDL</b> 內用到的 <b>Object</b> 轉為 <b>Java Class</b>。在 <b>Windows</b> 打開 <b>CMD</b> 輸入以下指令:<br /><pre class="brush: bat">xjc -wsdl company.wsdl -p com.ctlok.pro.ws.model<br /></pre><br />*** 如果你不能執行 <b>xjc</b>，請查看 <b>System Path</b> 有沒有加入 <b>%JAVA_HOME%/bin</b> 。 ***<br /><br /><ul><li><b>-wsdl</b> 是 <b>wsdl</b> 檔案存放的位置</li><li><b>-p</b> 是產生出來的 <b>Java class</b> 所在 <b>package</b></li></ul><br />想知更多指令可參考: <a href="http://download.oracle.com/docs/cd/E17802_01/webservices/webservices/docs/1.6/tutorial/doc/JAXBUsing2.html">JAXB Using</a><br /><br />執行指令後會看到有 6 個 .java 檔案，分別是:<br /><ol><li>EmployeeIdWrapper</li><li>EmployeeInfo</li><li>EmployeeInfoWrapper</li><li>EmployeeTitle</li><li>ObjectFactory</li><li>package-info</li></ol><br /><b>EmployeeIdWrapper:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import java.util.ArrayList;<br />import java.util.List;<br />import javax.xml.bind.annotation.XmlAccessType;<br />import javax.xml.bind.annotation.XmlAccessorType;<br />import javax.xml.bind.annotation.XmlType;<br /><br /><br />/**<br /> * &lt;p&gt;Java class for EmployeeIdWrapper complex type.<br /> * <br /> * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.<br /> * <br /> * &lt;pre&gt;<br /> * &amp;lt;complexType name="EmployeeIdWrapper"&gt;<br /> *   &amp;lt;complexContent&gt;<br /> *     &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;<br /> *       &amp;lt;sequence&gt;<br /> *         &amp;lt;element name="eid" type="{http://pro.ctlok.com/company}EmployeeId" maxOccurs="unbounded" minOccurs="0"/&gt;<br /> *       &amp;lt;/sequence&gt;<br /> *     &amp;lt;/restriction&gt;<br /> *   &amp;lt;/complexContent&gt;<br /> * &amp;lt;/complexType&gt;<br /> * &lt;/pre&gt;<br /> * <br /> * <br /> */<br />@XmlAccessorType(XmlAccessType.FIELD)<br />@XmlType(name = "EmployeeIdWrapper", propOrder = {<br />    "eid"<br />})<br />public class EmployeeIdWrapper {<br /><br />    protected List&lt;String&gt; eid;<br /><br />    /**<br />     * Gets the value of the eid property.<br />     * <br />     * &lt;p&gt;<br />     * This accessor method returns a reference to the live list,<br />     * not a snapshot. Therefore any modification you make to the<br />     * returned list will be present inside the JAXB object.<br />     * This is why there is not a &lt;CODE&gt;set&lt;/CODE&gt; method for the eid property.<br />     * <br />     * &lt;p&gt;<br />     * For example, to add a new item, do as follows:<br />     * &lt;pre&gt;<br />     *    getEid().add(newItem);<br />     * &lt;/pre&gt;<br />     * <br />     * <br />     * &lt;p&gt;<br />     * Objects of the following type(s) are allowed in the list<br />     * {@link String }<br />     * <br />     * <br />     */<br />    public List&lt;String&gt; getEid() {<br />        if (eid == null) {<br />            eid = new ArrayList&lt;String&gt;();<br />        }<br />        return this.eid;<br />    }<br /><br />}<br /></pre><br /><b>EmployeeInfo:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import javax.xml.bind.annotation.XmlAccessType;<br />import javax.xml.bind.annotation.XmlAccessorType;<br />import javax.xml.bind.annotation.XmlSchemaType;<br />import javax.xml.bind.annotation.XmlType;<br /><br /><br />/**<br /> * &lt;p&gt;Java class for EmployeeInfo complex type.<br /> * <br /> * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.<br /> * <br /> * &lt;pre&gt;<br /> * &amp;lt;complexType name="EmployeeInfo"&gt;<br /> *   &amp;lt;complexContent&gt;<br /> *     &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;<br /> *       &amp;lt;sequence&gt;<br /> *         &amp;lt;element name="eid" type="{http://pro.ctlok.com/company}EmployeeId" minOccurs="0"/&gt;<br /> *         &amp;lt;element name="firstName" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;<br /> *         &amp;lt;element name="lastName" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;<br /> *         &amp;lt;element name="age" type="{http://www.w3.org/2001/XMLSchema}unsignedShort" minOccurs="0"/&gt;<br /> *         &amp;lt;element name="title" type="{http://pro.ctlok.com/company}EmployeeTitle" minOccurs="0"/&gt;<br /> *       &amp;lt;/sequence&gt;<br /> *     &amp;lt;/restriction&gt;<br /> *   &amp;lt;/complexContent&gt;<br /> * &amp;lt;/complexType&gt;<br /> * &lt;/pre&gt;<br /> * <br /> * <br /> */<br />@XmlAccessorType(XmlAccessType.FIELD)<br />@XmlType(name = "EmployeeInfo", propOrder = {<br />    "eid",<br />    "firstName",<br />    "lastName",<br />    "age",<br />    "title"<br />})<br />public class EmployeeInfo {<br /><br />    protected String eid;<br />    protected String firstName;<br />    protected String lastName;<br />    @XmlSchemaType(name = "unsignedShort")<br />    protected Integer age;<br />    protected EmployeeTitle title;<br /><br />    /**<br />     * Gets the value of the eid property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link String }<br />     *     <br />     */<br />    public String getEid() {<br />        return eid;<br />    }<br /><br />    /**<br />     * Sets the value of the eid property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link String }<br />     *     <br />     */<br />    public void setEid(String value) {<br />        this.eid = value;<br />    }<br /><br />    /**<br />     * Gets the value of the firstName property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link String }<br />     *     <br />     */<br />    public String getFirstName() {<br />        return firstName;<br />    }<br /><br />    /**<br />     * Sets the value of the firstName property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link String }<br />     *     <br />     */<br />    public void setFirstName(String value) {<br />        this.firstName = value;<br />    }<br /><br />    /**<br />     * Gets the value of the lastName property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link String }<br />     *     <br />     */<br />    public String getLastName() {<br />        return lastName;<br />    }<br /><br />    /**<br />     * Sets the value of the lastName property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link String }<br />     *     <br />     */<br />    public void setLastName(String value) {<br />        this.lastName = value;<br />    }<br /><br />    /**<br />     * Gets the value of the age property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link Integer }<br />     *     <br />     */<br />    public Integer getAge() {<br />        return age;<br />    }<br /><br />    /**<br />     * Sets the value of the age property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link Integer }<br />     *     <br />     */<br />    public void setAge(Integer value) {<br />        this.age = value;<br />    }<br /><br />    /**<br />     * Gets the value of the title property.<br />     * <br />     * @return<br />     *     possible object is<br />     *     {@link EmployeeTitle }<br />     *     <br />     */<br />    public EmployeeTitle getTitle() {<br />        return title;<br />    }<br /><br />    /**<br />     * Sets the value of the title property.<br />     * <br />     * @param value<br />     *     allowed object is<br />     *     {@link EmployeeTitle }<br />     *     <br />     */<br />    public void setTitle(EmployeeTitle value) {<br />        this.title = value;<br />    }<br /><br />}<br /></pre><br /><b>EmployeeInfoWrapper:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import java.util.ArrayList;<br />import java.util.List;<br />import javax.xml.bind.annotation.XmlAccessType;<br />import javax.xml.bind.annotation.XmlAccessorType;<br />import javax.xml.bind.annotation.XmlType;<br /><br /><br />/**<br /> * &lt;p&gt;Java class for EmployeeInfoWrapper complex type.<br /> * <br /> * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.<br /> * <br /> * &lt;pre&gt;<br /> * &amp;lt;complexType name="EmployeeInfoWrapper"&gt;<br /> *   &amp;lt;complexContent&gt;<br /> *     &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;<br /> *       &amp;lt;sequence&gt;<br /> *         &amp;lt;element name="employeeInfo" type="{http://pro.ctlok.com/company}EmployeeInfo" maxOccurs="unbounded" minOccurs="0"/&gt;<br /> *       &amp;lt;/sequence&gt;<br /> *     &amp;lt;/restriction&gt;<br /> *   &amp;lt;/complexContent&gt;<br /> * &amp;lt;/complexType&gt;<br /> * &lt;/pre&gt;<br /> * <br /> * <br /> */<br />@XmlAccessorType(XmlAccessType.FIELD)<br />@XmlType(name = "EmployeeInfoWrapper", propOrder = {<br />    "employeeInfo"<br />})<br />public class EmployeeInfoWrapper {<br /><br />    protected List&lt;EmployeeInfo&gt; employeeInfo;<br /><br />    /**<br />     * Gets the value of the employeeInfo property.<br />     * <br />     * &lt;p&gt;<br />     * This accessor method returns a reference to the live list,<br />     * not a snapshot. Therefore any modification you make to the<br />     * returned list will be present inside the JAXB object.<br />     * This is why there is not a &lt;CODE&gt;set&lt;/CODE&gt; method for the employeeInfo property.<br />     * <br />     * &lt;p&gt;<br />     * For example, to add a new item, do as follows:<br />     * &lt;pre&gt;<br />     *    getEmployeeInfo().add(newItem);<br />     * &lt;/pre&gt;<br />     * <br />     * <br />     * &lt;p&gt;<br />     * Objects of the following type(s) are allowed in the list<br />     * {@link EmployeeInfo }<br />     * <br />     * <br />     */<br />    public List&lt;EmployeeInfo&gt; getEmployeeInfo() {<br />        if (employeeInfo == null) {<br />            employeeInfo = new ArrayList&lt;EmployeeInfo&gt;();<br />        }<br />        return this.employeeInfo;<br />    }<br /><br />}<br /></pre><br /><b>EmployeeTitle:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import javax.xml.bind.annotation.XmlEnum;<br />import javax.xml.bind.annotation.XmlEnumValue;<br />import javax.xml.bind.annotation.XmlType;<br /><br /><br />/**<br /> * &lt;p&gt;Java class for EmployeeTitle.<br /> * <br /> * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.<br /> * &lt;p&gt;<br /> * &lt;pre&gt;<br /> * &amp;lt;simpleType name="EmployeeTitle"&gt;<br /> *   &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;<br /> *     &amp;lt;enumeration value="CEO"/&gt;<br /> *     &amp;lt;enumeration value="Manger"/&gt;<br /> *     &amp;lt;enumeration value="Supervisor"/&gt;<br /> *     &amp;lt;enumeration value="Clerk"/&gt;<br /> *   &amp;lt;/restriction&gt;<br /> * &amp;lt;/simpleType&gt;<br /> * &lt;/pre&gt;<br /> * <br /> */<br />@XmlType(name = "EmployeeTitle")<br />@XmlEnum<br />public enum EmployeeTitle {<br /><br />    CEO("CEO"),<br />    @XmlEnumValue("Manger")<br />    MANGER("Manger"),<br />    @XmlEnumValue("Supervisor")<br />    SUPERVISOR("Supervisor"),<br />    @XmlEnumValue("Clerk")<br />    CLERK("Clerk");<br />    private final String value;<br /><br />    EmployeeTitle(String v) {<br />        value = v;<br />    }<br /><br />    public String value() {<br />        return value;<br />    }<br /><br />    public static EmployeeTitle fromValue(String v) {<br />        for (EmployeeTitle c: EmployeeTitle.values()) {<br />            if (c.value.equals(v)) {<br />                return c;<br />            }<br />        }<br />        throw new IllegalArgumentException(v);<br />    }<br /><br />}<br /></pre><br /><b>ObjectFactory:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br /><br />package com.ctlok.pro.ws.model;<br /><br />import javax.xml.bind.JAXBElement;<br />import javax.xml.bind.annotation.XmlElementDecl;<br />import javax.xml.bind.annotation.XmlRegistry;<br />import javax.xml.namespace.QName;<br /><br /><br />/**<br /> * This object contains factory methods for each <br /> * Java content interface and Java element interface <br /> * generated in the com.ctlok.pro.ws.model package. <br /> * &lt;p&gt;An ObjectFactory allows you to programatically <br /> * construct new instances of the Java representation <br /> * for XML content. The Java representation of XML <br /> * content can consist of schema derived interfaces <br /> * and classes representing the binding of schema <br /> * type definitions, element declarations and model <br /> * groups.  Factory methods for each of these are <br /> * provided in this class.<br /> * <br /> */<br />@XmlRegistry<br />public class ObjectFactory {<br /><br />    private final static QName _EmployeeIdList_QNAME = new QName("http://pro.ctlok.com/company", "EmployeeIdList");<br />    private final static QName _EmployeeInfoList_QNAME = new QName("http://pro.ctlok.com/company", "EmployeeInfoList");<br /><br />    /**<br />     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.ctlok.pro.ws.model<br />     * <br />     */<br />    public ObjectFactory() {<br />    }<br /><br />    /**<br />     * Create an instance of {@link EmployeeIdWrapper }<br />     * <br />     */<br />    public EmployeeIdWrapper createEmployeeIdWrapper() {<br />        return new EmployeeIdWrapper();<br />    }<br /><br />    /**<br />     * Create an instance of {@link EmployeeInfoWrapper }<br />     * <br />     */<br />    public EmployeeInfoWrapper createEmployeeInfoWrapper() {<br />        return new EmployeeInfoWrapper();<br />    }<br /><br />    /**<br />     * Create an instance of {@link EmployeeInfo }<br />     * <br />     */<br />    public EmployeeInfo createEmployeeInfo() {<br />        return new EmployeeInfo();<br />    }<br /><br />    /**<br />     * Create an instance of {@link JAXBElement }{@code &lt;}{@link EmployeeIdWrapper }{@code &gt;}}<br />     * <br />     */<br />    @XmlElementDecl(namespace = "http://pro.ctlok.com/company", name = "EmployeeIdList")<br />    public JAXBElement&lt;EmployeeIdWrapper&gt; createEmployeeIdList(EmployeeIdWrapper value) {<br />        return new JAXBElement&lt;EmployeeIdWrapper&gt;(_EmployeeIdList_QNAME, EmployeeIdWrapper.class, null, value);<br />    }<br /><br />    /**<br />     * Create an instance of {@link JAXBElement }{@code &lt;}{@link EmployeeInfoWrapper }{@code &gt;}}<br />     * <br />     */<br />    @XmlElementDecl(namespace = "http://pro.ctlok.com/company", name = "EmployeeInfoList")<br />    public JAXBElement&lt;EmployeeInfoWrapper&gt; createEmployeeInfoList(EmployeeInfoWrapper value) {<br />        return new JAXBElement&lt;EmployeeInfoWrapper&gt;(_EmployeeInfoList_QNAME, EmployeeInfoWrapper.class, null, value);<br />    }<br /><br />}<br /></pre><br /><b>package-info:</b><br /><pre class="brush: java">//<br />// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 <br />// See &lt;a href="http://java.sun.com/xml/jaxb"&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; <br />// Any modifications to this file will be lost upon recompilation of the source schema. <br />// Generated on: 2011.06.23 at 04:28:35 PM CST <br />//<br /><br />@javax.xml.bind.annotation.XmlSchema(namespace = "http://pro.ctlok.com/company", elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED)<br />package com.ctlok.pro.ws.model;<br /></pre><br />將這些 <b>Java Class</b> 複製到 <b>WAR project</b> 內。<br /><br />再建立一個 <b>Java Class - EmployeeLookupService:</b><br /><pre class="brush: java">package com.ctlok.pro.ws;<br /><br />import java.util.HashMap;<br />import java.util.Map;<br /><br />import javax.jws.WebMethod;<br />import javax.jws.WebParam;<br />import javax.jws.WebResult;<br />import javax.jws.WebService;<br />import javax.jws.soap.SOAPBinding;<br />import javax.xml.bind.annotation.XmlSeeAlso;<br /><br />import com.ctlok.pro.ws.model.EmployeeIdWrapper;<br />import com.ctlok.pro.ws.model.EmployeeInfo;<br />import com.ctlok.pro.ws.model.EmployeeInfoWrapper;<br />import com.ctlok.pro.ws.model.EmployeeTitle;<br />import com.ctlok.pro.ws.model.ObjectFactory;<br /><br />@WebService(<br />        name = "employeeLookupService", <br />        serviceName = "employeeLookupService", <br />        portName = "employeeLookupPort", <br />        targetNamespace= "http://pro.ctlok.com/company",<br />        wsdlLocation = "company.wsdl")<br />@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)<br />@XmlSeeAlso({ObjectFactory.class})<br />public class EmployeeLookupService {<br />    <br />    private Map&lt;String, EmployeeInfo&gt; infoMap;<br />    <br />    public EmployeeLookupService(){<br />        infoMap = new HashMap&lt;String, EmployeeInfo&gt;();<br />        <br />        EmployeeInfo info1 = new EmployeeInfo();<br />        info1.setEid("E1000000");<br />        info1.setFirstName("Lawrence");<br />        info1.setLastName("Cheung");<br />        info1.setAge(24);<br />        info1.setTitle(EmployeeTitle.CEO);<br />        <br />        EmployeeInfo info2 = new EmployeeInfo();<br />        info2.setEid("E1524125");<br />        info2.setFirstName("Tom");<br />        info2.setLastName("Wong");<br />        info2.setAge(22);<br />        info2.setTitle(EmployeeTitle.CLERK);<br />        <br />        EmployeeInfo info3 = new EmployeeInfo();<br />        info3.setEid("E7452145");<br />        info3.setFirstName("John");<br />        info3.setLastName("Lee");<br />        info3.setAge(29);<br />        info3.setTitle(EmployeeTitle.MANGER);<br />        <br />        EmployeeInfo info4 = new EmployeeInfo();<br />        info4.setEid("E6523547");<br />        info4.setFirstName("Katty");<br />        info4.setLastName("Choi");<br />        info4.setAge(24);<br />        info4.setTitle(EmployeeTitle.SUPERVISOR);<br />        <br />        <br />        infoMap.put(info1.getEid(), info1);<br />        infoMap.put(info2.getEid(), info2);<br />        infoMap.put(info3.getEid(), info3);<br />        infoMap.put(info4.getEid(), info4);<br />    }<br /><br />    @WebMethod(operationName="employeeLookup")<br />    @WebResult(name = "EmployeeInfoList", partName = "employeeInfoList")<br />    public EmployeeInfoWrapper employeeLookup(<br />            @WebParam(name = "EmployeeIdList", partName = "employeeIdList") <br />            EmployeeIdWrapper employeeIdWrapper){<br />        <br />        EmployeeInfoWrapper employeeInfoWrapper = new EmployeeInfoWrapper();<br />        <br />        for (String eid: employeeIdWrapper.getEid()){<br />            EmployeeInfo info = infoMap.get(eid);<br />            <br />            if (info == null)<br />                info = new EmployeeInfo();<br />            <br />            employeeInfoWrapper.getEmployeeInfo().add(info);<br />        }<br />        <br />        return employeeInfoWrapper;<br />        <br />    }<br /><br />}<br /></pre><br />完成了 <b>Web Service Provider</b>。<br /><br /><pre class="brush: java">@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)<br /></pre><br />以上這句注解很重要，預設是 <b>WRAPPED</b>，即是 <b>JAX-WS</b> 會替你自動包裝好 <b>List Object</b>，但我們在 <b>XML Schema</b> 已經設定了 <b>Wrapper</b>，所以不用設定為 <b>WRAPPED</b>。<br /><br />&#8212;&#8212;&#8212;&#8212;&#8211; 分隔線 &#8212;&#8212;&#8212;&#8212;&#8211;<br /><br /><pre class="brush: java">@XmlSeeAlso({ObjectFactory.class})<br /></pre><br />以上的注解則是確保 <b>JAXB</b> 正常運作，由 <b>XML</b> 轉為 <b>Object</b> 或 <b>Object</b> 轉為 <b>XML</b>。<br /><br />&#8212;&#8212;&#8212;&#8212;&#8211; 分隔線 &#8212;&#8212;&#8212;&#8212;&#8211;<br /><br /><pre class="brush: java">@WebResult(name = "EmployeeInfoList", partName = "employeeInfoList")<br /></pre><br />以上的注解對應 <b>WSDL</b> 內的:<br /><br /><pre class="brush: xml">&lt;wsdl:message name="employeeLookupRequest"&gt;<br />    &lt;wsdl:part element="tns:EmployeeIdList" name="employeeIdList" /&gt;<br />&lt;/wsdl:message&gt;<br /></pre><br />&#8212;&#8212;&#8212;&#8212;&#8211; 分隔線 &#8212;&#8212;&#8212;&#8212;&#8211;<br /><br /><pre class="brush: java">@WebResult(name = "EmployeeInfoList", partName = "employeeInfoList")<br /></pre><br />以上的注解則對應 <b>WSDL</b> 內的:<br /><br /><pre class="brush: xml">&lt;wsdl:message name="employeeLookupResponse"&gt;<br />    &lt;wsdl:part element="tns:EmployeeInfoList" name="employeeInfoList" /&gt;<br />&lt;/wsdl:message&gt;<br /></pre><br /><br />現在將 <b>WAR project</b> 放上 <b>Application Server</b> 並運行 <b>http://localhost/employeeLookupService?wsdl</b>。如果發現找不到 <b>wsdl</b> 檔案即是 <b>wsdl</b> 放的位置不正確。<br /><br />成功找到後可以使用 soapUI 去測試一下，傳送以下 <b>SOAP XML</b> 到 <b>Server</b>:<br /><pre class="brush: xml">&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:com="http://pro.ctlok.com/company"&gt;<br />   &lt;soapenv:Header/&gt;<br />   &lt;soapenv:Body&gt;<br />      &lt;com:EmployeeIdList&gt;<br />         &lt;!--Zero or more repetitions:--&gt;<br />         &lt;com:eid&gt;E1000000&lt;/com:eid&gt;<br />         &lt;com:eid&gt;E1524125&lt;/com:eid&gt;<br />      &lt;/com:EmployeeIdList&gt;<br />   &lt;/soapenv:Body&gt;<br />&lt;/soapenv:Envelope&gt;<br /></pre><br /><b>Server</b> 回傳以下 <b>XML</b> 即代表成功設定:<br /><pre class="brush: xml">&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;<br />   &lt;soapenv:Body&gt;<br />      &lt;EmployeeInfoList xmlns="http://pro.ctlok.com/company"&gt;<br />         &lt;employeeInfo&gt;<br />            &lt;eid&gt;E1000000&lt;/eid&gt;<br />            &lt;firstName&gt;Lawrence&lt;/firstName&gt;<br />            &lt;lastName&gt;Cheung&lt;/lastName&gt;<br />            &lt;age&gt;24&lt;/age&gt;<br />            &lt;title&gt;CEO&lt;/title&gt;<br />         &lt;/employeeInfo&gt;<br />         &lt;employeeInfo&gt;<br />            &lt;eid&gt;E1524125&lt;/eid&gt;<br />            &lt;firstName&gt;Tom&lt;/firstName&gt;<br />            &lt;lastName&gt;Wong&lt;/lastName&gt;<br />            &lt;age&gt;22&lt;/age&gt;<br />            &lt;title&gt;Clerk&lt;/title&gt;<br />         &lt;/employeeInfo&gt;<br />      &lt;/EmployeeInfoList&gt;<br />   &lt;/soapenv:Body&gt;<br />&lt;/soapenv:Envelope&gt;<br /></pre><br />有時間再講解一下 <b>Java Web Service Client</b> 如何設定。<br /><br />相閞書籍: <a href="http://www.amazon.com/Java-Web-Services-Up-Running/dp/059652112X?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Java Web Services: Up and Running" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=059652112X&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=059652112X" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Java-Soa-Cookbook-Eben-Hewitt/dp/0596520727?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Java Soa Cookbook" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0596520727&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596520727" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Java-Web-Services-Running-ebook/dp/B0026OR35I?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Java Web Services: Up and Running" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=B0026OR35I&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=B0026OR35I" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-8108643057802063028?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更新 Blogger 模板]]></title>
    <link href="http://pro.ctlok.com/2011/06/update-blogger-template.html"/>
    <updated>2011-06-22T15:14:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/06/update-blogger-template</id>
    <content type="html"><![CDATA[舊模板加了太多東西，令頁面載入的時間比較長。今次換了一個比較簡潔的模板，看上去的感覺比較舒服一點，再加上停用一些載入時間較長的 <b>Fancy box</b>，<b>Sexy Bookmark</b> 等等，並使用新的方法去載入 <b>Syntax Highlighter</b>， 希望令載入時間更加快。<br /><br /><div style="clear:both"></div><br />更新 Log:<br /><br /><ol><li>Add popular posts widget</li><li>Update jQuery to 1.6.1</li><li>Update Syntax Highlighter</li><li>Update Facebook javascript API</li><li>Update Facebook Like box (iframe -&gt; XFBML)</li><li>Update Facebook Like box style</li><li>Update Facebook Like (iframe -&gt; XFBML)</li><li>Update Google Adsense style</li><li>Update Google Adsense custom search</li><li>Remove Fancy Box</li><li>Remove BloggerAds banner</li></ol><br />相關書籍: <a href="http://www.amazon.com/Beginning-Google-Blogger-Heather-Wright-Porto/dp/1430230126?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Beginning Google Blogger" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=1430230126&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1430230126" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Publishing-Blog-Blogger-Visual-QuickProject/dp/0321637526?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Publishing a Blog with Blogger: Visual QuickProject Guide (2nd Edition)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=0321637526&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0321637526" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><a href="http://www.amazon.com/Blogger-Customize-templates-advertising-Technologies/dp/184719317X?ie=UTF8&amp;tag=program06-20&amp;link_code=bil&amp;camp=213689&amp;creative=392969" imageanchor="1" target="_blank"><img alt="Blogger: Beyond the Basics: Customize and promote your blog with original templates, analytics, advertising, and SEO (From Technologies to Solutions)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL160_&amp;ASIN=184719317X&amp;tag=program06-20" /></a><img alt="" border="0" height="1" src="http://www.assoc-amazon.com/e/ir?t=program06-20&amp;l=bil&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=184719317X" style="border: none !important; margin: 0px !important; padding: 0px !important;" width="1" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-2348991239226884774?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 使用 Bottom Up 和 JAX-WS 來部署 Web Service Provider]]></title>
    <link href="http://pro.ctlok.com/2011/06/java-bottom-up-jax-ws-web-service.html"/>
    <updated>2011-06-17T17:52:00+08:00</updated>
    <id>http://pro.ctlok.com/2011/06/java-bottom-up-jax-ws-web-service</id>
    <content type="html"><![CDATA[網路上關於 <b>Web Service</b> 的資訊不是很多，中文的 <b>Web Service</b> 資源更是少之有少，可能是因為部署 <b>Web Service</b> 是一件麻煩的事，而且性能又不是太好，但 <b>Web Service</b> 也有很多好處。不用同一種程式語言也可以互相交換數據，執行程序，有標準的格式，大多數語言都提供了 <b>Library</b> 去操作。<b>Web Service</b> 大多數用於對外的對像，例如: 銀行和銀行之間的數據交換亦可以通過 <b>Web Service</b> 做到。<br /><br />有 2 種主要的方式去設計一個 <b>Web Service</b>，就是 <b>Top Down</b> 和 <b>Bottom Up</b>，究竟有什麼分別呢?<br /><br /><b>Top Down</b> 是由定義 <b>Object</b> (物件) 和 <b>Interface</b> (介面) 做起的，<b>Object</b> (物件) 你可以想像為傳遞數據的一個容器，而這個物件是由 <b>XML Schema</b> <b>(XSD)</b> 去描述的。<b>Interface</b> (介面) 則是描述這個 <b>Web Service</b> 提供什麼服務，服務需要傳入一個什麼 <b>Object</b> (物件) 和 返回一個什麼 <b>Object</b> (物件)等等描述，這些都是由 <b>Web Services Description Language</b> <b>(WSDL)</b> 去描述的。做好這 2 項工作後就需要製作和 <b>XML Schema</b> 描述一樣的 <b>Object Class</b>，亦要製作和 <b>Web Services Description Language</b> 描述一樣的 <b>Functional Class</b>。最後當然要寫程式式碼和放上 <b>Application Server</b>。<br /><br /><b>Bottom Up</b> 就比較簡單了，是由 <b>Object Class</b> 和 <b>Functional Class</b> 先做起，做起後放上 <b>Application Server</b> 由 <b>Application Server</b> 自動產生出 <b>XML Schema</b> <b>(XSD)</b> 和 <b>Web Services Description Language</b> <b>(WSDL)</b>。不懂得 <b>XML Schema</b> 和 <b>Web Services Description Language</b> 也一樣可以製作出一個 <b>Web Service</b>。<br /><br />最好當然是對 <b>XML Schema</b> 和 <b>Web Services Description Language</b> 有一點認識。<br /><b>XML Schema</b>: <a href="http://www.w3schools.com/schema/default.asp">http://www.w3schools.com/schema/default.asp</a><br /><b>Web Services Description Language</b>: <br /><a href="http://www.w3schools.com/WSDL/default.asp">http://www.w3schools.com/WSDL/default.asp</a><br /><br />首先當然講解一下最簡單的 <b>Bottom Up</b> 方法，首先要在 <b>IDE</b> 建立一個 <b>WAR project</b>，加入一個 <b>Java Class</b>:<br /><pre class="brush: java">package sample.ws;<br /><br />import javax.jws.WebMethod;<br />import javax.jws.WebService;<br /><br />@WebService(<br />        name = &quot;CalculaterService&quot;, <br />        serviceName = &quot;CalculaterService&quot;, <br />        portName = &quot;CalculaterServicePort&quot;, <br />        targetNamespace = &quot;http://pro.ctlok.com/CalculaterService/&quot;)<br />public class CalculaterService {<br /><br />    @WebMethod<br />    public int add(int i, int k) {<br />        return i + k;<br />    }<br /><br />    @WebMethod<br />    public int subtract(int i, int k) {<br />        return i - k;<br />    }<br /><br />}<br /></pre><br />就這樣完成了一個最簡單的 <b>Web Service</b>。<br /><br /><pre class="brush: java">@WebService(<br />        name = &quot;CalculaterService&quot;, <br />        serviceName = &quot;CalculaterService&quot;, <br />        portName = &quot;CalculaterServicePort&quot;, <br />        targetNamespace = &quot;http://pro.ctlok.com/CalculaterService/&quot;)<br /></pre><br />用於通知 <b>Java EE</b> 容器識別這個 <b>Class</b> 是一個 <b>Web Service</b>。<br /><br /><ul><li><b>name</b>: 是在 <b>Application Server</b> 上的名稱</li><li><b>serviceName</b>: 是在 <b>URL</b> 和 <b>WSDL</b> 上顯示的名稱</li><li><b>portName</b>: 是在 <b>WSDL</b> 上顯示的名稱</li><li><b>targetNamespace </b>: 是在 <b>WSDL</b> 上顯示的命名空間，令 <b>XML</b> 內的名稱不會相同</li></ul><br /><pre class="brush: java">@WebMethod<br /></pre><br />是指定這個 <b>Method</b> 是 <b>Web Service</b> 的其中一個 <b>Function</b>。<br /><br /><b>CalculaterService</b> 亦可以是一個 <b>EJB Session Bean</b>:<br /><br /><pre class="brush: java">package sample.ws;<br /><br />@Local<br />public interface CalculaterService{<br /><br />    public int add(int i, int k);<br />    public int subtract(int i, int k);<br /><br />}<br /></pre><br /><pre class="brush: java">package sample.ws;<br /><br />import javax.jws.WebMethod;<br />import javax.jws.WebService;<br /><br />@Stateless<br />@WebService(<br />        name = &quot;CalculaterService&quot;, <br />        serviceName = &quot;CalculaterService&quot;, <br />        portName = &quot;CalculaterServicePort&quot;, <br />        targetNamespace = &quot;http://pro.ctlok.com/CalculaterService/&quot;)<br />public class CalculaterServiceBean implements CalculaterService{<br /><br />    @WebMethod<br />    public int add(int i, int k) {<br />        return i + k;<br />    }<br /><br />    @WebMethod<br />    public int subtract(int i, int k) {<br />        return i - k;<br />    }<br /><br />}<br /></pre><br />放上 Application Server 後使用瀏覽器開啟: <b>http://localhost/CalculaterService?wsdl</b> 會顯示出以下的 <b>WSDL</b><br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br />&lt;definitions name=&quot;CalculaterService&quot; targetNamespace=&quot;http://pro.ctlok.com/CalculaterService/&quot;<br />    xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;<br />    xmlns:tns=&quot;http://pro.ctlok.com/CalculaterService/&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot;&gt;<br /><br />    &lt;types&gt;<br />        &lt;xsd:schema&gt;<br />            &lt;xsd:import namespace=&quot;http://pro.ctlok.com/CalculaterService/&quot;<br />                schemaLocation=&quot;CalculaterService_schema1.xsd&quot; /&gt;<br />        &lt;/xsd:schema&gt;<br />    &lt;/types&gt;<br /><br />    &lt;message name=&quot;addResponse&quot;&gt;<br />        &lt;part name=&quot;parameters&quot; element=&quot;tns:addResponse&quot;&gt;<br />        &lt;/part&gt;<br />    &lt;/message&gt;<br /><br />    &lt;message name=&quot;add&quot;&gt;<br />        &lt;part name=&quot;parameters&quot; element=&quot;tns:add&quot;&gt;<br />        &lt;/part&gt;<br />    &lt;/message&gt;<br /><br />    &lt;message name=&quot;subtractResponse&quot;&gt;<br />        &lt;part name=&quot;parameters&quot; element=&quot;tns:subtractResponse&quot;&gt;<br />        &lt;/part&gt;<br />    &lt;/message&gt;<br /><br />    &lt;message name=&quot;subtract&quot;&gt;<br />        &lt;part name=&quot;parameters&quot; element=&quot;tns:subtract&quot;&gt;<br />        &lt;/part&gt;<br />    &lt;/message&gt;<br /><br />    &lt;portType name=&quot;CalculaterService&quot;&gt;<br />        &lt;operation name=&quot;add&quot;&gt;<br />            &lt;input message=&quot;tns:add&quot;&gt;<br />            &lt;/input&gt;<br />            &lt;output message=&quot;tns:addResponse&quot;&gt;<br />            &lt;/output&gt;<br />        &lt;/operation&gt;<br /><br />        &lt;operation name=&quot;subtract&quot;&gt;<br />            &lt;input message=&quot;tns:subtract&quot;&gt;<br />            &lt;/input&gt;<br />            &lt;output message=&quot;tns:subtractResponse&quot;&gt;<br />            &lt;/output&gt;<br />        &lt;/operation&gt;<br />    &lt;/portType&gt;<br /><br />    &lt;binding name=&quot;CalculaterServicePortBinding&quot; type=&quot;tns:CalculaterService&quot;&gt;<br />        &lt;soap:binding style=&quot;document&quot;<br />            transport=&quot;http://schemas.xmlsoap.org/soap/http&quot; /&gt;<br />        &lt;operation name=&quot;add&quot;&gt;<br />            &lt;soap:operation soapAction=&quot;&quot; /&gt;<br />            &lt;input&gt;<br />                &lt;soap:body use=&quot;literal&quot; /&gt;<br />            &lt;/input&gt;<br />            &lt;output&gt;<br />                &lt;soap:body use=&quot;literal&quot; /&gt;<br />            &lt;/output&gt;<br />        &lt;/operation&gt;<br />        &lt;operation name=&quot;subtract&quot;&gt;<br />            &lt;soap:operation soapAction=&quot;&quot; /&gt;<br />            &lt;input&gt;<br />                &lt;soap:body use=&quot;literal&quot; /&gt;<br />            &lt;/input&gt;<br />            &lt;output&gt;<br />                &lt;soap:body use=&quot;literal&quot; /&gt;<br />            &lt;/output&gt;<br />        &lt;/operation&gt;<br />    &lt;/binding&gt;<br /><br />    &lt;service name=&quot;CalculaterService&quot;&gt;<br />        &lt;port name=&quot;CalculaterServicePort&quot; binding=&quot;tns:CalculaterServicePortBinding&quot;&gt;<br />            &lt;soap:address<br />                location=&quot;http://localhost/CalculaterService&quot; /&gt;<br />        &lt;/port&gt;<br />    &lt;/service&gt;<br />&lt;/definitions&gt;<br /></pre><br /><b>Application Server</b> 除了自動產生出 <b>WSDL</b> 外，亦會產生出 <b>XML Schema</b>。<br /><br />使用瀏覽器開啟: <b>http://localhost/CalculaterService/CalculaterService_schema1.xsd</b> 會顯示出以下的 <b>XML Schema</b>:<br /><pre class="brush: xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;<br />    xmlns:tns=&quot;http://pro.ctlok.com/CalculaterService/&quot; version=&quot;1.0&quot;<br />    targetNamespace=&quot;http://pro.ctlok.com/CalculaterService/&quot;&gt;<br /><br />    &lt;xs:element name=&quot;add&quot; type=&quot;tns:add&quot;&gt;&lt;/xs:element&gt;<br />    &lt;xs:element name=&quot;addResponse&quot; type=&quot;tns:addResponse&quot;&gt;&lt;/xs:element&gt;<br />    &lt;xs:element name=&quot;subtract&quot; type=&quot;tns:subtract&quot;&gt;&lt;/xs:element&gt;<br />    &lt;xs:element name=&quot;subtractResponse&quot; type=&quot;tns:subtractResponse&quot;&gt;&lt;/xs:element&gt;<br /><br />    &lt;xs:complexType name=&quot;add&quot;&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name=&quot;arg0&quot; type=&quot;xs:int&quot;&gt;&lt;/xs:element&gt;<br />            &lt;xs:element name=&quot;arg1&quot; type=&quot;xs:int&quot;&gt;&lt;/xs:element&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:complexType name=&quot;addResponse&quot;&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name=&quot;return&quot; type=&quot;xs:int&quot;&gt;&lt;/xs:element&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:complexType name=&quot;subtract&quot;&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name=&quot;arg0&quot; type=&quot;xs:int&quot;&gt;&lt;/xs:element&gt;<br />            &lt;xs:element name=&quot;arg1&quot; type=&quot;xs:int&quot;&gt;&lt;/xs:element&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br /><br />    &lt;xs:complexType name=&quot;subtractResponse&quot;&gt;<br />        &lt;xs:sequence&gt;<br />            &lt;xs:element name=&quot;return&quot; type=&quot;xs:int&quot;&gt;&lt;/xs:element&gt;<br />        &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br />&lt;/xs:schema&gt;<br /></pre><br />看到這是資料即是成功部署到 <b>Web Service</b>，接下來使用 <a href="http://www.soapui.org/">soapUI</a> 來模擬 <b>Web Service Client</b>。<br /><br /><b>soapUI</b> 下載地址: <a href="http://sourceforge.net/projects/soapui/files/">http://sourceforge.net/projects/soapui/files/</a><br /><br />請選擇安裝程式去下載，完成安裝後打開 <b>soapUI</b>:<br /><ol><li><b>File</b> -> <b>New soapUI Project</b></li><li>在 <b>Project name</b> 輸入 <b>localhost</b> 後按 <b>OK</b></li><li>在 <b>Project</b> 上按滑鼠加鍵 -> <b>Add WSDL</b></li><li>在 <b>WSDL Location</b> 輸入 <b>http://localhost/CalculaterService/CalculaterService.wsdl</b></li></ol><br />現在應該看得到 2 個 Method 名稱，分別為 <b>add</b> 和 <b>subtract</b>。<br />打開 <b>add</b> 的 <b>Request 1</b> 左邊顯示以下資料:<br /><pre class="brush: xml">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;<br />    xmlns:ws=&quot;http://pro.ctlok.com/CalculaterService/&quot;&gt;<br />    &lt;soapenv:Header /&gt;<br />    &lt;soapenv:Body&gt;<br />        &lt;ws:add&gt;<br />            &lt;arg0&gt;?&lt;/arg0&gt;<br />            &lt;arg1&gt;?&lt;/arg1&gt;<br />        &lt;/ws:add&gt;<br />    &lt;/soapenv:Body&gt;<br />&lt;/soapenv:Envelope&gt;<br /></pre><br />改為:<br /><pre class="brush: xml">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;<br />    xmlns:ws=&quot;http://pro.ctlok.com/CalculaterService/&quot;&gt;<br />    &lt;soapenv:Header /&gt;<br />    &lt;soapenv:Body&gt;<br />        &lt;ws:add&gt;<br />            &lt;arg0&gt;1&lt;/arg0&gt;<br />            &lt;arg1&gt;2&lt;/arg1&gt;<br />        &lt;/ws:add&gt;<br />    &lt;/soapenv:Body&gt;<br />&lt;/soapenv:Envelope&gt;<br /></pre><br />然後傳送出去，右邊會顯示出以下 <b>XML</b> 即代表成功:<br /><pre class="brush: xml">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;<br />    &lt;soapenv:Body&gt;<br />        &lt;dlwmin:addResponse xmlns:dlwmin=&quot;http://pro.ctlok.com/CalculaterService/&quot;&gt;<br />            &lt;return&gt;3&lt;/return&gt;<br />        &lt;/dlwmin:addResponse&gt;<br />    &lt;/soapenv:Body&gt;<br />&lt;/soapenv:Envelope&gt;<br /></pre><br />其實在 <b>Web Service</b> 的 <b>Function</b> 不一定要傳入或返回基本型態 (short, int, long, float, double, char, byte, boolean)，可以傳入或返回 <b>Object</b> (物件)，例如:<br /><br /><b>Object Class</b>:<br /><pre class="brush: java">package sample.ws;<br /><br />public class Info{<br /><br />    private String firstName;<br />    private String lastName;<br /><br />    public String getFirstName(){<br />        return firstName;<br />    }<br /><br />    public String getLastName(){<br />        return lastName;<br />    }<br /><br />    public void setFirstName(String firstName){<br />        this.firstName = firstName;<br />    }<br /><br />    public void setLastName(String lastName){<br />        this.lastName = lastName;<br />    }<br /><br />}<br /></pre><br /><b>Web Service</b>:<br /><pre class="brush: java">@WebMethod<br />public String sayHello(Info info) {<br />    return &quot;Hello! &quot; + info.getFirstName() <br />            + &quot; &quot; + info.getLastName();<br />}<br /><br />@WebMethod<br />public Info getInfo(int id){<br />    return findInfo(id);<br />}<br /></pre><br />有時間會再講解 <b>Top Down</b> 的做法。<br /><br />相關書籍: <a imageanchor="1" target="_blank"  href="http://www.amazon.com/Java-Web-Services-Up-Running/dp/059652112X?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Java Web Services: Up and Running" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=059652112X&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=059652112X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Java-Soa-Cookbook-Eben-Hewitt/dp/0596520727?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Java Soa Cookbook" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0596520727&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0596520727" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><a imageanchor="1" target="_blank"  href="http://www.amazon.com/Building-Web-Services-Java-Making/dp/0672326418?ie=UTF8&tag=program06-20&link_code=bil&camp=213689&creative=392969"><img alt="Building Web Services with Java: Making Sense of XML, SOAP, WSDL, and UDDI (2nd Edition)" src="http://ws.amazon.com/widgets/q?MarketPlace=US&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&ASIN=0672326418&tag=program06-20" /></a><img src="http://www.assoc-amazon.com/e/ir?t=program06-20&l=bil&camp=213689&creative=392969&o=1&a=0672326418" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; padding: 0px !important" /><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5998578522192555089-3470714314351219743?l=lawpronotes.blogspot.com' alt='' /></div>
]]></content>
  </entry>
  
</feed>
